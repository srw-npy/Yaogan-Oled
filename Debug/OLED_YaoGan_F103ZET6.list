
OLED_YaoGan_F103ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c10  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008df8  08008df8  00018df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009260  08009260  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009260  08009260  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009260  08009260  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009260  08009260  00019260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200001d4  0800943c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  0800943c  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d763  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281d  00000000  00000000  0002d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d2  00000000  00000000  00030e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af65  00000000  00000000  0003183a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122d7  00000000  00000000  0004c79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009abb9  00000000  00000000  0005ea76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000474c  00000000  00000000  000f9630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fdd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	08008de0 	.word	0x08008de0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	08008de0 	.word	0x08008de0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_d2lz>:
 8000c40:	b538      	push	{r3, r4, r5, lr}
 8000c42:	4605      	mov	r5, r0
 8000c44:	460c      	mov	r4, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	f7ff ff21 	bl	8000a94 <__aeabi_dcmplt>
 8000c52:	b928      	cbnz	r0, 8000c60 <__aeabi_d2lz+0x20>
 8000c54:	4628      	mov	r0, r5
 8000c56:	4621      	mov	r1, r4
 8000c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c5c:	f000 b80a 	b.w	8000c74 <__aeabi_d2ulz>
 8000c60:	4628      	mov	r0, r5
 8000c62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c66:	f000 f805 	bl	8000c74 <__aeabi_d2ulz>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	bf00      	nop

08000c74 <__aeabi_d2ulz>:
 8000c74:	b5d0      	push	{r4, r6, r7, lr}
 8000c76:	2200      	movs	r2, #0
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <__aeabi_d2ulz+0x34>)
 8000c7a:	4606      	mov	r6, r0
 8000c7c:	460f      	mov	r7, r1
 8000c7e:	f7ff fc97 	bl	80005b0 <__aeabi_dmul>
 8000c82:	f7ff ff6d 	bl	8000b60 <__aeabi_d2uiz>
 8000c86:	4604      	mov	r4, r0
 8000c88:	f7ff fc18 	bl	80004bc <__aeabi_ui2d>
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <__aeabi_d2ulz+0x38>)
 8000c90:	f7ff fc8e 	bl	80005b0 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4630      	mov	r0, r6
 8000c9a:	4639      	mov	r1, r7
 8000c9c:	f7ff fad0 	bl	8000240 <__aeabi_dsub>
 8000ca0:	f7ff ff5e 	bl	8000b60 <__aeabi_d2uiz>
 8000ca4:	4621      	mov	r1, r4
 8000ca6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca8:	3df00000 	.word	0x3df00000
 8000cac:	41f00000 	.word	0x41f00000

08000cb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cdc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ce0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cea:	2202      	movs	r2, #2
 8000cec:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cee:	4815      	ldr	r0, [pc, #84]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000cf0:	f000 ffcc 	bl	8001c8c <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cfa:	f000 fad8 	bl	80012ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d06:	2307      	movs	r3, #7
 8000d08:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000d10:	f001 f9a0 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fac8 	bl	80012ae <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d22:	2302      	movs	r3, #2
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0x94>)
 8000d2c:	f001 f992 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d36:	f000 faba 	bl	80012ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200001f0 	.word	0x200001f0
 8000d48:	40012400 	.word	0x40012400

08000d4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <HAL_ADC_MspInit+0xbc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d149      	bne.n	8000e00 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d8a:	f043 0304 	orr.w	r3, r3, #4
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_ADC_MspInit+0xc0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da0:	2303      	movs	r3, #3
 8000da2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	4619      	mov	r1, r3
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <HAL_ADC_MspInit+0xc4>)
 8000dac:	f001 ff9a 	bl	8002ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_ADC_MspInit+0xcc>)
 8000db4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd0:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dda:	2220      	movs	r2, #32
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000de6:	f001 fc3d 	bl	8002664 <HAL_DMA_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000df0:	f000 fa5d 	bl	80012ae <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000df8:	621a      	str	r2, [r3, #32]
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_ADC_MspInit+0xc8>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	20000220 	.word	0x20000220
 8000e18:	40020008 	.word	0x40020008

08000e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6153      	str	r3, [r2, #20]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	200b      	movs	r0, #11
 8000e40:	f001 fbd9 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e44:	200b      	movs	r0, #11
 8000e46:	f001 fbf2 	bl	800262e <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_GPIO_Init+0x7c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_YaoGan_Pin;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_YaoGan_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_GPIO_Init+0x80>)
 8000ec8:	f001 ff0c 	bl	8002ce4 <HAL_GPIO_Init>

}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40011c00 	.word	0x40011c00

08000edc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C2_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C2_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C2_Init+0x50>)
 8000f1a:	f002 f88f 	bl	800303c <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f9c3 	bl	80012ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000264 	.word	0x20000264
 8000f30:	40005800 	.word	0x40005800
 8000f34:	00061a80 	.word	0x00061a80

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a16      	ldr	r2, [pc, #88]	; (8000fac <HAL_I2C_MspInit+0x74>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d124      	bne.n	8000fa2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f5e:	f043 0308 	orr.w	r3, r3, #8
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 0310 	add.w	r3, r7, #16
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_I2C_MspInit+0x7c>)
 8000f86:	f001 fead 	bl	8002ce4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_I2C_MspInit+0x78>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40005800 	.word	0x40005800
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	b098      	sub	sp, #96	; 0x60
 8000fbe:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc0:	f000 fdde 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc4:	f000 f916 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc8:	f7ff ff46 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fcc:	f7ff ff26 	bl	8000e1c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd0:	f7ff fe6e 	bl	8000cb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000fd4:	f000 fd38 	bl	8001a48 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000fd8:	f7ff ff80 	bl	8000edc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, (uint32_t)2);
 8000fdc:	2202      	movs	r2, #2
 8000fde:	497e      	ldr	r1, [pc, #504]	; (80011d8 <main+0x220>)
 8000fe0:	487e      	ldr	r0, [pc, #504]	; (80011dc <main+0x224>)
 8000fe2:	f000 ff3d 	bl	8001e60 <HAL_ADC_Start_DMA>
  HAL_Delay(20);
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f000 fe2c 	bl	8001c44 <HAL_Delay>
  OLED_Init();
 8000fec:	f000 f98c 	bl	8001308 <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(KEY_YaoGan_GPIO_Port, KEY_YaoGan_Pin) == GPIO_PIN_RESET)
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	487b      	ldr	r0, [pc, #492]	; (80011e0 <main+0x228>)
 8000ff4:	f002 f80a 	bl	800300c <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d153      	bne.n	80010a6 <main+0xee>
	  {
		  HAL_Delay(10);
 8000ffe:	200a      	movs	r0, #10
 8001000:	f000 fe20 	bl	8001c44 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(KEY_YaoGan_GPIO_Port, KEY_YaoGan_Pin) == GPIO_PIN_RESET)
 8001004:	2120      	movs	r1, #32
 8001006:	4876      	ldr	r0, [pc, #472]	; (80011e0 <main+0x228>)
 8001008:	f002 f800 	bl	800300c <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d149      	bne.n	80010a6 <main+0xee>
		  {
			  for(uint8_t i = 0; i < 10; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8001018:	e039      	b.n	800108e <main+0xd6>
			  {
				  OLED_NewFrame();
 800101a:	f000 f9d1 	bl	80013c0 <OLED_NewFrame>
				  OLED_DrawCircle(64, 32, 25, OLED_COLOR_NORMAL);
 800101e:	2300      	movs	r3, #0
 8001020:	2219      	movs	r2, #25
 8001022:	2120      	movs	r1, #32
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f000 fa63 	bl	80014f0 <OLED_DrawCircle>
				  OLED_DrawFilledCircle(x, y, 5, OLED_COLOR_NORMAL);
 800102a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800102e:	b2d8      	uxtb	r0, r3
 8001030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001034:	b2d9      	uxtb	r1, r3
 8001036:	2300      	movs	r3, #0
 8001038:	2205      	movs	r2, #5
 800103a:	f000 fb35 	bl	80016a8 <OLED_DrawFilledCircle>
				  OLED_DrawCircle(64, 32, 35 + i, OLED_COLOR_NORMAL);
 800103e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001042:	3323      	adds	r3, #35	; 0x23
 8001044:	b2da      	uxtb	r2, r3
 8001046:	2300      	movs	r3, #0
 8001048:	2120      	movs	r1, #32
 800104a:	2040      	movs	r0, #64	; 0x40
 800104c:	f000 fa50 	bl	80014f0 <OLED_DrawCircle>
				  OLED_DrawCircle(64, 32, 45 + i*2, OLED_COLOR_NORMAL);
 8001050:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	332d      	adds	r3, #45	; 0x2d
 800105a:	b2da      	uxtb	r2, r3
 800105c:	2300      	movs	r3, #0
 800105e:	2120      	movs	r1, #32
 8001060:	2040      	movs	r0, #64	; 0x40
 8001062:	f000 fa45 	bl	80014f0 <OLED_DrawCircle>
				  OLED_DrawCircle(64, 32, 55 + i*3, OLED_COLOR_NORMAL);
 8001066:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800106a:	461a      	mov	r2, r3
 800106c:	0052      	lsls	r2, r2, #1
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3337      	adds	r3, #55	; 0x37
 8001074:	b2da      	uxtb	r2, r3
 8001076:	2300      	movs	r3, #0
 8001078:	2120      	movs	r1, #32
 800107a:	2040      	movs	r0, #64	; 0x40
 800107c:	f000 fa38 	bl	80014f0 <OLED_DrawCircle>
				  OLED_ShowFrame();
 8001080:	f000 f9aa 	bl	80013d8 <OLED_ShowFrame>
			  for(uint8_t i = 0; i < 10; i++)
 8001084:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001088:	3301      	adds	r3, #1
 800108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800108e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001092:	2b09      	cmp	r3, #9
 8001094:	d9c1      	bls.n	800101a <main+0x62>
			  }
			  while(HAL_GPIO_ReadPin(KEY_YaoGan_GPIO_Port, KEY_YaoGan_Pin) == GPIO_PIN_RESET){}
 8001096:	bf00      	nop
 8001098:	2120      	movs	r1, #32
 800109a:	4851      	ldr	r0, [pc, #324]	; (80011e0 <main+0x228>)
 800109c:	f001 ffb6 	bl	800300c <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f8      	beq.n	8001098 <main+0xe0>
		  }
	  }

	  adc_x = adc_buf[0] * 3.3/4096;
 80010a6:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <main+0x220>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa16 	bl	80004dc <__aeabi_i2d>
 80010b0:	a347      	add	r3, pc, #284	; (adr r3, 80011d0 <main+0x218>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa7b 	bl	80005b0 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	4b47      	ldr	r3, [pc, #284]	; (80011e4 <main+0x22c>)
 80010c8:	f7ff fb9c 	bl	8000804 <__aeabi_ddiv>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd64 	bl	8000ba0 <__aeabi_d2f>
 80010d8:	4603      	mov	r3, r0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
	  adc_y = adc_buf[1] * 3.3/4096;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <main+0x220>)
 80010de:	885b      	ldrh	r3, [r3, #2]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f9fb 	bl	80004dc <__aeabi_i2d>
 80010e6:	a33a      	add	r3, pc, #232	; (adr r3, 80011d0 <main+0x218>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa60 	bl	80005b0 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <main+0x22c>)
 80010fe:	f7ff fb81 	bl	8000804 <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd49 	bl	8000ba0 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
	  sprintf(message, "%d %.2f %d %.2f\r\n", adc_buf[0], adc_x, adc_buf[1], adc_y);
 8001112:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <main+0x220>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4698      	mov	r8, r3
 8001118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800111a:	f7ff f9f1 	bl	8000500 <__aeabi_f2d>
 800111e:	4604      	mov	r4, r0
 8001120:	460d      	mov	r5, r1
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <main+0x220>)
 8001124:	885b      	ldrh	r3, [r3, #2]
 8001126:	461e      	mov	r6, r3
 8001128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800112a:	f7ff f9e9 	bl	8000500 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	1d38      	adds	r0, r7, #4
 8001134:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001138:	9602      	str	r6, [sp, #8]
 800113a:	e9cd 4500 	strd	r4, r5, [sp]
 800113e:	4642      	mov	r2, r8
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <main+0x230>)
 8001142:	f004 f9c9 	bl	80054d8 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f86d 	bl	8000228 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	1d39      	adds	r1, r7, #4
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	4824      	ldr	r0, [pc, #144]	; (80011ec <main+0x234>)
 800115a:	f003 f921 	bl	80043a0 <HAL_UART_Transmit>

	  x = (4044 - adc_buf[1]) * 50/4044 + 39;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <main+0x220>)
 8001160:	885b      	ldrh	r3, [r3, #2]
 8001162:	f5c3 637c 	rsb	r3, r3, #4032	; 0xfc0
 8001166:	330c      	adds	r3, #12
 8001168:	2232      	movs	r2, #50	; 0x32
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <main+0x238>)
 8001170:	fb82 1203 	smull	r1, r2, r2, r3
 8001174:	441a      	add	r2, r3
 8001176:	12d2      	asrs	r2, r2, #11
 8001178:	17db      	asrs	r3, r3, #31
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	b29b      	uxth	r3, r3
 800117e:	3327      	adds	r3, #39	; 0x27
 8001180:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  y = adc_buf[0] * 50/4044 + 7;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <main+0x220>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	2332      	movs	r3, #50	; 0x32
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <main+0x238>)
 8001192:	fb82 1203 	smull	r1, r2, r2, r3
 8001196:	441a      	add	r2, r3
 8001198:	12d2      	asrs	r2, r2, #11
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3307      	adds	r3, #7
 80011a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	  OLED_NewFrame();
 80011a6:	f000 f90b 	bl	80013c0 <OLED_NewFrame>
	  OLED_DrawCircle(64, 32, 25, OLED_COLOR_NORMAL);
 80011aa:	2300      	movs	r3, #0
 80011ac:	2219      	movs	r2, #25
 80011ae:	2120      	movs	r1, #32
 80011b0:	2040      	movs	r0, #64	; 0x40
 80011b2:	f000 f99d 	bl	80014f0 <OLED_DrawCircle>
	  OLED_DrawFilledCircle(x, y, 5, OLED_COLOR_NORMAL);
 80011b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80011c0:	b2d9      	uxtb	r1, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	2205      	movs	r2, #5
 80011c6:	f000 fa6f 	bl	80016a8 <OLED_DrawFilledCircle>
	  OLED_ShowFrame();
 80011ca:	f000 f905 	bl	80013d8 <OLED_ShowFrame>
	  if(HAL_GPIO_ReadPin(KEY_YaoGan_GPIO_Port, KEY_YaoGan_Pin) == GPIO_PIN_RESET)
 80011ce:	e70f      	b.n	8000ff0 <main+0x38>
 80011d0:	66666666 	.word	0x66666666
 80011d4:	400a6666 	.word	0x400a6666
 80011d8:	200002b8 	.word	0x200002b8
 80011dc:	200001f0 	.word	0x200001f0
 80011e0:	40011c00 	.word	0x40011c00
 80011e4:	40b00000 	.word	0x40b00000
 80011e8:	08008df8 	.word	0x08008df8
 80011ec:	20000748 	.word	0x20000748
 80011f0:	81a55963 	.word	0x81a55963

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b096      	sub	sp, #88	; 0x58
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011fe:	2228      	movs	r2, #40	; 0x28
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f004 f9cb 	bl	800559e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001244:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001248:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fb90 	bl	8003974 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800125a:	f000 f828 	bl	80012ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fdfc 	bl	8003e78 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001286:	f000 f812 	bl	80012ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128a:	2302      	movs	r3, #2
 800128c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800128e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f002 ff7c 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012a2:	f000 f804 	bl	80012ae <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3758      	adds	r7, #88	; 0x58
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b2:	b672      	cpsid	i
}
 80012b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <Error_Handler+0x8>

080012b8 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c2, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	2178      	movs	r1, #120	; 0x78
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <OLED_Send+0x28>)
 80012d4:	f001 fff6 	bl	80032c4 <HAL_I2C_Master_Transmit>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000264 	.word	0x20000264

080012e4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <OLED_SendCmd+0x20>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80012f4:	2102      	movs	r1, #2
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <OLED_SendCmd+0x20>)
 80012f8:	f7ff ffde 	bl	80012b8 <OLED_Send>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200006bc 	.word	0x200006bc

08001308 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800130c:	20ae      	movs	r0, #174	; 0xae
 800130e:	f7ff ffe9 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8001312:	2020      	movs	r0, #32
 8001314:	f7ff ffe6 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001318:	2010      	movs	r0, #16
 800131a:	f7ff ffe3 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 800131e:	20b0      	movs	r0, #176	; 0xb0
 8001320:	f7ff ffe0 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8001324:	20c8      	movs	r0, #200	; 0xc8
 8001326:	f7ff ffdd 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff ffda 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8001330:	2010      	movs	r0, #16
 8001332:	f7ff ffd7 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8001336:	2040      	movs	r0, #64	; 0x40
 8001338:	f7ff ffd4 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 800133c:	2081      	movs	r0, #129	; 0x81
 800133e:	f7ff ffd1 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8001342:	20df      	movs	r0, #223	; 0xdf
 8001344:	f7ff ffce 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8001348:	20a1      	movs	r0, #161	; 0xa1
 800134a:	f7ff ffcb 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 800134e:	20a6      	movs	r0, #166	; 0xa6
 8001350:	f7ff ffc8 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8001354:	20a8      	movs	r0, #168	; 0xa8
 8001356:	f7ff ffc5 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 800135a:	203f      	movs	r0, #63	; 0x3f
 800135c:	f7ff ffc2 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8001360:	20a4      	movs	r0, #164	; 0xa4
 8001362:	f7ff ffbf 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8001366:	20d3      	movs	r0, #211	; 0xd3
 8001368:	f7ff ffbc 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ffb9 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8001372:	20d5      	movs	r0, #213	; 0xd5
 8001374:	f7ff ffb6 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8001378:	20f0      	movs	r0, #240	; 0xf0
 800137a:	f7ff ffb3 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 800137e:	20d9      	movs	r0, #217	; 0xd9
 8001380:	f7ff ffb0 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8001384:	2022      	movs	r0, #34	; 0x22
 8001386:	f7ff ffad 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 800138a:	20da      	movs	r0, #218	; 0xda
 800138c:	f7ff ffaa 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001390:	2012      	movs	r0, #18
 8001392:	f7ff ffa7 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8001396:	20db      	movs	r0, #219	; 0xdb
 8001398:	f7ff ffa4 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 800139c:	2020      	movs	r0, #32
 800139e:	f7ff ffa1 	bl	80012e4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 80013a2:	208d      	movs	r0, #141	; 0x8d
 80013a4:	f7ff ff9e 	bl	80012e4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 80013a8:	2014      	movs	r0, #20
 80013aa:	f7ff ff9b 	bl	80012e4 <OLED_SendCmd>

  OLED_NewFrame();
 80013ae:	f000 f807 	bl	80013c0 <OLED_NewFrame>
  OLED_ShowFrame();
 80013b2:	f000 f811 	bl	80013d8 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80013b6:	20af      	movs	r0, #175	; 0xaf
 80013b8:	f7ff ff94 	bl	80012e4 <OLED_SendCmd>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	2100      	movs	r1, #0
 80013ca:	4802      	ldr	r0, [pc, #8]	; (80013d4 <OLED_NewFrame+0x14>)
 80013cc:	f004 f8e7 	bl	800559e <memset>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200002bc 	.word	0x200002bc

080013d8 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <OLED_ShowFrame+0x5c>)
 80013e0:	2240      	movs	r2, #64	; 0x40
 80013e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	e01b      	b.n	8001422 <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	3b50      	subs	r3, #80	; 0x50
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff77 	bl	80012e4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ff74 	bl	80012e4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80013fc:	2010      	movs	r0, #16
 80013fe:	f7ff ff71 	bl	80012e4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <OLED_ShowFrame+0x60>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <OLED_ShowFrame+0x64>)
 800140a:	4413      	add	r3, r2
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	4619      	mov	r1, r3
 8001410:	f004 f952 	bl	80056b8 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001414:	2181      	movs	r1, #129	; 0x81
 8001416:	4807      	ldr	r0, [pc, #28]	; (8001434 <OLED_ShowFrame+0x5c>)
 8001418:	f7ff ff4e 	bl	80012b8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	3301      	adds	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b07      	cmp	r3, #7
 8001426:	d9e0      	bls.n	80013ea <OLED_ShowFrame+0x12>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200006c0 	.word	0x200006c0
 8001438:	200006c1 	.word	0x200006c1
 800143c:	200002bc 	.word	0x200002bc

08001440 <OLED_SetPixel>:
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	460b      	mov	r3, r1
 800144c:	71bb      	strb	r3, [r7, #6]
 800144e:	4613      	mov	r3, r2
 8001450:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db43      	blt.n	80014e2 <OLED_SetPixel+0xa2>
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	2b3f      	cmp	r3, #63	; 0x3f
 800145e:	d840      	bhi.n	80014e2 <OLED_SetPixel+0xa2>
    return;
  if (!color)
 8001460:	797b      	ldrb	r3, [r7, #5]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d11d      	bne.n	80014a2 <OLED_SetPixel+0x62>
  {
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	b2d8      	uxtb	r0, r3
 800146c:	4602      	mov	r2, r0
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	491e      	ldr	r1, [pc, #120]	; (80014ec <OLED_SetPixel+0xac>)
 8001472:	01d2      	lsls	r2, r2, #7
 8001474:	440a      	add	r2, r1
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b25a      	sxtb	r2, r3
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b259      	sxtb	r1, r3
 800148e:	4602      	mov	r2, r0
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	b2c8      	uxtb	r0, r1
 8001494:	4915      	ldr	r1, [pc, #84]	; (80014ec <OLED_SetPixel+0xac>)
 8001496:	01d2      	lsls	r2, r2, #7
 8001498:	440a      	add	r2, r1
 800149a:	4413      	add	r3, r2
 800149c:	4602      	mov	r2, r0
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e020      	b.n	80014e4 <OLED_SetPixel+0xa4>
  }
  else
  {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	4602      	mov	r2, r0
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	490f      	ldr	r1, [pc, #60]	; (80014ec <OLED_SetPixel+0xac>)
 80014ae:	01d2      	lsls	r2, r2, #7
 80014b0:	440a      	add	r2, r1
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b25a      	sxtb	r2, r3
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	2101      	movs	r1, #1
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	4013      	ands	r3, r2
 80014cc:	b259      	sxtb	r1, r3
 80014ce:	4602      	mov	r2, r0
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	b2c8      	uxtb	r0, r1
 80014d4:	4905      	ldr	r1, [pc, #20]	; (80014ec <OLED_SetPixel+0xac>)
 80014d6:	01d2      	lsls	r2, r2, #7
 80014d8:	440a      	add	r2, r1
 80014da:	4413      	add	r3, r2
 80014dc:	4602      	mov	r2, r0
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e000      	b.n	80014e4 <OLED_SetPixel+0xa4>
    return;
 80014e2:	bf00      	nop
  }
}
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	200002bc 	.word	0x200002bc

080014f0 <OLED_DrawCircle>:
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color)
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	461a      	mov	r2, r3
 80014fe:	4623      	mov	r3, r4
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	4603      	mov	r3, r0
 8001504:	71bb      	strb	r3, [r7, #6]
 8001506:	460b      	mov	r3, r1
 8001508:	717b      	strb	r3, [r7, #5]
 800150a:	4613      	mov	r3, r2
 800150c:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 800150e:	2300      	movs	r3, #0
 8001510:	81fb      	strh	r3, [r7, #14]
 8001512:	797b      	ldrb	r3, [r7, #5]
 8001514:	81bb      	strh	r3, [r7, #12]
 8001516:	797b      	ldrb	r3, [r7, #5]
 8001518:	b29b      	uxth	r3, r3
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	b29b      	uxth	r3, r3
 800151e:	f1c3 0303 	rsb	r3, r3, #3
 8001522:	b29b      	uxth	r3, r3
 8001524:	817b      	strh	r3, [r7, #10]
  while (a <= b)
 8001526:	e0b3      	b.n	8001690 <OLED_DrawCircle+0x1a0>
  {
    OLED_SetPixel(x - b, y - a, color);
 8001528:	89bb      	ldrh	r3, [r7, #12]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	b2d8      	uxtb	r0, r3
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	79ba      	ldrb	r2, [r7, #6]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	793a      	ldrb	r2, [r7, #4]
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff ff7e 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8001544:	89bb      	ldrh	r3, [r7, #12]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4413      	add	r3, r2
 800154c:	b2d8      	uxtb	r0, r3
 800154e:	89fb      	ldrh	r3, [r7, #14]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	79ba      	ldrb	r2, [r7, #6]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	793a      	ldrb	r2, [r7, #4]
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff ff70 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b2d8      	uxtb	r0, r3
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	4413      	add	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	793a      	ldrb	r2, [r7, #4]
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff ff62 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	79fa      	ldrb	r2, [r7, #7]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	79ba      	ldrb	r2, [r7, #6]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	793a      	ldrb	r2, [r7, #4]
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff ff54 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	89bb      	ldrh	r3, [r7, #12]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	793a      	ldrb	r2, [r7, #4]
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff ff46 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 80015b4:	89bb      	ldrh	r3, [r7, #12]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4413      	add	r3, r2
 80015bc:	b2d8      	uxtb	r0, r3
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	79bb      	ldrb	r3, [r7, #6]
 80015c4:	4413      	add	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	793a      	ldrb	r2, [r7, #4]
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff ff38 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4413      	add	r3, r2
 80015d8:	b2d8      	uxtb	r0, r3
 80015da:	89bb      	ldrh	r3, [r7, #12]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	79ba      	ldrb	r2, [r7, #6]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	793a      	ldrb	r2, [r7, #4]
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff ff2a 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4413      	add	r3, r2
 80015f4:	b2d8      	uxtb	r0, r3
 80015f6:	89bb      	ldrh	r3, [r7, #12]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	79bb      	ldrb	r3, [r7, #6]
 80015fc:	4413      	add	r3, r2
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	793a      	ldrb	r2, [r7, #4]
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff ff1c 	bl	8001440 <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8001608:	89bb      	ldrh	r3, [r7, #12]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	b2d8      	uxtb	r0, r3
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	4413      	add	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	793a      	ldrb	r2, [r7, #4]
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff ff0e 	bl	8001440 <OLED_SetPixel>
    a++;
 8001624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001628:	b29b      	uxth	r3, r3
 800162a:	3301      	adds	r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	81fb      	strh	r3, [r7, #14]
    if (di < 0)
 8001630:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001634:	2b00      	cmp	r3, #0
 8001636:	da09      	bge.n	800164c <OLED_DrawCircle+0x15c>
    {
      di += 4 * a + 6;
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	b29a      	uxth	r2, r3
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	4413      	add	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	3306      	adds	r3, #6
 8001646:	b29b      	uxth	r3, r3
 8001648:	817b      	strh	r3, [r7, #10]
 800164a:	e013      	b.n	8001674 <OLED_DrawCircle+0x184>
    }
    else
    {
      di += 10 + 4 * (a - b);
 800164c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	b29a      	uxth	r2, r3
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	330a      	adds	r3, #10
 8001664:	b29b      	uxth	r3, r3
 8001666:	817b      	strh	r3, [r7, #10]
      b--;
 8001668:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800166c:	b29b      	uxth	r3, r3
 800166e:	3b01      	subs	r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4413      	add	r3, r2
 800167c:	b2d8      	uxtb	r0, r3
 800167e:	89bb      	ldrh	r3, [r7, #12]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	79bb      	ldrb	r3, [r7, #6]
 8001684:	4413      	add	r3, r2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	793a      	ldrb	r2, [r7, #4]
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fed8 	bl	8001440 <OLED_SetPixel>
  while (a <= b)
 8001690:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001694:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	f77f af45 	ble.w	8001528 <OLED_DrawCircle+0x38>
  }
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}

080016a8 <OLED_DrawFilledCircle>:
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawFilledCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4604      	mov	r4, r0
 80016b0:	4608      	mov	r0, r1
 80016b2:	4611      	mov	r1, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4623      	mov	r3, r4
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	4603      	mov	r3, r0
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	460b      	mov	r3, r1
 80016c0:	717b      	strb	r3, [r7, #5]
 80016c2:	4613      	mov	r3, r2
 80016c4:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 80016c6:	2300      	movs	r3, #0
 80016c8:	82fb      	strh	r3, [r7, #22]
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	82bb      	strh	r3, [r7, #20]
 80016ce:	797b      	ldrb	r3, [r7, #5]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f1c3 0303 	rsb	r3, r3, #3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	827b      	strh	r3, [r7, #18]
  while (a <= b)
 80016de:	e07d      	b.n	80017dc <OLED_DrawFilledCircle+0x134>
  {
    for (int16_t i = x - b; i <= x + b; i++)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	8abb      	ldrh	r3, [r7, #20]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	823b      	strh	r3, [r7, #16]
 80016ec:	e01b      	b.n	8001726 <OLED_DrawFilledCircle+0x7e>
    {
      OLED_SetPixel(i, y + a, color);
 80016ee:	8a3b      	ldrh	r3, [r7, #16]
 80016f0:	b2d8      	uxtb	r0, r3
 80016f2:	8afb      	ldrh	r3, [r7, #22]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	4413      	add	r3, r2
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	793a      	ldrb	r2, [r7, #4]
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fe9e 	bl	8001440 <OLED_SetPixel>
      OLED_SetPixel(i, y - a, color);
 8001704:	8a3b      	ldrh	r3, [r7, #16]
 8001706:	b2d8      	uxtb	r0, r3
 8001708:	8afb      	ldrh	r3, [r7, #22]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	79ba      	ldrb	r2, [r7, #6]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	793a      	ldrb	r2, [r7, #4]
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fe93 	bl	8001440 <OLED_SetPixel>
    for (int16_t i = x - b; i <= x + b; i++)
 800171a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800171e:	b29b      	uxth	r3, r3
 8001720:	3301      	adds	r3, #1
 8001722:	b29b      	uxth	r3, r3
 8001724:	823b      	strh	r3, [r7, #16]
 8001726:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800172a:	79f9      	ldrb	r1, [r7, #7]
 800172c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001730:	440b      	add	r3, r1
 8001732:	429a      	cmp	r2, r3
 8001734:	dddb      	ble.n	80016ee <OLED_DrawFilledCircle+0x46>
    }
    for (int16_t i = x - a; i <= x + a; i++)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	b29a      	uxth	r2, r3
 800173a:	8afb      	ldrh	r3, [r7, #22]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	b29b      	uxth	r3, r3
 8001740:	81fb      	strh	r3, [r7, #14]
 8001742:	e01b      	b.n	800177c <OLED_DrawFilledCircle+0xd4>
    {
      OLED_SetPixel(i, y + b, color);
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	b2d8      	uxtb	r0, r3
 8001748:	8abb      	ldrh	r3, [r7, #20]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	4413      	add	r3, r2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	793a      	ldrb	r2, [r7, #4]
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fe73 	bl	8001440 <OLED_SetPixel>
      OLED_SetPixel(i, y - b, color);
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	b2d8      	uxtb	r0, r3
 800175e:	8abb      	ldrh	r3, [r7, #20]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	79ba      	ldrb	r2, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	793a      	ldrb	r2, [r7, #4]
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff fe68 	bl	8001440 <OLED_SetPixel>
    for (int16_t i = x - a; i <= x + a; i++)
 8001770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001774:	b29b      	uxth	r3, r3
 8001776:	3301      	adds	r3, #1
 8001778:	b29b      	uxth	r3, r3
 800177a:	81fb      	strh	r3, [r7, #14]
 800177c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001780:	79f9      	ldrb	r1, [r7, #7]
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	440b      	add	r3, r1
 8001788:	429a      	cmp	r2, r3
 800178a:	dddb      	ble.n	8001744 <OLED_DrawFilledCircle+0x9c>
    }
    a++;
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	b29b      	uxth	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	82fb      	strh	r3, [r7, #22]
    if (di < 0)
 8001798:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da09      	bge.n	80017b4 <OLED_DrawFilledCircle+0x10c>
    {
      di += 4 * a + 6;
 80017a0:	8afb      	ldrh	r3, [r7, #22]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3306      	adds	r3, #6
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	827b      	strh	r3, [r7, #18]
 80017b2:	e013      	b.n	80017dc <OLED_DrawFilledCircle+0x134>
    }
    else
    {
      di += 10 + 4 * (a - b);
 80017b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	8a7b      	ldrh	r3, [r7, #18]
 80017c6:	4413      	add	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	330a      	adds	r3, #10
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	827b      	strh	r3, [r7, #18]
      b--;
 80017d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	82bb      	strh	r3, [r7, #20]
  while (a <= b)
 80017dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f77f af7b 	ble.w	80016e0 <OLED_DrawFilledCircle+0x38>
    }
  }
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd90      	pop	{r4, r7, pc}

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_MspInit+0x5c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a14      	ldr	r2, [pc, #80]	; (8001850 <HAL_MspInit+0x5c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_MspInit+0x5c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_MspInit+0x5c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_MspInit+0x60>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_MspInit+0x60>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189e:	f000 f9b5 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <DMA1_Channel1_IRQHandler+0x10>)
 80018ae:	f000 ffaf 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000220 	.word	0x20000220

080018bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return 1;
 80018c0:	2301      	movs	r3, #1
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <_kill>:

int _kill(int pid, int sig)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018d4:	f003 feb6 	bl	8005644 <__errno>
 80018d8:	4603      	mov	r3, r0
 80018da:	2216      	movs	r2, #22
 80018dc:	601a      	str	r2, [r3, #0]
  return -1;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_exit>:

void _exit (int status)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018f2:	f04f 31ff 	mov.w	r1, #4294967295
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffe7 	bl	80018ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80018fc:	e7fe      	b.n	80018fc <_exit+0x12>

080018fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	60f8      	str	r0, [r7, #12]
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e00a      	b.n	8001926 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001910:	f3af 8000 	nop.w
 8001914:	4601      	mov	r1, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	60ba      	str	r2, [r7, #8]
 800191c:	b2ca      	uxtb	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	dbf0      	blt.n	8001910 <_read+0x12>
  }

  return len;
 800192e:	687b      	ldr	r3, [r7, #4]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e009      	b.n	800195e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbf1      	blt.n	800194a <_write+0x12>
  }
  return len;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_close>:

int _close(int file)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr

08001986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001996:	605a      	str	r2, [r3, #4]
  return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <_isatty>:

int _isatty(int file)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ac:	2301      	movs	r3, #1
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f003 fe20 	bl	8005644 <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20010000 	.word	0x20010000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	20000744 	.word	0x20000744
 8001a38:	200008e0 	.word	0x200008e0

08001a3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr

08001a48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_USART1_UART_Init+0x50>)
 8001a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a6e:	220c      	movs	r2, #12
 8001a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_USART1_UART_Init+0x4c>)
 8001a80:	f002 fc3e 	bl	8004300 <HAL_UART_Init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a8a:	f7ff fc10 	bl	80012ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000748 	.word	0x20000748
 8001a98:	40013800 	.word	0x40013800

08001a9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_UART_MspInit+0x8c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d131      	bne.n	8001b20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_UART_MspInit+0x90>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	480b      	ldr	r0, [pc, #44]	; (8001b30 <HAL_UART_MspInit+0x94>)
 8001b02:	f001 f8ef 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_UART_MspInit+0x94>)
 8001b1c:	f001 f8e2 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800

08001b34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b34:	f7ff ff82 	bl	8001a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b3a:	490c      	ldr	r1, [pc, #48]	; (8001b6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a09      	ldr	r2, [pc, #36]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b50:	4c09      	ldr	r4, [pc, #36]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f003 fd77 	bl	8005650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b62:	f7ff fa29 	bl	8000fb8 <main>
  bx lr
 8001b66:	4770      	bx	lr
  ldr r0, =_sdata
 8001b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b70:	08009268 	.word	0x08009268
  ldr r2, =_sbss
 8001b74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b78:	200008e0 	.word	0x200008e0

08001b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>
	...

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_Init+0x28>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_Init+0x28>)
 8001b8a:	f043 0310 	orr.w	r3, r3, #16
 8001b8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 fd25 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fe2a 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fd3d 	bl	800264a <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 fd05 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_IncTick+0x1c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_IncTick+0x20>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_IncTick+0x20>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	20000790 	.word	0x20000790

08001c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_GetTick+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	20000790 	.word	0x20000790

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffe0 	bl	8001c30 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0ce      	b.n	8001e4c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f83e 	bl	8000d4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fb11 	bl	80022f8 <ADC_ConversionStop_Disable>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 80a9 	bne.w	8001e3a <HAL_ADC_Init+0x1ae>
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 80a5 	bne.w	8001e3a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf8:	f023 0302 	bic.w	r3, r3, #2
 8001cfc:	f043 0202 	orr.w	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4951      	ldr	r1, [pc, #324]	; (8001e54 <HAL_ADC_Init+0x1c8>)
 8001d0e:	428b      	cmp	r3, r1
 8001d10:	d10a      	bne.n	8001d28 <HAL_ADC_Init+0x9c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_Init+0x96>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	e004      	b.n	8001d2c <HAL_ADC_Init+0xa0>
 8001d22:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d26:	e001      	b.n	8001d2c <HAL_ADC_Init+0xa0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7b1b      	ldrb	r3, [r3, #12]
 8001d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d44:	d003      	beq.n	8001d4e <HAL_ADC_Init+0xc2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_ADC_Init+0xc8>
 8001d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_Init+0xca>
 8001d54:	2300      	movs	r3, #0
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7d1b      	ldrb	r3, [r3, #20]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d119      	bne.n	8001d98 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7b1b      	ldrb	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	035a      	lsls	r2, r3, #13
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	e00b      	b.n	8001d98 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_ADC_Init+0x1cc>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_Init+0x146>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d104      	bne.n	8001ddc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051b      	lsls	r3, r3, #20
 8001dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_ADC_Init+0x1d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10b      	bne.n	8001e18 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e16:	e018      	b.n	8001e4a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f023 0312 	bic.w	r3, r3, #18
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e38:	e007      	b.n	8001e4a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	f043 0210 	orr.w	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40013c00 	.word	0x40013c00
 8001e58:	ffe1f7fd 	.word	0xffe1f7fd
 8001e5c:	ff1f0efe 	.word	0xff1f0efe

08001e60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a64      	ldr	r2, [pc, #400]	; (8002008 <HAL_ADC_Start_DMA+0x1a8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d004      	beq.n	8001e84 <HAL_ADC_Start_DMA+0x24>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a63      	ldr	r2, [pc, #396]	; (800200c <HAL_ADC_Start_DMA+0x1ac>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d106      	bne.n	8001e92 <HAL_ADC_Start_DMA+0x32>
 8001e84:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_ADC_Start_DMA+0x1a8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 80b3 	bne.w	8001ff8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_Start_DMA+0x40>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0ae      	b.n	8001ffe <HAL_ADC_Start_DMA+0x19e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f9cb 	bl	8002244 <ADC_Enable>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 809a 	bne.w	8001fee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a4e      	ldr	r2, [pc, #312]	; (800200c <HAL_ADC_Start_DMA+0x1ac>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d105      	bne.n	8001ee4 <HAL_ADC_Start_DMA+0x84>
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_ADC_Start_DMA+0x1a8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d115      	bne.n	8001f10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d026      	beq.n	8001f4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f0e:	e01d      	b.n	8001f4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a39      	ldr	r2, [pc, #228]	; (8002008 <HAL_ADC_Start_DMA+0x1a8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_Start_DMA+0xd0>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_ADC_Start_DMA+0x1ac>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10d      	bne.n	8001f4c <HAL_ADC_Start_DMA+0xec>
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_ADC_Start_DMA+0x1a8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d006      	beq.n	8001f66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	f023 0206 	bic.w	r2, r3, #6
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f64:	e002      	b.n	8001f6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_ADC_Start_DMA+0x1b0>)
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_ADC_Start_DMA+0x1b4>)
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <HAL_ADC_Start_DMA+0x1b8>)
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0202 	mvn.w	r2, #2
 8001f94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6a18      	ldr	r0, [r3, #32]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	334c      	adds	r3, #76	; 0x4c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f000 fbcb 	bl	8002750 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fc4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fc8:	d108      	bne.n	8001fdc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001fd8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fda:	e00f      	b.n	8001ffc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001fec:	e006      	b.n	8001ffc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ff6:	e001      	b.n	8001ffc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40012400 	.word	0x40012400
 800200c:	40012800 	.word	0x40012800
 8002010:	0800237b 	.word	0x0800237b
 8002014:	080023f7 	.word	0x080023f7
 8002018:	08002413 	.word	0x08002413

0800201c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
	...

08002054 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x20>
 8002070:	2302      	movs	r3, #2
 8002072:	e0dc      	b.n	800222e <HAL_ADC_ConfigChannel+0x1da>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d81c      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b05      	subs	r3, #5
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4019      	ands	r1, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b05      	subs	r3, #5
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
 80020bc:	e03c      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d81c      	bhi.n	8002100 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b23      	subs	r3, #35	; 0x23
 80020d8:	221f      	movs	r2, #31
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	4019      	ands	r1, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b23      	subs	r3, #35	; 0x23
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
 80020fe:	e01b      	b.n	8002138 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b41      	subs	r3, #65	; 0x41
 8002112:	221f      	movs	r2, #31
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	4019      	ands	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b41      	subs	r3, #65	; 0x41
 800212c:	fa00 f203 	lsl.w	r2, r0, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b09      	cmp	r3, #9
 800213e:	d91c      	bls.n	800217a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68d9      	ldr	r1, [r3, #12]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	4413      	add	r3, r2
 8002150:	3b1e      	subs	r3, #30
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	4019      	ands	r1, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	6898      	ldr	r0, [r3, #8]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	3b1e      	subs	r3, #30
 800216c:	fa00 f203 	lsl.w	r2, r0, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e019      	b.n	80021ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6919      	ldr	r1, [r3, #16]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	2207      	movs	r2, #7
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	4019      	ands	r1, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6898      	ldr	r0, [r3, #8]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d003      	beq.n	80021be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ba:	2b11      	cmp	r3, #17
 80021bc:	d132      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_ADC_ConfigChannel+0x1e4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d125      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d126      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d11a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_ADC_ConfigChannel+0x1e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_ADC_ConfigChannel+0x1ec>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	0c9a      	lsrs	r2, r3, #18
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1b2>
 8002212:	e007      	b.n	8002224 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f043 0220 	orr.w	r2, r3, #32
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40012400 	.word	0x40012400
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83

08002244 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d040      	beq.n	80022e4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0201 	orr.w	r2, r2, #1
 8002270:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <ADC_Enable+0xac>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <ADC_Enable+0xb0>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002280:	e002      	b.n	8002288 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228e:	f7ff fccf 	bl	8001c30 <HAL_GetTick>
 8002292:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002294:	e01f      	b.n	80022d6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002296:	f7ff fccb 	bl	8001c30 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d918      	bls.n	80022d6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d011      	beq.n	80022d6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	f043 0210 	orr.w	r2, r3, #16
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e007      	b.n	80022e6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d1d8      	bne.n	8002296 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000
 80022f4:	431bde83 	.word	0x431bde83

080022f8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b01      	cmp	r3, #1
 8002310:	d12e      	bne.n	8002370 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002322:	f7ff fc85 	bl	8001c30 <HAL_GetTick>
 8002326:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002328:	e01b      	b.n	8002362 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232a:	f7ff fc81 	bl	8001c30 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d914      	bls.n	8002362 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10d      	bne.n	8002362 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e007      	b.n	8002372 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d0dc      	beq.n	800232a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002390:	2b00      	cmp	r3, #0
 8002392:	d127      	bne.n	80023e4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023ae:	d115      	bne.n	80023dc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d111      	bne.n	80023dc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d105      	bne.n	80023dc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fe1d 	bl	800201c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023e2:	e004      	b.n	80023ee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f7ff fe12 	bl	800202e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	f043 0204 	orr.w	r2, r3, #4
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f7ff fe01 	bl	8002040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	; (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 0307 	and.w	r3, r3, #7
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	db0b      	blt.n	80024d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4906      	ldr	r1, [pc, #24]	; (80024e0 <__NVIC_EnableIRQ+0x34>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2001      	movs	r0, #1
 80024ce:	fa00 f202 	lsl.w	r2, r0, r2
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff90 	bl	80024e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff2d 	bl	8002448 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002608:	f7ff ff42 	bl	8002490 <__NVIC_GetPriorityGrouping>
 800260c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7ff ff90 	bl	8002538 <NVIC_EncodePriority>
 8002618:	4602      	mov	r2, r0
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff ff5f 	bl	80024e4 <__NVIC_SetPriority>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff35 	bl	80024ac <__NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ffa2 	bl	800259c <SysTick_Config>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e059      	b.n	800272e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_DMA_Init+0xd4>)
 8002682:	429a      	cmp	r2, r3
 8002684:	d80f      	bhi.n	80026a6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_DMA_Init+0xd8>)
 800268e:	4413      	add	r3, r2
 8002690:	4a2b      	ldr	r2, [pc, #172]	; (8002740 <HAL_DMA_Init+0xdc>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a28      	ldr	r2, [pc, #160]	; (8002744 <HAL_DMA_Init+0xe0>)
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026a4:	e00e      	b.n	80026c4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b26      	ldr	r3, [pc, #152]	; (8002748 <HAL_DMA_Init+0xe4>)
 80026ae:	4413      	add	r3, r2
 80026b0:	4a23      	ldr	r2, [pc, #140]	; (8002740 <HAL_DMA_Init+0xdc>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	009a      	lsls	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <HAL_DMA_Init+0xe8>)
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40020407 	.word	0x40020407
 800273c:	bffdfff8 	.word	0xbffdfff8
 8002740:	cccccccd 	.word	0xcccccccd
 8002744:	40020000 	.word	0x40020000
 8002748:	bffdfbf8 	.word	0xbffdfbf8
 800274c:	40020400 	.word	0x40020400

08002750 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_DMA_Start_IT+0x20>
 800276c:	2302      	movs	r3, #2
 800276e:	e04b      	b.n	8002808 <HAL_DMA_Start_IT+0xb8>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13a      	bne.n	80027fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68b9      	ldr	r1, [r7, #8]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fa6d 	bl	8002c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 020e 	orr.w	r2, r2, #14
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	e00f      	b.n	80027e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0204 	bic.w	r2, r2, #4
 80027d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 020a 	orr.w	r2, r2, #10
 80027e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e005      	b.n	8002806 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002802:	2302      	movs	r3, #2
 8002804:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2204      	movs	r2, #4
 800282e:	409a      	lsls	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80f1 	beq.w	8002a1c <HAL_DMA_IRQHandler+0x20c>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80eb 	beq.w	8002a1c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0204 	bic.w	r2, r2, #4
 8002862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_DMA_IRQHandler+0x1d8>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d958      	bls.n	8002922 <HAL_DMA_IRQHandler+0x112>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_DMA_IRQHandler+0x1dc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d04f      	beq.n	800291a <HAL_DMA_IRQHandler+0x10a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5c      	ldr	r2, [pc, #368]	; (80029f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d048      	beq.n	8002916 <HAL_DMA_IRQHandler+0x106>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_DMA_IRQHandler+0x1e4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d040      	beq.n	8002910 <HAL_DMA_IRQHandler+0x100>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d038      	beq.n	800290a <HAL_DMA_IRQHandler+0xfa>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_DMA_IRQHandler+0x1ec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d030      	beq.n	8002904 <HAL_DMA_IRQHandler+0xf4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_DMA_IRQHandler+0x1f0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d028      	beq.n	80028fe <HAL_DMA_IRQHandler+0xee>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4d      	ldr	r2, [pc, #308]	; (80029e8 <HAL_DMA_IRQHandler+0x1d8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d020      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xe8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_DMA_IRQHandler+0x1f4>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d019      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xe4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <HAL_DMA_IRQHandler+0x1f8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d012      	beq.n	80028f0 <HAL_DMA_IRQHandler+0xe0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4f      	ldr	r2, [pc, #316]	; (8002a0c <HAL_DMA_IRQHandler+0x1fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00a      	beq.n	80028ea <HAL_DMA_IRQHandler+0xda>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <HAL_DMA_IRQHandler+0x200>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d102      	bne.n	80028e4 <HAL_DMA_IRQHandler+0xd4>
 80028de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028e2:	e01b      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028e8:	e018      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ee:	e015      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028f0:	2340      	movs	r3, #64	; 0x40
 80028f2:	e013      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028f4:	2304      	movs	r3, #4
 80028f6:	e011      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028fc:	e00e      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 80028fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002902:	e00b      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 8002904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002908:	e008      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 800290a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800290e:	e005      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 8002910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002914:	e002      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	e000      	b.n	800291c <HAL_DMA_IRQHandler+0x10c>
 800291a:	2304      	movs	r3, #4
 800291c:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <HAL_DMA_IRQHandler+0x204>)
 800291e:	6053      	str	r3, [r2, #4]
 8002920:	e057      	b.n	80029d2 <HAL_DMA_IRQHandler+0x1c2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_DMA_IRQHandler+0x1dc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d04f      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1bc>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2f      	ldr	r2, [pc, #188]	; (80029f0 <HAL_DMA_IRQHandler+0x1e0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d048      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x1b8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_DMA_IRQHandler+0x1e4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d040      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1b2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2c      	ldr	r2, [pc, #176]	; (80029f8 <HAL_DMA_IRQHandler+0x1e8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d038      	beq.n	80029bc <HAL_DMA_IRQHandler+0x1ac>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_DMA_IRQHandler+0x1ec>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d030      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x1a6>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_DMA_IRQHandler+0x1f0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d028      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x1a0>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <HAL_DMA_IRQHandler+0x1d8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d020      	beq.n	80029aa <HAL_DMA_IRQHandler+0x19a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_DMA_IRQHandler+0x1f4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x196>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_DMA_IRQHandler+0x1f8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d012      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x192>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a22      	ldr	r2, [pc, #136]	; (8002a0c <HAL_DMA_IRQHandler+0x1fc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00a      	beq.n	800299c <HAL_DMA_IRQHandler+0x18c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_DMA_IRQHandler+0x200>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d102      	bne.n	8002996 <HAL_DMA_IRQHandler+0x186>
 8002990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002994:	e01b      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 8002996:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800299a:	e018      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 800299c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a0:	e015      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029a2:	2340      	movs	r3, #64	; 0x40
 80029a4:	e013      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e011      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ae:	e00e      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b4:	e00b      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029ba:	e008      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c0:	e005      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c6:	e002      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	e000      	b.n	80029ce <HAL_DMA_IRQHandler+0x1be>
 80029cc:	2304      	movs	r3, #4
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_DMA_IRQHandler+0x208>)
 80029d0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8136 	beq.w	8002c48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029e4:	e130      	b.n	8002c48 <HAL_DMA_IRQHandler+0x438>
 80029e6:	bf00      	nop
 80029e8:	40020080 	.word	0x40020080
 80029ec:	40020008 	.word	0x40020008
 80029f0:	4002001c 	.word	0x4002001c
 80029f4:	40020030 	.word	0x40020030
 80029f8:	40020044 	.word	0x40020044
 80029fc:	40020058 	.word	0x40020058
 8002a00:	4002006c 	.word	0x4002006c
 8002a04:	40020408 	.word	0x40020408
 8002a08:	4002041c 	.word	0x4002041c
 8002a0c:	40020430 	.word	0x40020430
 8002a10:	40020444 	.word	0x40020444
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2202      	movs	r2, #2
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80dd 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x3d8>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80d7 	beq.w	8002be8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0320 	and.w	r3, r3, #32
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 020a 	bic.w	r2, r2, #10
 8002a56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <HAL_DMA_IRQHandler+0x444>)
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d958      	bls.n	8002b1e <HAL_DMA_IRQHandler+0x30e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a79      	ldr	r2, [pc, #484]	; (8002c58 <HAL_DMA_IRQHandler+0x448>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d04f      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x306>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a78      	ldr	r2, [pc, #480]	; (8002c5c <HAL_DMA_IRQHandler+0x44c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d048      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x302>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a76      	ldr	r2, [pc, #472]	; (8002c60 <HAL_DMA_IRQHandler+0x450>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d040      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x2fc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_DMA_IRQHandler+0x454>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d038      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x2f6>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a73      	ldr	r2, [pc, #460]	; (8002c68 <HAL_DMA_IRQHandler+0x458>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d030      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x2f0>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <HAL_DMA_IRQHandler+0x45c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d028      	beq.n	8002afa <HAL_DMA_IRQHandler+0x2ea>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a69      	ldr	r2, [pc, #420]	; (8002c54 <HAL_DMA_IRQHandler+0x444>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d020      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x2e4>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <HAL_DMA_IRQHandler+0x460>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d019      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x2e0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <HAL_DMA_IRQHandler+0x464>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d012      	beq.n	8002aec <HAL_DMA_IRQHandler+0x2dc>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a6b      	ldr	r2, [pc, #428]	; (8002c78 <HAL_DMA_IRQHandler+0x468>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00a      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x2d6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a69      	ldr	r2, [pc, #420]	; (8002c7c <HAL_DMA_IRQHandler+0x46c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d102      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x2d0>
 8002ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ade:	e01b      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae4:	e018      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aea:	e015      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002aec:	2320      	movs	r3, #32
 8002aee:	e013      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e011      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af8:	e00e      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002afa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002afe:	e00b      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	e008      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b0a:	e005      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b10:	e002      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002b12:	2320      	movs	r3, #32
 8002b14:	e000      	b.n	8002b18 <HAL_DMA_IRQHandler+0x308>
 8002b16:	2302      	movs	r3, #2
 8002b18:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <HAL_DMA_IRQHandler+0x470>)
 8002b1a:	6053      	str	r3, [r2, #4]
 8002b1c:	e057      	b.n	8002bce <HAL_DMA_IRQHandler+0x3be>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a4d      	ldr	r2, [pc, #308]	; (8002c58 <HAL_DMA_IRQHandler+0x448>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d04f      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x3b8>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_DMA_IRQHandler+0x44c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d048      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x3b4>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_DMA_IRQHandler+0x450>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d040      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x3ae>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_DMA_IRQHandler+0x454>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d038      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x3a8>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a47      	ldr	r2, [pc, #284]	; (8002c68 <HAL_DMA_IRQHandler+0x458>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d030      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x3a2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a45      	ldr	r2, [pc, #276]	; (8002c6c <HAL_DMA_IRQHandler+0x45c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d028      	beq.n	8002bac <HAL_DMA_IRQHandler+0x39c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3d      	ldr	r2, [pc, #244]	; (8002c54 <HAL_DMA_IRQHandler+0x444>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d020      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x396>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a41      	ldr	r2, [pc, #260]	; (8002c70 <HAL_DMA_IRQHandler+0x460>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x392>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a40      	ldr	r2, [pc, #256]	; (8002c74 <HAL_DMA_IRQHandler+0x464>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d012      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x38e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3e      	ldr	r2, [pc, #248]	; (8002c78 <HAL_DMA_IRQHandler+0x468>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00a      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x388>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <HAL_DMA_IRQHandler+0x46c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d102      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x382>
 8002b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b90:	e01b      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002b92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b96:	e018      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9c:	e015      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e013      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e011      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002baa:	e00e      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bb0:	e00b      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb6:	e008      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bbc:	e005      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc2:	e002      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	e000      	b.n	8002bca <HAL_DMA_IRQHandler+0x3ba>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <HAL_DMA_IRQHandler+0x474>)
 8002bcc:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d034      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be6:	e02f      	b.n	8002c48 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d028      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x43a>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d023      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	4798      	blx	r3
    }
  }
  return;
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
}
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40020080 	.word	0x40020080
 8002c58:	40020008 	.word	0x40020008
 8002c5c:	4002001c 	.word	0x4002001c
 8002c60:	40020030 	.word	0x40020030
 8002c64:	40020044 	.word	0x40020044
 8002c68:	40020058 	.word	0x40020058
 8002c6c:	4002006c 	.word	0x4002006c
 8002c70:	40020408 	.word	0x40020408
 8002c74:	4002041c 	.word	0x4002041c
 8002c78:	40020430 	.word	0x40020430
 8002c7c:	40020444 	.word	0x40020444
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020000 	.word	0x40020000

08002c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b08b      	sub	sp, #44	; 0x2c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	e179      	b.n	8002fec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8168 	bne.w	8002fe6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a96      	ldr	r2, [pc, #600]	; (8002f74 <HAL_GPIO_Init+0x290>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d05e      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d20:	4a94      	ldr	r2, [pc, #592]	; (8002f74 <HAL_GPIO_Init+0x290>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d875      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d26:	4a94      	ldr	r2, [pc, #592]	; (8002f78 <HAL_GPIO_Init+0x294>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d058      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d2c:	4a92      	ldr	r2, [pc, #584]	; (8002f78 <HAL_GPIO_Init+0x294>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d86f      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d32:	4a92      	ldr	r2, [pc, #584]	; (8002f7c <HAL_GPIO_Init+0x298>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d052      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d38:	4a90      	ldr	r2, [pc, #576]	; (8002f7c <HAL_GPIO_Init+0x298>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d869      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d3e:	4a90      	ldr	r2, [pc, #576]	; (8002f80 <HAL_GPIO_Init+0x29c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04c      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d44:	4a8e      	ldr	r2, [pc, #568]	; (8002f80 <HAL_GPIO_Init+0x29c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d863      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d4a:	4a8e      	ldr	r2, [pc, #568]	; (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d046      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d50:	4a8c      	ldr	r2, [pc, #560]	; (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d85d      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d82a      	bhi.n	8002db0 <HAL_GPIO_Init+0xcc>
 8002d5a:	2b12      	cmp	r3, #18
 8002d5c:	d859      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d5e:	a201      	add	r2, pc, #4	; (adr r2, 8002d64 <HAL_GPIO_Init+0x80>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002ddf 	.word	0x08002ddf
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002dcb 	.word	0x08002dcb
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e13 	.word	0x08002e13
 8002d78:	08002e13 	.word	0x08002e13
 8002d7c:	08002e13 	.word	0x08002e13
 8002d80:	08002e13 	.word	0x08002e13
 8002d84:	08002e13 	.word	0x08002e13
 8002d88:	08002e13 	.word	0x08002e13
 8002d8c:	08002e13 	.word	0x08002e13
 8002d90:	08002e13 	.word	0x08002e13
 8002d94:	08002e13 	.word	0x08002e13
 8002d98:	08002e13 	.word	0x08002e13
 8002d9c:	08002e13 	.word	0x08002e13
 8002da0:	08002e13 	.word	0x08002e13
 8002da4:	08002e13 	.word	0x08002e13
 8002da8:	08002dc1 	.word	0x08002dc1
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	4a75      	ldr	r2, [pc, #468]	; (8002f88 <HAL_GPIO_Init+0x2a4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002db6:	e02c      	b.n	8002e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e029      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	623b      	str	r3, [r7, #32]
          break;
 8002dc8:	e024      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	623b      	str	r3, [r7, #32]
          break;
 8002dd2:	e01f      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	623b      	str	r3, [r7, #32]
          break;
 8002ddc:	e01a      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de6:	2304      	movs	r3, #4
 8002de8:	623b      	str	r3, [r7, #32]
          break;
 8002dea:	e013      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df4:	2308      	movs	r3, #8
 8002df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	611a      	str	r2, [r3, #16]
          break;
 8002dfe:	e009      	b.n	8002e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e00:	2308      	movs	r3, #8
 8002e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	615a      	str	r2, [r3, #20]
          break;
 8002e0a:	e003      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
          break;
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          break;
 8002e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2bff      	cmp	r3, #255	; 0xff
 8002e18:	d801      	bhi.n	8002e1e <HAL_GPIO_Init+0x13a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_Init+0x13e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2bff      	cmp	r3, #255	; 0xff
 8002e28:	d802      	bhi.n	8002e30 <HAL_GPIO_Init+0x14c>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x152>
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	3b08      	subs	r3, #8
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80c1 	beq.w	8002fe6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e64:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a48      	ldr	r2, [pc, #288]	; (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e7c:	4a44      	ldr	r2, [pc, #272]	; (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a3c      	ldr	r2, [pc, #240]	; (8002f94 <HAL_GPIO_Init+0x2b0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01f      	beq.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_GPIO_Init+0x2b4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d019      	beq.n	8002ee4 <HAL_GPIO_Init+0x200>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d013      	beq.n	8002ee0 <HAL_GPIO_Init+0x1fc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a39      	ldr	r2, [pc, #228]	; (8002fa0 <HAL_GPIO_Init+0x2bc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00d      	beq.n	8002edc <HAL_GPIO_Init+0x1f8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_GPIO_Init+0x2c0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <HAL_GPIO_Init+0x1f4>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a37      	ldr	r2, [pc, #220]	; (8002fa8 <HAL_GPIO_Init+0x2c4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d101      	bne.n	8002ed4 <HAL_GPIO_Init+0x1f0>
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	e00a      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002ed4:	2306      	movs	r3, #6
 8002ed6:	e008      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002edc:	2303      	movs	r3, #3
 8002ede:	e004      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e002      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <HAL_GPIO_Init+0x206>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	f002 0203 	and.w	r2, r2, #3
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	4093      	lsls	r3, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002efa:	4925      	ldr	r1, [pc, #148]	; (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f14:	4b25      	ldr	r3, [pc, #148]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	4924      	ldr	r1, [pc, #144]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	608b      	str	r3, [r1, #8]
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4920      	ldr	r1, [pc, #128]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	491a      	ldr	r1, [pc, #104]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60cb      	str	r3, [r1, #12]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d025      	beq.n	8002fb0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4910      	ldr	r1, [pc, #64]	; (8002fac <HAL_GPIO_Init+0x2c8>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	604b      	str	r3, [r1, #4]
 8002f70:	e025      	b.n	8002fbe <HAL_GPIO_Init+0x2da>
 8002f72:	bf00      	nop
 8002f74:	10320000 	.word	0x10320000
 8002f78:	10310000 	.word	0x10310000
 8002f7c:	10220000 	.word	0x10220000
 8002f80:	10210000 	.word	0x10210000
 8002f84:	10120000 	.word	0x10120000
 8002f88:	10110000 	.word	0x10110000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40010800 	.word	0x40010800
 8002f98:	40010c00 	.word	0x40010c00
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40011400 	.word	0x40011400
 8002fa4:	40011800 	.word	0x40011800
 8002fa8:	40011c00 	.word	0x40011c00
 8002fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	4913      	ldr	r1, [pc, #76]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
 8002fd6:	e006      	b.n	8002fe6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4909      	ldr	r1, [pc, #36]	; (8003008 <HAL_GPIO_Init+0x324>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	3301      	adds	r3, #1
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f47f ae7e 	bne.w	8002cf8 <HAL_GPIO_Init+0x14>
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	372c      	adds	r7, #44	; 0x2c
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40010400 	.word	0x40010400

0800300c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e001      	b.n	800302e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800302e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
	...

0800303c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e12b      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd ff68 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800308e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800309e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a0:	f001 f832 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80030a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a81      	ldr	r2, [pc, #516]	; (80032b0 <HAL_I2C_Init+0x274>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d807      	bhi.n	80030c0 <HAL_I2C_Init+0x84>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4a80      	ldr	r2, [pc, #512]	; (80032b4 <HAL_I2C_Init+0x278>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	bf94      	ite	ls
 80030b8:	2301      	movls	r3, #1
 80030ba:	2300      	movhi	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e006      	b.n	80030ce <HAL_I2C_Init+0x92>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a7d      	ldr	r2, [pc, #500]	; (80032b8 <HAL_I2C_Init+0x27c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf94      	ite	ls
 80030c8:	2301      	movls	r3, #1
 80030ca:	2300      	movhi	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e0e7      	b.n	80032a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a78      	ldr	r2, [pc, #480]	; (80032bc <HAL_I2C_Init+0x280>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9b      	lsrs	r3, r3, #18
 80030e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a6a      	ldr	r2, [pc, #424]	; (80032b0 <HAL_I2C_Init+0x274>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d802      	bhi.n	8003110 <HAL_I2C_Init+0xd4>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3301      	adds	r3, #1
 800310e:	e009      	b.n	8003124 <HAL_I2C_Init+0xe8>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	4a69      	ldr	r2, [pc, #420]	; (80032c0 <HAL_I2C_Init+0x284>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	3301      	adds	r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	495c      	ldr	r1, [pc, #368]	; (80032b0 <HAL_I2C_Init+0x274>)
 8003140:	428b      	cmp	r3, r1
 8003142:	d819      	bhi.n	8003178 <HAL_I2C_Init+0x13c>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e59      	subs	r1, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003152:	1c59      	adds	r1, r3, #1
 8003154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003158:	400b      	ands	r3, r1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_I2C_Init+0x138>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1e59      	subs	r1, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fbb1 f3f3 	udiv	r3, r1, r3
 800316c:	3301      	adds	r3, #1
 800316e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003172:	e051      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003174:	2304      	movs	r3, #4
 8003176:	e04f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d111      	bne.n	80031a4 <HAL_I2C_Init+0x168>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1e58      	subs	r0, r3, #1
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	440b      	add	r3, r1
 800318e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003192:	3301      	adds	r3, #1
 8003194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003198:	2b00      	cmp	r3, #0
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e012      	b.n	80031ca <HAL_I2C_Init+0x18e>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Init+0x196>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e022      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10e      	bne.n	80031f8 <HAL_I2C_Init+0x1bc>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e58      	subs	r0, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6859      	ldr	r1, [r3, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	440b      	add	r3, r1
 80031e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	e00f      	b.n	8003218 <HAL_I2C_Init+0x1dc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e58      	subs	r0, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	0099      	lsls	r1, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	6809      	ldr	r1, [r1, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6911      	ldr	r1, [r2, #16]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	4311      	orrs	r1, r2
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	430b      	orrs	r3, r1
 800325a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	000186a0 	.word	0x000186a0
 80032b4:	001e847f 	.word	0x001e847f
 80032b8:	003d08ff 	.word	0x003d08ff
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	10624dd3 	.word	0x10624dd3

080032c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	461a      	mov	r2, r3
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
 80032d4:	4613      	mov	r3, r2
 80032d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7fe fcaa 	bl	8001c30 <HAL_GetTick>
 80032dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	f040 80e0 	bne.w	80034ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	2319      	movs	r3, #25
 80032f2:	2201      	movs	r2, #1
 80032f4:	4970      	ldr	r1, [pc, #448]	; (80034b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f964 	bl	80035c4 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	e0d3      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_I2C_Master_Transmit+0x50>
 8003310:	2302      	movs	r3, #2
 8003312:	e0cc      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d007      	beq.n	800333a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2221      	movs	r2, #33	; 0x21
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2210      	movs	r2, #16
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	893a      	ldrh	r2, [r7, #8]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a50      	ldr	r2, [pc, #320]	; (80034bc <HAL_I2C_Master_Transmit+0x1f8>)
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6a3a      	ldr	r2, [r7, #32]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f89c 	bl	80034c0 <I2C_MasterRequestWrite>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e08d      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033a8:	e066      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa22 	bl	80037f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d107      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06b      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	781a      	ldrb	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11b      	bne.n	800344c <HAL_I2C_Master_Transmit+0x188>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6a39      	ldr	r1, [r7, #32]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fa19 	bl	8003888 <I2C_WaitOnBTFFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00d      	beq.n	8003478 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003472:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e01a      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d194      	bne.n	80033aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	00100002 	.word	0x00100002
 80034bc:	ffff0000 	.word	0xffff0000

080034c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d006      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d003      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e8:	d108      	bne.n	80034fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e00b      	b.n	8003514 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	2b12      	cmp	r3, #18
 8003502:	d107      	bne.n	8003514 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f84f 	bl	80035c4 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d103      	bne.n	8003544 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e035      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e01b      	b.n	800359c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	11db      	asrs	r3, r3, #7
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f063 030f 	orn	r3, r3, #15
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	490e      	ldr	r1, [pc, #56]	; (80035bc <I2C_MasterRequestWrite+0xfc>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f898 	bl	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e010      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <I2C_MasterRequestWrite+0x100>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f888 	bl	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010008 	.word	0x00010008
 80035c0:	00010002 	.word	0x00010002

080035c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d4:	e048      	b.n	8003668 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d044      	beq.n	8003668 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fe fb27 	bl	8001c30 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d139      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10d      	bne.n	800361a <I2C_WaitOnFlagUntilTimeout+0x56>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	e00c      	b.n	8003634 <I2C_WaitOnFlagUntilTimeout+0x70>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	429a      	cmp	r2, r3
 8003638:	d116      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e023      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10d      	bne.n	800368e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	43da      	mvns	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	e00c      	b.n	80036a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	43da      	mvns	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4013      	ands	r3, r2
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d093      	beq.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c6:	e071      	b.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d123      	bne.n	8003720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e067      	b.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d041      	beq.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003728:	f7fe fa82 	bl	8001c30 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	429a      	cmp	r2, r3
 8003736:	d302      	bcc.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d136      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10c      	bne.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	43da      	mvns	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf14      	ite	ne
 800375a:	2301      	movne	r3, #1
 800375c:	2300      	moveq	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e00b      	b.n	800377a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	43da      	mvns	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	4013      	ands	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e021      	b.n	80037f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10c      	bne.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	43da      	mvns	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e00b      	b.n	80037e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	43da      	mvns	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4013      	ands	r3, r2
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bf14      	ite	ne
 80037e2:	2301      	movne	r3, #1
 80037e4:	2300      	moveq	r3, #0
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f af6d 	bne.w	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003804:	e034      	b.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f886 	bl	8003918 <I2C_IsAcknowledgeFailed>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e034      	b.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d028      	beq.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fe fa07 	bl	8001c30 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11d      	bne.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d016      	beq.n	8003870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0220 	orr.w	r2, r3, #32
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d1c3      	bne.n	8003806 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003894:	e034      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f83e 	bl	8003918 <I2C_IsAcknowledgeFailed>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e034      	b.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d028      	beq.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7fe f9bf 	bl	8001c30 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11d      	bne.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d016      	beq.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e007      	b.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b04      	cmp	r3, #4
 800390c:	d1c3      	bne.n	8003896 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d11b      	bne.n	8003968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e272      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8087 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00c      	beq.n	80039ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a0:	4b8f      	ldr	r3, [pc, #572]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d112      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d168      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e24c      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x76>
 80039dc:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7f      	ldr	r2, [pc, #508]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e02e      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b78      	ldr	r3, [pc, #480]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a77      	ldr	r2, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e01d      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0xbc>
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a30:	4b6b      	ldr	r3, [pc, #428]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe f8ee 	bl	8001c30 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe f8ea 	bl	8001c30 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e200      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe4>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe f8da 	bl	8001c30 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe f8d6 	bl	8001c30 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1ec      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x10c>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d063      	beq.n	8003b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d11c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1c0      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	e03a      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe f88f 	bl	8001c30 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe f88b 	bl	8001c30 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1a1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe f86e 	bl	8001c30 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fe f86a 	bl	8001c30 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e180      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03a      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fe f84e 	bl	8001c30 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fe f84a 	bl	8001c30 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e160      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f000 face 	bl	8004158 <RCC_Delay>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe f834 	bl	8001c30 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe f830 	bl	8001c30 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d908      	bls.n	8003bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e146      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	42420000 	.word	0x42420000
 8003be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e9      	bne.n	8003bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a6 	beq.w	8003d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	61d3      	str	r3, [r2, #28]
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7e      	ldr	r2, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fd fff1 	bl	8001c30 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fd ffed 	bl	8001c30 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b64      	cmp	r3, #100	; 0x64
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e103      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x312>
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e02d      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a69      	ldr	r2, [pc, #420]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	e01c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d10c      	bne.n	8003cca <HAL_RCC_OscConfig+0x356>
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4a60      	ldr	r2, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	6213      	str	r3, [r2, #32]
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	e00b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003cca:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fd ffa1 	bl	8001c30 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fd ff9d 	bl	8001c30 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0b1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x37e>
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fd ff8b 	bl	8001c30 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fd ff87 	bl	8001c30 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e09b      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8087 	beq.w	8003e6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5c:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d061      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d146      	bne.n	8003dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd ff5b 	bl	8001c30 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd ff57 	bl	8001c30 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e06d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d90:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4921      	ldr	r1, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a19      	ldr	r1, [r3, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	491b      	ldr	r1, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd ff2b 	bl	8001c30 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd ff27 	bl	8001c30 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x46a>
 8003dfc:	e035      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd ff14 	bl	8001c30 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd ff10 	bl	8001c30 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e026      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x498>
 8003e2a:	e01e      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e019      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x500>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0d0      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d910      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b67      	ldr	r3, [pc, #412]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4965      	ldr	r1, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ede:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ef6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d040      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d115      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e073      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e06b      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4936      	ldr	r1, [pc, #216]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fd fe62 	bl	8001c30 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fd fe5e 	bl	8001c30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e053      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d210      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4922      	ldr	r1, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1cc>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1d0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fdc0 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
 8004040:	08008e0c 	.word	0x08008e0c
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004066:	4b1e      	ldr	r3, [pc, #120]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b04      	cmp	r3, #4
 8004074:	d002      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x30>
 8004076:	2b08      	cmp	r3, #8
 8004078:	d003      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x36>
 800407a:	e027      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800407c:	4b19      	ldr	r3, [pc, #100]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800407e:	613b      	str	r3, [r7, #16]
      break;
 8004080:	e027      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0c9b      	lsrs	r3, r3, #18
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800408c:	5cd3      	ldrb	r3, [r2, r3]
 800408e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d010      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	0c5b      	lsrs	r3, r3, #17
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80040a6:	5cd3      	ldrb	r3, [r2, r3]
 80040a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a0d      	ldr	r2, [pc, #52]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ae:	fb03 f202 	mul.w	r2, r3, r2
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e004      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040c0:	fb02 f303 	mul.w	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	613b      	str	r3, [r7, #16]
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	613b      	str	r3, [r7, #16]
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	693b      	ldr	r3, [r7, #16]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000
 80040e4:	007a1200 	.word	0x007a1200
 80040e8:	08008e24 	.word	0x08008e24
 80040ec:	08008e34 	.word	0x08008e34
 80040f0:	003d0900 	.word	0x003d0900

080040f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f8:	4b02      	ldr	r3, [pc, #8]	; (8004104 <HAL_RCC_GetHCLKFreq+0x10>)
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	bc80      	pop	{r7}
 8004102:	4770      	bx	lr
 8004104:	20000000 	.word	0x20000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800410c:	f7ff fff2 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	08008e1c 	.word	0x08008e1c

08004130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004134:	f7ff ffde 	bl	80040f4 <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	0adb      	lsrs	r3, r3, #11
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4903      	ldr	r1, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	08008e1c 	.word	0x08008e1c

08004158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <RCC_Delay+0x34>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <RCC_Delay+0x38>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0a5b      	lsrs	r3, r3, #9
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	fb02 f303 	mul.w	r3, r2, r3
 8004172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004174:	bf00      	nop
  }
  while (Delay --);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1e5a      	subs	r2, r3, #1
 800417a:	60fa      	str	r2, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f9      	bne.n	8004174 <RCC_Delay+0x1c>
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	20000000 	.word	0x20000000
 8004190:	10624dd3 	.word	0x10624dd3

08004194 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d07d      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b4:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ca:	61d3      	str	r3, [r2, #28]
 80041cc:	4b49      	ldr	r3, [pc, #292]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041dc:	4b46      	ldr	r3, [pc, #280]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d118      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041e8:	4b43      	ldr	r3, [pc, #268]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a42      	ldr	r2, [pc, #264]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f4:	f7fd fd1c 	bl	8001c30 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	e008      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fc:	f7fd fd18 	bl	8001c30 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e06d      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b3a      	ldr	r3, [pc, #232]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02e      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	429a      	cmp	r2, r3
 8004236:	d027      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004238:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004242:	4b2e      	ldr	r3, [pc, #184]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004248:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800424e:	4a29      	ldr	r2, [pc, #164]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d014      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd fce7 	bl	8001c30 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fd fce3 	bl	8001c30 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e036      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4917      	ldr	r1, [pc, #92]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004296:	4313      	orrs	r3, r2
 8004298:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	490b      	ldr	r1, [pc, #44]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4904      	ldr	r1, [pc, #16]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40007000 	.word	0x40007000
 80042fc:	42420440 	.word	0x42420440

08004300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e042      	b.n	8004398 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fbb8 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f91d 	bl	8004584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af02      	add	r7, sp, #8
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d16d      	bne.n	800449c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Transmit+0x2c>
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e066      	b.n	800449e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2221      	movs	r2, #33	; 0x21
 80043da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043de:	f7fd fc27 	bl	8001c30 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f8:	d108      	bne.n	800440c <HAL_UART_Transmit+0x6c>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	e003      	b.n	8004414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004414:	e02a      	b.n	800446c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2200      	movs	r2, #0
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f840 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e036      	b.n	800449e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004444:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	3302      	adds	r3, #2
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	e007      	b.n	800445e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	3301      	adds	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1cf      	bne.n	8004416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f810 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b090      	sub	sp, #64	; 0x40
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	e050      	b.n	800455a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d04c      	beq.n	800455a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044c6:	f7fd fbb3 	bl	8001c30 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d241      	bcs.n	800455a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044f6:	637a      	str	r2, [r7, #52]	; 0x34
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	613b      	str	r3, [r7, #16]
   return(result);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800452a:	623a      	str	r2, [r7, #32]
 800452c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	69f9      	ldr	r1, [r7, #28]
 8004530:	6a3a      	ldr	r2, [r7, #32]
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	61bb      	str	r3, [r7, #24]
   return(result);
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e5      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e00f      	b.n	800457a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4013      	ands	r3, r2
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	bf0c      	ite	eq
 800456a:	2301      	moveq	r3, #1
 800456c:	2300      	movne	r3, #0
 800456e:	b2db      	uxtb	r3, r3
 8004570:	461a      	mov	r2, r3
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	429a      	cmp	r2, r3
 8004576:	d09f      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3740      	adds	r7, #64	; 0x40
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045be:	f023 030c 	bic.w	r3, r3, #12
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2c      	ldr	r2, [pc, #176]	; (8004698 <UART_SetConfig+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d103      	bne.n	80045f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045ec:	f7ff fda0 	bl	8004130 <HAL_RCC_GetPCLK2Freq>
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	e002      	b.n	80045fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045f4:	f7ff fd88 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80045f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009a      	lsls	r2, r3, #2
 8004604:	441a      	add	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004610:	4a22      	ldr	r2, [pc, #136]	; (800469c <UART_SetConfig+0x118>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	0119      	lsls	r1, r3, #4
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009a      	lsls	r2, r3, #2
 8004624:	441a      	add	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004630:	4b1a      	ldr	r3, [pc, #104]	; (800469c <UART_SetConfig+0x118>)
 8004632:	fba3 0302 	umull	r0, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2064      	movs	r0, #100	; 0x64
 800463a:	fb00 f303 	mul.w	r3, r0, r3
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	3332      	adds	r3, #50	; 0x32
 8004644:	4a15      	ldr	r2, [pc, #84]	; (800469c <UART_SetConfig+0x118>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004650:	4419      	add	r1, r3
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009a      	lsls	r2, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	fbb2 f2f3 	udiv	r2, r2, r3
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <UART_SetConfig+0x118>)
 800466a:	fba3 0302 	umull	r0, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	fb00 f303 	mul.w	r3, r0, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	; 0x32
 800467c:	4a07      	ldr	r2, [pc, #28]	; (800469c <UART_SetConfig+0x118>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	440a      	add	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40013800 	.word	0x40013800
 800469c:	51eb851f 	.word	0x51eb851f

080046a0 <__cvt>:
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a6:	461f      	mov	r7, r3
 80046a8:	bfbb      	ittet	lt
 80046aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	461f      	movlt	r7, r3
 80046b0:	2300      	movge	r3, #0
 80046b2:	232d      	movlt	r3, #45	; 0x2d
 80046b4:	b088      	sub	sp, #32
 80046b6:	4614      	mov	r4, r2
 80046b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046bc:	7013      	strb	r3, [r2, #0]
 80046be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046c4:	f023 0820 	bic.w	r8, r3, #32
 80046c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046cc:	d005      	beq.n	80046da <__cvt+0x3a>
 80046ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046d2:	d100      	bne.n	80046d6 <__cvt+0x36>
 80046d4:	3501      	adds	r5, #1
 80046d6:	2302      	movs	r3, #2
 80046d8:	e000      	b.n	80046dc <__cvt+0x3c>
 80046da:	2303      	movs	r3, #3
 80046dc:	aa07      	add	r2, sp, #28
 80046de:	9204      	str	r2, [sp, #16]
 80046e0:	aa06      	add	r2, sp, #24
 80046e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80046e6:	e9cd 3500 	strd	r3, r5, [sp]
 80046ea:	4622      	mov	r2, r4
 80046ec:	463b      	mov	r3, r7
 80046ee:	f001 f87f 	bl	80057f0 <_dtoa_r>
 80046f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046f6:	4606      	mov	r6, r0
 80046f8:	d102      	bne.n	8004700 <__cvt+0x60>
 80046fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046fc:	07db      	lsls	r3, r3, #31
 80046fe:	d522      	bpl.n	8004746 <__cvt+0xa6>
 8004700:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004704:	eb06 0905 	add.w	r9, r6, r5
 8004708:	d110      	bne.n	800472c <__cvt+0x8c>
 800470a:	7833      	ldrb	r3, [r6, #0]
 800470c:	2b30      	cmp	r3, #48	; 0x30
 800470e:	d10a      	bne.n	8004726 <__cvt+0x86>
 8004710:	2200      	movs	r2, #0
 8004712:	2300      	movs	r3, #0
 8004714:	4620      	mov	r0, r4
 8004716:	4639      	mov	r1, r7
 8004718:	f7fc f9b2 	bl	8000a80 <__aeabi_dcmpeq>
 800471c:	b918      	cbnz	r0, 8004726 <__cvt+0x86>
 800471e:	f1c5 0501 	rsb	r5, r5, #1
 8004722:	f8ca 5000 	str.w	r5, [sl]
 8004726:	f8da 3000 	ldr.w	r3, [sl]
 800472a:	4499      	add	r9, r3
 800472c:	2200      	movs	r2, #0
 800472e:	2300      	movs	r3, #0
 8004730:	4620      	mov	r0, r4
 8004732:	4639      	mov	r1, r7
 8004734:	f7fc f9a4 	bl	8000a80 <__aeabi_dcmpeq>
 8004738:	b108      	cbz	r0, 800473e <__cvt+0x9e>
 800473a:	f8cd 901c 	str.w	r9, [sp, #28]
 800473e:	2230      	movs	r2, #48	; 0x30
 8004740:	9b07      	ldr	r3, [sp, #28]
 8004742:	454b      	cmp	r3, r9
 8004744:	d307      	bcc.n	8004756 <__cvt+0xb6>
 8004746:	4630      	mov	r0, r6
 8004748:	9b07      	ldr	r3, [sp, #28]
 800474a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800474c:	1b9b      	subs	r3, r3, r6
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	b008      	add	sp, #32
 8004752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	9107      	str	r1, [sp, #28]
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e7f0      	b.n	8004740 <__cvt+0xa0>

0800475e <__exponent>:
 800475e:	4603      	mov	r3, r0
 8004760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004762:	2900      	cmp	r1, #0
 8004764:	f803 2b02 	strb.w	r2, [r3], #2
 8004768:	bfb6      	itet	lt
 800476a:	222d      	movlt	r2, #45	; 0x2d
 800476c:	222b      	movge	r2, #43	; 0x2b
 800476e:	4249      	neglt	r1, r1
 8004770:	2909      	cmp	r1, #9
 8004772:	7042      	strb	r2, [r0, #1]
 8004774:	dd2a      	ble.n	80047cc <__exponent+0x6e>
 8004776:	f10d 0207 	add.w	r2, sp, #7
 800477a:	4617      	mov	r7, r2
 800477c:	260a      	movs	r6, #10
 800477e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004782:	4694      	mov	ip, r2
 8004784:	fb06 1415 	mls	r4, r6, r5, r1
 8004788:	3430      	adds	r4, #48	; 0x30
 800478a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800478e:	460c      	mov	r4, r1
 8004790:	2c63      	cmp	r4, #99	; 0x63
 8004792:	4629      	mov	r1, r5
 8004794:	f102 32ff 	add.w	r2, r2, #4294967295
 8004798:	dcf1      	bgt.n	800477e <__exponent+0x20>
 800479a:	3130      	adds	r1, #48	; 0x30
 800479c:	f1ac 0402 	sub.w	r4, ip, #2
 80047a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80047a4:	4622      	mov	r2, r4
 80047a6:	1c41      	adds	r1, r0, #1
 80047a8:	42ba      	cmp	r2, r7
 80047aa:	d30a      	bcc.n	80047c2 <__exponent+0x64>
 80047ac:	f10d 0209 	add.w	r2, sp, #9
 80047b0:	eba2 020c 	sub.w	r2, r2, ip
 80047b4:	42bc      	cmp	r4, r7
 80047b6:	bf88      	it	hi
 80047b8:	2200      	movhi	r2, #0
 80047ba:	4413      	add	r3, r2
 80047bc:	1a18      	subs	r0, r3, r0
 80047be:	b003      	add	sp, #12
 80047c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80047c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80047ca:	e7ed      	b.n	80047a8 <__exponent+0x4a>
 80047cc:	2330      	movs	r3, #48	; 0x30
 80047ce:	3130      	adds	r1, #48	; 0x30
 80047d0:	7083      	strb	r3, [r0, #2]
 80047d2:	70c1      	strb	r1, [r0, #3]
 80047d4:	1d03      	adds	r3, r0, #4
 80047d6:	e7f1      	b.n	80047bc <__exponent+0x5e>

080047d8 <_printf_float>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	b091      	sub	sp, #68	; 0x44
 80047de:	460c      	mov	r4, r1
 80047e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80047e4:	4616      	mov	r6, r2
 80047e6:	461f      	mov	r7, r3
 80047e8:	4605      	mov	r5, r0
 80047ea:	f000 fee1 	bl	80055b0 <_localeconv_r>
 80047ee:	6803      	ldr	r3, [r0, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	9309      	str	r3, [sp, #36]	; 0x24
 80047f4:	f7fb fd18 	bl	8000228 <strlen>
 80047f8:	2300      	movs	r3, #0
 80047fa:	930e      	str	r3, [sp, #56]	; 0x38
 80047fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004800:	900a      	str	r0, [sp, #40]	; 0x28
 8004802:	3307      	adds	r3, #7
 8004804:	f023 0307 	bic.w	r3, r3, #7
 8004808:	f103 0208 	add.w	r2, r3, #8
 800480c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004810:	f8d4 b000 	ldr.w	fp, [r4]
 8004814:	f8c8 2000 	str.w	r2, [r8]
 8004818:	e9d3 a800 	ldrd	sl, r8, [r3]
 800481c:	4652      	mov	r2, sl
 800481e:	4643      	mov	r3, r8
 8004820:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004824:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004828:	930b      	str	r3, [sp, #44]	; 0x2c
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	4650      	mov	r0, sl
 8004830:	4b9c      	ldr	r3, [pc, #624]	; (8004aa4 <_printf_float+0x2cc>)
 8004832:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004834:	f7fc f956 	bl	8000ae4 <__aeabi_dcmpun>
 8004838:	bb70      	cbnz	r0, 8004898 <_printf_float+0xc0>
 800483a:	f04f 32ff 	mov.w	r2, #4294967295
 800483e:	4650      	mov	r0, sl
 8004840:	4b98      	ldr	r3, [pc, #608]	; (8004aa4 <_printf_float+0x2cc>)
 8004842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004844:	f7fc f930 	bl	8000aa8 <__aeabi_dcmple>
 8004848:	bb30      	cbnz	r0, 8004898 <_printf_float+0xc0>
 800484a:	2200      	movs	r2, #0
 800484c:	2300      	movs	r3, #0
 800484e:	4650      	mov	r0, sl
 8004850:	4641      	mov	r1, r8
 8004852:	f7fc f91f 	bl	8000a94 <__aeabi_dcmplt>
 8004856:	b110      	cbz	r0, 800485e <_printf_float+0x86>
 8004858:	232d      	movs	r3, #45	; 0x2d
 800485a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485e:	4a92      	ldr	r2, [pc, #584]	; (8004aa8 <_printf_float+0x2d0>)
 8004860:	4b92      	ldr	r3, [pc, #584]	; (8004aac <_printf_float+0x2d4>)
 8004862:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004866:	bf94      	ite	ls
 8004868:	4690      	movls	r8, r2
 800486a:	4698      	movhi	r8, r3
 800486c:	2303      	movs	r3, #3
 800486e:	f04f 0a00 	mov.w	sl, #0
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	f02b 0304 	bic.w	r3, fp, #4
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	4633      	mov	r3, r6
 800487c:	4621      	mov	r1, r4
 800487e:	4628      	mov	r0, r5
 8004880:	9700      	str	r7, [sp, #0]
 8004882:	aa0f      	add	r2, sp, #60	; 0x3c
 8004884:	f000 f9d6 	bl	8004c34 <_printf_common>
 8004888:	3001      	adds	r0, #1
 800488a:	f040 8090 	bne.w	80049ae <_printf_float+0x1d6>
 800488e:	f04f 30ff 	mov.w	r0, #4294967295
 8004892:	b011      	add	sp, #68	; 0x44
 8004894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004898:	4652      	mov	r2, sl
 800489a:	4643      	mov	r3, r8
 800489c:	4650      	mov	r0, sl
 800489e:	4641      	mov	r1, r8
 80048a0:	f7fc f920 	bl	8000ae4 <__aeabi_dcmpun>
 80048a4:	b148      	cbz	r0, 80048ba <_printf_float+0xe2>
 80048a6:	f1b8 0f00 	cmp.w	r8, #0
 80048aa:	bfb8      	it	lt
 80048ac:	232d      	movlt	r3, #45	; 0x2d
 80048ae:	4a80      	ldr	r2, [pc, #512]	; (8004ab0 <_printf_float+0x2d8>)
 80048b0:	bfb8      	it	lt
 80048b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048b6:	4b7f      	ldr	r3, [pc, #508]	; (8004ab4 <_printf_float+0x2dc>)
 80048b8:	e7d3      	b.n	8004862 <_printf_float+0x8a>
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	d142      	bne.n	800494a <_printf_float+0x172>
 80048c4:	2306      	movs	r3, #6
 80048c6:	6063      	str	r3, [r4, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	9206      	str	r2, [sp, #24]
 80048cc:	aa0e      	add	r2, sp, #56	; 0x38
 80048ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80048d2:	aa0d      	add	r2, sp, #52	; 0x34
 80048d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80048d8:	9203      	str	r2, [sp, #12]
 80048da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80048de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80048e2:	6023      	str	r3, [r4, #0]
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	4652      	mov	r2, sl
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	4643      	mov	r3, r8
 80048ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80048f0:	f7ff fed6 	bl	80046a0 <__cvt>
 80048f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048f6:	4680      	mov	r8, r0
 80048f8:	2947      	cmp	r1, #71	; 0x47
 80048fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80048fc:	d108      	bne.n	8004910 <_printf_float+0x138>
 80048fe:	1cc8      	adds	r0, r1, #3
 8004900:	db02      	blt.n	8004908 <_printf_float+0x130>
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	4299      	cmp	r1, r3
 8004906:	dd40      	ble.n	800498a <_printf_float+0x1b2>
 8004908:	f1a9 0902 	sub.w	r9, r9, #2
 800490c:	fa5f f989 	uxtb.w	r9, r9
 8004910:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004914:	d81f      	bhi.n	8004956 <_printf_float+0x17e>
 8004916:	464a      	mov	r2, r9
 8004918:	3901      	subs	r1, #1
 800491a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800491e:	910d      	str	r1, [sp, #52]	; 0x34
 8004920:	f7ff ff1d 	bl	800475e <__exponent>
 8004924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004926:	4682      	mov	sl, r0
 8004928:	1813      	adds	r3, r2, r0
 800492a:	2a01      	cmp	r2, #1
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	dc02      	bgt.n	8004936 <_printf_float+0x15e>
 8004930:	6822      	ldr	r2, [r4, #0]
 8004932:	07d2      	lsls	r2, r2, #31
 8004934:	d501      	bpl.n	800493a <_printf_float+0x162>
 8004936:	3301      	adds	r3, #1
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800493e:	2b00      	cmp	r3, #0
 8004940:	d09b      	beq.n	800487a <_printf_float+0xa2>
 8004942:	232d      	movs	r3, #45	; 0x2d
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	e797      	b.n	800487a <_printf_float+0xa2>
 800494a:	2947      	cmp	r1, #71	; 0x47
 800494c:	d1bc      	bne.n	80048c8 <_printf_float+0xf0>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ba      	bne.n	80048c8 <_printf_float+0xf0>
 8004952:	2301      	movs	r3, #1
 8004954:	e7b7      	b.n	80048c6 <_printf_float+0xee>
 8004956:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800495a:	d118      	bne.n	800498e <_printf_float+0x1b6>
 800495c:	2900      	cmp	r1, #0
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	dd0b      	ble.n	800497a <_printf_float+0x1a2>
 8004962:	6121      	str	r1, [r4, #16]
 8004964:	b913      	cbnz	r3, 800496c <_printf_float+0x194>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	07d0      	lsls	r0, r2, #31
 800496a:	d502      	bpl.n	8004972 <_printf_float+0x19a>
 800496c:	3301      	adds	r3, #1
 800496e:	440b      	add	r3, r1
 8004970:	6123      	str	r3, [r4, #16]
 8004972:	f04f 0a00 	mov.w	sl, #0
 8004976:	65a1      	str	r1, [r4, #88]	; 0x58
 8004978:	e7df      	b.n	800493a <_printf_float+0x162>
 800497a:	b913      	cbnz	r3, 8004982 <_printf_float+0x1aa>
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	07d2      	lsls	r2, r2, #31
 8004980:	d501      	bpl.n	8004986 <_printf_float+0x1ae>
 8004982:	3302      	adds	r3, #2
 8004984:	e7f4      	b.n	8004970 <_printf_float+0x198>
 8004986:	2301      	movs	r3, #1
 8004988:	e7f2      	b.n	8004970 <_printf_float+0x198>
 800498a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800498e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004990:	4299      	cmp	r1, r3
 8004992:	db05      	blt.n	80049a0 <_printf_float+0x1c8>
 8004994:	6823      	ldr	r3, [r4, #0]
 8004996:	6121      	str	r1, [r4, #16]
 8004998:	07d8      	lsls	r0, r3, #31
 800499a:	d5ea      	bpl.n	8004972 <_printf_float+0x19a>
 800499c:	1c4b      	adds	r3, r1, #1
 800499e:	e7e7      	b.n	8004970 <_printf_float+0x198>
 80049a0:	2900      	cmp	r1, #0
 80049a2:	bfcc      	ite	gt
 80049a4:	2201      	movgt	r2, #1
 80049a6:	f1c1 0202 	rsble	r2, r1, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	e7e0      	b.n	8004970 <_printf_float+0x198>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	055a      	lsls	r2, r3, #21
 80049b2:	d407      	bmi.n	80049c4 <_printf_float+0x1ec>
 80049b4:	6923      	ldr	r3, [r4, #16]
 80049b6:	4642      	mov	r2, r8
 80049b8:	4631      	mov	r1, r6
 80049ba:	4628      	mov	r0, r5
 80049bc:	47b8      	blx	r7
 80049be:	3001      	adds	r0, #1
 80049c0:	d12b      	bne.n	8004a1a <_printf_float+0x242>
 80049c2:	e764      	b.n	800488e <_printf_float+0xb6>
 80049c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049c8:	f240 80dd 	bls.w	8004b86 <_printf_float+0x3ae>
 80049cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049d0:	2200      	movs	r2, #0
 80049d2:	2300      	movs	r3, #0
 80049d4:	f7fc f854 	bl	8000a80 <__aeabi_dcmpeq>
 80049d8:	2800      	cmp	r0, #0
 80049da:	d033      	beq.n	8004a44 <_printf_float+0x26c>
 80049dc:	2301      	movs	r3, #1
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	4a35      	ldr	r2, [pc, #212]	; (8004ab8 <_printf_float+0x2e0>)
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f af51 	beq.w	800488e <_printf_float+0xb6>
 80049ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049f0:	429a      	cmp	r2, r3
 80049f2:	db02      	blt.n	80049fa <_printf_float+0x222>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	07d8      	lsls	r0, r3, #31
 80049f8:	d50f      	bpl.n	8004a1a <_printf_float+0x242>
 80049fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	f43f af42 	beq.w	800488e <_printf_float+0xb6>
 8004a0a:	f04f 0800 	mov.w	r8, #0
 8004a0e:	f104 091a 	add.w	r9, r4, #26
 8004a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a14:	3b01      	subs	r3, #1
 8004a16:	4543      	cmp	r3, r8
 8004a18:	dc09      	bgt.n	8004a2e <_printf_float+0x256>
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	079b      	lsls	r3, r3, #30
 8004a1e:	f100 8104 	bmi.w	8004c2a <_printf_float+0x452>
 8004a22:	68e0      	ldr	r0, [r4, #12]
 8004a24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a26:	4298      	cmp	r0, r3
 8004a28:	bfb8      	it	lt
 8004a2a:	4618      	movlt	r0, r3
 8004a2c:	e731      	b.n	8004892 <_printf_float+0xba>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	464a      	mov	r2, r9
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	47b8      	blx	r7
 8004a38:	3001      	adds	r0, #1
 8004a3a:	f43f af28 	beq.w	800488e <_printf_float+0xb6>
 8004a3e:	f108 0801 	add.w	r8, r8, #1
 8004a42:	e7e6      	b.n	8004a12 <_printf_float+0x23a>
 8004a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	dc38      	bgt.n	8004abc <_printf_float+0x2e4>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4631      	mov	r1, r6
 8004a4e:	4628      	mov	r0, r5
 8004a50:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <_printf_float+0x2e0>)
 8004a52:	47b8      	blx	r7
 8004a54:	3001      	adds	r0, #1
 8004a56:	f43f af1a 	beq.w	800488e <_printf_float+0xb6>
 8004a5a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	d102      	bne.n	8004a68 <_printf_float+0x290>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	07d9      	lsls	r1, r3, #31
 8004a66:	d5d8      	bpl.n	8004a1a <_printf_float+0x242>
 8004a68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f af0b 	beq.w	800488e <_printf_float+0xb6>
 8004a78:	f04f 0900 	mov.w	r9, #0
 8004a7c:	f104 0a1a 	add.w	sl, r4, #26
 8004a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a82:	425b      	negs	r3, r3
 8004a84:	454b      	cmp	r3, r9
 8004a86:	dc01      	bgt.n	8004a8c <_printf_float+0x2b4>
 8004a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a8a:	e794      	b.n	80049b6 <_printf_float+0x1de>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4652      	mov	r2, sl
 8004a90:	4631      	mov	r1, r6
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b8      	blx	r7
 8004a96:	3001      	adds	r0, #1
 8004a98:	f43f aef9 	beq.w	800488e <_printf_float+0xb6>
 8004a9c:	f109 0901 	add.w	r9, r9, #1
 8004aa0:	e7ee      	b.n	8004a80 <_printf_float+0x2a8>
 8004aa2:	bf00      	nop
 8004aa4:	7fefffff 	.word	0x7fefffff
 8004aa8:	08008e36 	.word	0x08008e36
 8004aac:	08008e3a 	.word	0x08008e3a
 8004ab0:	08008e3e 	.word	0x08008e3e
 8004ab4:	08008e42 	.word	0x08008e42
 8004ab8:	08008e46 	.word	0x08008e46
 8004abc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004abe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	bfa8      	it	ge
 8004ac4:	461a      	movge	r2, r3
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	4691      	mov	r9, r2
 8004aca:	dc37      	bgt.n	8004b3c <_printf_float+0x364>
 8004acc:	f04f 0b00 	mov.w	fp, #0
 8004ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ad4:	f104 021a 	add.w	r2, r4, #26
 8004ad8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004adc:	ebaa 0309 	sub.w	r3, sl, r9
 8004ae0:	455b      	cmp	r3, fp
 8004ae2:	dc33      	bgt.n	8004b4c <_printf_float+0x374>
 8004ae4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	db3b      	blt.n	8004b64 <_printf_float+0x38c>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	07da      	lsls	r2, r3, #31
 8004af0:	d438      	bmi.n	8004b64 <_printf_float+0x38c>
 8004af2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004af6:	eba2 0903 	sub.w	r9, r2, r3
 8004afa:	eba2 020a 	sub.w	r2, r2, sl
 8004afe:	4591      	cmp	r9, r2
 8004b00:	bfa8      	it	ge
 8004b02:	4691      	movge	r9, r2
 8004b04:	f1b9 0f00 	cmp.w	r9, #0
 8004b08:	dc34      	bgt.n	8004b74 <_printf_float+0x39c>
 8004b0a:	f04f 0800 	mov.w	r8, #0
 8004b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b12:	f104 0a1a 	add.w	sl, r4, #26
 8004b16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	eba3 0309 	sub.w	r3, r3, r9
 8004b20:	4543      	cmp	r3, r8
 8004b22:	f77f af7a 	ble.w	8004a1a <_printf_float+0x242>
 8004b26:	2301      	movs	r3, #1
 8004b28:	4652      	mov	r2, sl
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f aeac 	beq.w	800488e <_printf_float+0xb6>
 8004b36:	f108 0801 	add.w	r8, r8, #1
 8004b3a:	e7ec      	b.n	8004b16 <_printf_float+0x33e>
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4642      	mov	r2, r8
 8004b42:	4628      	mov	r0, r5
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	d1c0      	bne.n	8004acc <_printf_float+0x2f4>
 8004b4a:	e6a0      	b.n	800488e <_printf_float+0xb6>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b54:	47b8      	blx	r7
 8004b56:	3001      	adds	r0, #1
 8004b58:	f43f ae99 	beq.w	800488e <_printf_float+0xb6>
 8004b5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b5e:	f10b 0b01 	add.w	fp, fp, #1
 8004b62:	e7b9      	b.n	8004ad8 <_printf_float+0x300>
 8004b64:	4631      	mov	r1, r6
 8004b66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b8      	blx	r7
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d1bf      	bne.n	8004af2 <_printf_float+0x31a>
 8004b72:	e68c      	b.n	800488e <_printf_float+0xb6>
 8004b74:	464b      	mov	r3, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	eb08 020a 	add.w	r2, r8, sl
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	d1c2      	bne.n	8004b0a <_printf_float+0x332>
 8004b84:	e683      	b.n	800488e <_printf_float+0xb6>
 8004b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b88:	2a01      	cmp	r2, #1
 8004b8a:	dc01      	bgt.n	8004b90 <_printf_float+0x3b8>
 8004b8c:	07db      	lsls	r3, r3, #31
 8004b8e:	d539      	bpl.n	8004c04 <_printf_float+0x42c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4642      	mov	r2, r8
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	f43f ae77 	beq.w	800488e <_printf_float+0xb6>
 8004ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	f43f ae6f 	beq.w	800488e <_printf_float+0xb6>
 8004bb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004bbc:	f7fb ff60 	bl	8000a80 <__aeabi_dcmpeq>
 8004bc0:	b9d8      	cbnz	r0, 8004bfa <_printf_float+0x422>
 8004bc2:	f109 33ff 	add.w	r3, r9, #4294967295
 8004bc6:	f108 0201 	add.w	r2, r8, #1
 8004bca:	4631      	mov	r1, r6
 8004bcc:	4628      	mov	r0, r5
 8004bce:	47b8      	blx	r7
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d10e      	bne.n	8004bf2 <_printf_float+0x41a>
 8004bd4:	e65b      	b.n	800488e <_printf_float+0xb6>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	464a      	mov	r2, r9
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f ae54 	beq.w	800488e <_printf_float+0xb6>
 8004be6:	f108 0801 	add.w	r8, r8, #1
 8004bea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4543      	cmp	r3, r8
 8004bf0:	dcf1      	bgt.n	8004bd6 <_printf_float+0x3fe>
 8004bf2:	4653      	mov	r3, sl
 8004bf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bf8:	e6de      	b.n	80049b8 <_printf_float+0x1e0>
 8004bfa:	f04f 0800 	mov.w	r8, #0
 8004bfe:	f104 091a 	add.w	r9, r4, #26
 8004c02:	e7f2      	b.n	8004bea <_printf_float+0x412>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4642      	mov	r2, r8
 8004c08:	e7df      	b.n	8004bca <_printf_float+0x3f2>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	464a      	mov	r2, r9
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f ae3a 	beq.w	800488e <_printf_float+0xb6>
 8004c1a:	f108 0801 	add.w	r8, r8, #1
 8004c1e:	68e3      	ldr	r3, [r4, #12]
 8004c20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c22:	1a5b      	subs	r3, r3, r1
 8004c24:	4543      	cmp	r3, r8
 8004c26:	dcf0      	bgt.n	8004c0a <_printf_float+0x432>
 8004c28:	e6fb      	b.n	8004a22 <_printf_float+0x24a>
 8004c2a:	f04f 0800 	mov.w	r8, #0
 8004c2e:	f104 0919 	add.w	r9, r4, #25
 8004c32:	e7f4      	b.n	8004c1e <_printf_float+0x446>

08004c34 <_printf_common>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	4616      	mov	r6, r2
 8004c3a:	4699      	mov	r9, r3
 8004c3c:	688a      	ldr	r2, [r1, #8]
 8004c3e:	690b      	ldr	r3, [r1, #16]
 8004c40:	4607      	mov	r7, r0
 8004c42:	4293      	cmp	r3, r2
 8004c44:	bfb8      	it	lt
 8004c46:	4613      	movlt	r3, r2
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c4e:	460c      	mov	r4, r1
 8004c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c54:	b10a      	cbz	r2, 8004c5a <_printf_common+0x26>
 8004c56:	3301      	adds	r3, #1
 8004c58:	6033      	str	r3, [r6, #0]
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	0699      	lsls	r1, r3, #26
 8004c5e:	bf42      	ittt	mi
 8004c60:	6833      	ldrmi	r3, [r6, #0]
 8004c62:	3302      	addmi	r3, #2
 8004c64:	6033      	strmi	r3, [r6, #0]
 8004c66:	6825      	ldr	r5, [r4, #0]
 8004c68:	f015 0506 	ands.w	r5, r5, #6
 8004c6c:	d106      	bne.n	8004c7c <_printf_common+0x48>
 8004c6e:	f104 0a19 	add.w	sl, r4, #25
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	6832      	ldr	r2, [r6, #0]
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	dc2b      	bgt.n	8004cd4 <_printf_common+0xa0>
 8004c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c80:	1e13      	subs	r3, r2, #0
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	bf18      	it	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	0692      	lsls	r2, r2, #26
 8004c8a:	d430      	bmi.n	8004cee <_printf_common+0xba>
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c94:	47c0      	blx	r8
 8004c96:	3001      	adds	r0, #1
 8004c98:	d023      	beq.n	8004ce2 <_printf_common+0xae>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	f003 0306 	and.w	r3, r3, #6
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf14      	ite	ne
 8004ca6:	2500      	movne	r5, #0
 8004ca8:	6833      	ldreq	r3, [r6, #0]
 8004caa:	f04f 0600 	mov.w	r6, #0
 8004cae:	bf08      	it	eq
 8004cb0:	68e5      	ldreq	r5, [r4, #12]
 8004cb2:	f104 041a 	add.w	r4, r4, #26
 8004cb6:	bf08      	it	eq
 8004cb8:	1aed      	subeq	r5, r5, r3
 8004cba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cbe:	bf08      	it	eq
 8004cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bfc4      	itt	gt
 8004cc8:	1a9b      	subgt	r3, r3, r2
 8004cca:	18ed      	addgt	r5, r5, r3
 8004ccc:	42b5      	cmp	r5, r6
 8004cce:	d11a      	bne.n	8004d06 <_printf_common+0xd2>
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e008      	b.n	8004ce6 <_printf_common+0xb2>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4652      	mov	r2, sl
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4638      	mov	r0, r7
 8004cdc:	47c0      	blx	r8
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d103      	bne.n	8004cea <_printf_common+0xb6>
 8004ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cea:	3501      	adds	r5, #1
 8004cec:	e7c1      	b.n	8004c72 <_printf_common+0x3e>
 8004cee:	2030      	movs	r0, #48	; 0x30
 8004cf0:	18e1      	adds	r1, r4, r3
 8004cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cfc:	4422      	add	r2, r4
 8004cfe:	3302      	adds	r3, #2
 8004d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d04:	e7c2      	b.n	8004c8c <_printf_common+0x58>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4622      	mov	r2, r4
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	47c0      	blx	r8
 8004d10:	3001      	adds	r0, #1
 8004d12:	d0e6      	beq.n	8004ce2 <_printf_common+0xae>
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7d9      	b.n	8004ccc <_printf_common+0x98>

08004d18 <_printf_i>:
 8004d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	7e0f      	ldrb	r7, [r1, #24]
 8004d1e:	4691      	mov	r9, r2
 8004d20:	2f78      	cmp	r7, #120	; 0x78
 8004d22:	4680      	mov	r8, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	469a      	mov	sl, r3
 8004d28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2e:	d807      	bhi.n	8004d40 <_printf_i+0x28>
 8004d30:	2f62      	cmp	r7, #98	; 0x62
 8004d32:	d80a      	bhi.n	8004d4a <_printf_i+0x32>
 8004d34:	2f00      	cmp	r7, #0
 8004d36:	f000 80d5 	beq.w	8004ee4 <_printf_i+0x1cc>
 8004d3a:	2f58      	cmp	r7, #88	; 0x58
 8004d3c:	f000 80c1 	beq.w	8004ec2 <_printf_i+0x1aa>
 8004d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d48:	e03a      	b.n	8004dc0 <_printf_i+0xa8>
 8004d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4e:	2b15      	cmp	r3, #21
 8004d50:	d8f6      	bhi.n	8004d40 <_printf_i+0x28>
 8004d52:	a101      	add	r1, pc, #4	; (adr r1, 8004d58 <_printf_i+0x40>)
 8004d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d58:	08004db1 	.word	0x08004db1
 8004d5c:	08004dc5 	.word	0x08004dc5
 8004d60:	08004d41 	.word	0x08004d41
 8004d64:	08004d41 	.word	0x08004d41
 8004d68:	08004d41 	.word	0x08004d41
 8004d6c:	08004d41 	.word	0x08004d41
 8004d70:	08004dc5 	.word	0x08004dc5
 8004d74:	08004d41 	.word	0x08004d41
 8004d78:	08004d41 	.word	0x08004d41
 8004d7c:	08004d41 	.word	0x08004d41
 8004d80:	08004d41 	.word	0x08004d41
 8004d84:	08004ecb 	.word	0x08004ecb
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004e85 	.word	0x08004e85
 8004d90:	08004d41 	.word	0x08004d41
 8004d94:	08004d41 	.word	0x08004d41
 8004d98:	08004eed 	.word	0x08004eed
 8004d9c:	08004d41 	.word	0x08004d41
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004d41 	.word	0x08004d41
 8004da8:	08004d41 	.word	0x08004d41
 8004dac:	08004e8d 	.word	0x08004e8d
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0a0      	b.n	8004f06 <_printf_i+0x1ee>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	0607      	lsls	r7, r0, #24
 8004dca:	f103 0104 	add.w	r1, r3, #4
 8004dce:	6029      	str	r1, [r5, #0]
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0xbe>
 8004dd2:	681e      	ldr	r6, [r3, #0]
 8004dd4:	e003      	b.n	8004dde <_printf_i+0xc6>
 8004dd6:	0646      	lsls	r6, r0, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0xba>
 8004dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004dde:	2e00      	cmp	r6, #0
 8004de0:	da03      	bge.n	8004dea <_printf_i+0xd2>
 8004de2:	232d      	movs	r3, #45	; 0x2d
 8004de4:	4276      	negs	r6, r6
 8004de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dea:	230a      	movs	r3, #10
 8004dec:	4859      	ldr	r0, [pc, #356]	; (8004f54 <_printf_i+0x23c>)
 8004dee:	e012      	b.n	8004e16 <_printf_i+0xfe>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6029      	str	r1, [r5, #0]
 8004df8:	0605      	lsls	r5, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xe8>
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0xee>
 8004e00:	0641      	lsls	r1, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xe4>
 8004e04:	881e      	ldrh	r6, [r3, #0]
 8004e06:	2f6f      	cmp	r7, #111	; 0x6f
 8004e08:	bf0c      	ite	eq
 8004e0a:	2308      	moveq	r3, #8
 8004e0c:	230a      	movne	r3, #10
 8004e0e:	4851      	ldr	r0, [pc, #324]	; (8004f54 <_printf_i+0x23c>)
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e16:	6865      	ldr	r5, [r4, #4]
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	bfa8      	it	ge
 8004e1c:	6821      	ldrge	r1, [r4, #0]
 8004e1e:	60a5      	str	r5, [r4, #8]
 8004e20:	bfa4      	itt	ge
 8004e22:	f021 0104 	bicge.w	r1, r1, #4
 8004e26:	6021      	strge	r1, [r4, #0]
 8004e28:	b90e      	cbnz	r6, 8004e2e <_printf_i+0x116>
 8004e2a:	2d00      	cmp	r5, #0
 8004e2c:	d04b      	beq.n	8004ec6 <_printf_i+0x1ae>
 8004e2e:	4615      	mov	r5, r2
 8004e30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e34:	fb03 6711 	mls	r7, r3, r1, r6
 8004e38:	5dc7      	ldrb	r7, [r0, r7]
 8004e3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3e:	4637      	mov	r7, r6
 8004e40:	42bb      	cmp	r3, r7
 8004e42:	460e      	mov	r6, r1
 8004e44:	d9f4      	bls.n	8004e30 <_printf_i+0x118>
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d10b      	bne.n	8004e62 <_printf_i+0x14a>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	07de      	lsls	r6, r3, #31
 8004e4e:	d508      	bpl.n	8004e62 <_printf_i+0x14a>
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	6861      	ldr	r1, [r4, #4]
 8004e54:	4299      	cmp	r1, r3
 8004e56:	bfde      	ittt	le
 8004e58:	2330      	movle	r3, #48	; 0x30
 8004e5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e62:	1b52      	subs	r2, r2, r5
 8004e64:	6122      	str	r2, [r4, #16]
 8004e66:	464b      	mov	r3, r9
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	f8cd a000 	str.w	sl, [sp]
 8004e70:	aa03      	add	r2, sp, #12
 8004e72:	f7ff fedf 	bl	8004c34 <_printf_common>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d14a      	bne.n	8004f10 <_printf_i+0x1f8>
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	b004      	add	sp, #16
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	f043 0320 	orr.w	r3, r3, #32
 8004e8a:	6023      	str	r3, [r4, #0]
 8004e8c:	2778      	movs	r7, #120	; 0x78
 8004e8e:	4832      	ldr	r0, [pc, #200]	; (8004f58 <_printf_i+0x240>)
 8004e90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	6829      	ldr	r1, [r5, #0]
 8004e98:	061f      	lsls	r7, r3, #24
 8004e9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e9e:	d402      	bmi.n	8004ea6 <_printf_i+0x18e>
 8004ea0:	065f      	lsls	r7, r3, #25
 8004ea2:	bf48      	it	mi
 8004ea4:	b2b6      	uxthmi	r6, r6
 8004ea6:	07df      	lsls	r7, r3, #31
 8004ea8:	bf48      	it	mi
 8004eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004eae:	6029      	str	r1, [r5, #0]
 8004eb0:	bf48      	it	mi
 8004eb2:	6023      	strmi	r3, [r4, #0]
 8004eb4:	b91e      	cbnz	r6, 8004ebe <_printf_i+0x1a6>
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	f023 0320 	bic.w	r3, r3, #32
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	e7a6      	b.n	8004e10 <_printf_i+0xf8>
 8004ec2:	4824      	ldr	r0, [pc, #144]	; (8004f54 <_printf_i+0x23c>)
 8004ec4:	e7e4      	b.n	8004e90 <_printf_i+0x178>
 8004ec6:	4615      	mov	r5, r2
 8004ec8:	e7bd      	b.n	8004e46 <_printf_i+0x12e>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	6826      	ldr	r6, [r4, #0]
 8004ece:	1d18      	adds	r0, r3, #4
 8004ed0:	6961      	ldr	r1, [r4, #20]
 8004ed2:	6028      	str	r0, [r5, #0]
 8004ed4:	0635      	lsls	r5, r6, #24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	d501      	bpl.n	8004ede <_printf_i+0x1c6>
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	e002      	b.n	8004ee4 <_printf_i+0x1cc>
 8004ede:	0670      	lsls	r0, r6, #25
 8004ee0:	d5fb      	bpl.n	8004eda <_printf_i+0x1c2>
 8004ee2:	8019      	strh	r1, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	e7bc      	b.n	8004e66 <_printf_i+0x14e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 fbcf 	bl	800569c <memchr>
 8004efe:	b108      	cbz	r0, 8004f04 <_printf_i+0x1ec>
 8004f00:	1b40      	subs	r0, r0, r5
 8004f02:	6060      	str	r0, [r4, #4]
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	e7aa      	b.n	8004e66 <_printf_i+0x14e>
 8004f10:	462a      	mov	r2, r5
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	47d0      	blx	sl
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0ad      	beq.n	8004e7a <_printf_i+0x162>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	079b      	lsls	r3, r3, #30
 8004f22:	d413      	bmi.n	8004f4c <_printf_i+0x234>
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bfb8      	it	lt
 8004f2c:	4618      	movlt	r0, r3
 8004f2e:	e7a6      	b.n	8004e7e <_printf_i+0x166>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4632      	mov	r2, r6
 8004f34:	4649      	mov	r1, r9
 8004f36:	4640      	mov	r0, r8
 8004f38:	47d0      	blx	sl
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d09d      	beq.n	8004e7a <_printf_i+0x162>
 8004f3e:	3501      	adds	r5, #1
 8004f40:	68e3      	ldr	r3, [r4, #12]
 8004f42:	9903      	ldr	r1, [sp, #12]
 8004f44:	1a5b      	subs	r3, r3, r1
 8004f46:	42ab      	cmp	r3, r5
 8004f48:	dcf2      	bgt.n	8004f30 <_printf_i+0x218>
 8004f4a:	e7eb      	b.n	8004f24 <_printf_i+0x20c>
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	f104 0619 	add.w	r6, r4, #25
 8004f52:	e7f5      	b.n	8004f40 <_printf_i+0x228>
 8004f54:	08008e48 	.word	0x08008e48
 8004f58:	08008e59 	.word	0x08008e59

08004f5c <_scanf_float>:
 8004f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	b087      	sub	sp, #28
 8004f62:	9303      	str	r3, [sp, #12]
 8004f64:	688b      	ldr	r3, [r1, #8]
 8004f66:	4617      	mov	r7, r2
 8004f68:	1e5a      	subs	r2, r3, #1
 8004f6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f6e:	bf85      	ittet	hi
 8004f70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f74:	195b      	addhi	r3, r3, r5
 8004f76:	2300      	movls	r3, #0
 8004f78:	9302      	strhi	r3, [sp, #8]
 8004f7a:	bf88      	it	hi
 8004f7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f80:	468b      	mov	fp, r1
 8004f82:	f04f 0500 	mov.w	r5, #0
 8004f86:	bf8c      	ite	hi
 8004f88:	608b      	strhi	r3, [r1, #8]
 8004f8a:	9302      	strls	r3, [sp, #8]
 8004f8c:	680b      	ldr	r3, [r1, #0]
 8004f8e:	4680      	mov	r8, r0
 8004f90:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f94:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f98:	460c      	mov	r4, r1
 8004f9a:	465e      	mov	r6, fp
 8004f9c:	46aa      	mov	sl, r5
 8004f9e:	46a9      	mov	r9, r5
 8004fa0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fa4:	9501      	str	r5, [sp, #4]
 8004fa6:	68a2      	ldr	r2, [r4, #8]
 8004fa8:	b152      	cbz	r2, 8004fc0 <_scanf_float+0x64>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b4e      	cmp	r3, #78	; 0x4e
 8004fb0:	d864      	bhi.n	800507c <_scanf_float+0x120>
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d83c      	bhi.n	8005030 <_scanf_float+0xd4>
 8004fb6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004fba:	b2c8      	uxtb	r0, r1
 8004fbc:	280e      	cmp	r0, #14
 8004fbe:	d93a      	bls.n	8005036 <_scanf_float+0xda>
 8004fc0:	f1b9 0f00 	cmp.w	r9, #0
 8004fc4:	d003      	beq.n	8004fce <_scanf_float+0x72>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fcc:	6023      	str	r3, [r4, #0]
 8004fce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fd2:	f1ba 0f01 	cmp.w	sl, #1
 8004fd6:	f200 8113 	bhi.w	8005200 <_scanf_float+0x2a4>
 8004fda:	455e      	cmp	r6, fp
 8004fdc:	f200 8105 	bhi.w	80051ea <_scanf_float+0x28e>
 8004fe0:	2501      	movs	r5, #1
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	b007      	add	sp, #28
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004fee:	2a0d      	cmp	r2, #13
 8004ff0:	d8e6      	bhi.n	8004fc0 <_scanf_float+0x64>
 8004ff2:	a101      	add	r1, pc, #4	; (adr r1, 8004ff8 <_scanf_float+0x9c>)
 8004ff4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004ff8:	08005137 	.word	0x08005137
 8004ffc:	08004fc1 	.word	0x08004fc1
 8005000:	08004fc1 	.word	0x08004fc1
 8005004:	08004fc1 	.word	0x08004fc1
 8005008:	08005197 	.word	0x08005197
 800500c:	0800516f 	.word	0x0800516f
 8005010:	08004fc1 	.word	0x08004fc1
 8005014:	08004fc1 	.word	0x08004fc1
 8005018:	08005145 	.word	0x08005145
 800501c:	08004fc1 	.word	0x08004fc1
 8005020:	08004fc1 	.word	0x08004fc1
 8005024:	08004fc1 	.word	0x08004fc1
 8005028:	08004fc1 	.word	0x08004fc1
 800502c:	080050fd 	.word	0x080050fd
 8005030:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005034:	e7db      	b.n	8004fee <_scanf_float+0x92>
 8005036:	290e      	cmp	r1, #14
 8005038:	d8c2      	bhi.n	8004fc0 <_scanf_float+0x64>
 800503a:	a001      	add	r0, pc, #4	; (adr r0, 8005040 <_scanf_float+0xe4>)
 800503c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005040:	080050ef 	.word	0x080050ef
 8005044:	08004fc1 	.word	0x08004fc1
 8005048:	080050ef 	.word	0x080050ef
 800504c:	08005183 	.word	0x08005183
 8005050:	08004fc1 	.word	0x08004fc1
 8005054:	0800509d 	.word	0x0800509d
 8005058:	080050d9 	.word	0x080050d9
 800505c:	080050d9 	.word	0x080050d9
 8005060:	080050d9 	.word	0x080050d9
 8005064:	080050d9 	.word	0x080050d9
 8005068:	080050d9 	.word	0x080050d9
 800506c:	080050d9 	.word	0x080050d9
 8005070:	080050d9 	.word	0x080050d9
 8005074:	080050d9 	.word	0x080050d9
 8005078:	080050d9 	.word	0x080050d9
 800507c:	2b6e      	cmp	r3, #110	; 0x6e
 800507e:	d809      	bhi.n	8005094 <_scanf_float+0x138>
 8005080:	2b60      	cmp	r3, #96	; 0x60
 8005082:	d8b2      	bhi.n	8004fea <_scanf_float+0x8e>
 8005084:	2b54      	cmp	r3, #84	; 0x54
 8005086:	d077      	beq.n	8005178 <_scanf_float+0x21c>
 8005088:	2b59      	cmp	r3, #89	; 0x59
 800508a:	d199      	bne.n	8004fc0 <_scanf_float+0x64>
 800508c:	2d07      	cmp	r5, #7
 800508e:	d197      	bne.n	8004fc0 <_scanf_float+0x64>
 8005090:	2508      	movs	r5, #8
 8005092:	e029      	b.n	80050e8 <_scanf_float+0x18c>
 8005094:	2b74      	cmp	r3, #116	; 0x74
 8005096:	d06f      	beq.n	8005178 <_scanf_float+0x21c>
 8005098:	2b79      	cmp	r3, #121	; 0x79
 800509a:	e7f6      	b.n	800508a <_scanf_float+0x12e>
 800509c:	6821      	ldr	r1, [r4, #0]
 800509e:	05c8      	lsls	r0, r1, #23
 80050a0:	d51a      	bpl.n	80050d8 <_scanf_float+0x17c>
 80050a2:	9b02      	ldr	r3, [sp, #8]
 80050a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050a8:	6021      	str	r1, [r4, #0]
 80050aa:	f109 0901 	add.w	r9, r9, #1
 80050ae:	b11b      	cbz	r3, 80050b8 <_scanf_float+0x15c>
 80050b0:	3b01      	subs	r3, #1
 80050b2:	3201      	adds	r2, #1
 80050b4:	9302      	str	r3, [sp, #8]
 80050b6:	60a2      	str	r2, [r4, #8]
 80050b8:	68a3      	ldr	r3, [r4, #8]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	60a3      	str	r3, [r4, #8]
 80050be:	6923      	ldr	r3, [r4, #16]
 80050c0:	3301      	adds	r3, #1
 80050c2:	6123      	str	r3, [r4, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	f340 8084 	ble.w	80051d8 <_scanf_float+0x27c>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	3301      	adds	r3, #1
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	e766      	b.n	8004fa6 <_scanf_float+0x4a>
 80050d8:	eb1a 0f05 	cmn.w	sl, r5
 80050dc:	f47f af70 	bne.w	8004fc0 <_scanf_float+0x64>
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80050e6:	6022      	str	r2, [r4, #0]
 80050e8:	f806 3b01 	strb.w	r3, [r6], #1
 80050ec:	e7e4      	b.n	80050b8 <_scanf_float+0x15c>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	0610      	lsls	r0, r2, #24
 80050f2:	f57f af65 	bpl.w	8004fc0 <_scanf_float+0x64>
 80050f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050fa:	e7f4      	b.n	80050e6 <_scanf_float+0x18a>
 80050fc:	f1ba 0f00 	cmp.w	sl, #0
 8005100:	d10e      	bne.n	8005120 <_scanf_float+0x1c4>
 8005102:	f1b9 0f00 	cmp.w	r9, #0
 8005106:	d10e      	bne.n	8005126 <_scanf_float+0x1ca>
 8005108:	6822      	ldr	r2, [r4, #0]
 800510a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800510e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005112:	d108      	bne.n	8005126 <_scanf_float+0x1ca>
 8005114:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005118:	f04f 0a01 	mov.w	sl, #1
 800511c:	6022      	str	r2, [r4, #0]
 800511e:	e7e3      	b.n	80050e8 <_scanf_float+0x18c>
 8005120:	f1ba 0f02 	cmp.w	sl, #2
 8005124:	d055      	beq.n	80051d2 <_scanf_float+0x276>
 8005126:	2d01      	cmp	r5, #1
 8005128:	d002      	beq.n	8005130 <_scanf_float+0x1d4>
 800512a:	2d04      	cmp	r5, #4
 800512c:	f47f af48 	bne.w	8004fc0 <_scanf_float+0x64>
 8005130:	3501      	adds	r5, #1
 8005132:	b2ed      	uxtb	r5, r5
 8005134:	e7d8      	b.n	80050e8 <_scanf_float+0x18c>
 8005136:	f1ba 0f01 	cmp.w	sl, #1
 800513a:	f47f af41 	bne.w	8004fc0 <_scanf_float+0x64>
 800513e:	f04f 0a02 	mov.w	sl, #2
 8005142:	e7d1      	b.n	80050e8 <_scanf_float+0x18c>
 8005144:	b97d      	cbnz	r5, 8005166 <_scanf_float+0x20a>
 8005146:	f1b9 0f00 	cmp.w	r9, #0
 800514a:	f47f af3c 	bne.w	8004fc6 <_scanf_float+0x6a>
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005154:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005158:	f47f af39 	bne.w	8004fce <_scanf_float+0x72>
 800515c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005160:	2501      	movs	r5, #1
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	e7c0      	b.n	80050e8 <_scanf_float+0x18c>
 8005166:	2d03      	cmp	r5, #3
 8005168:	d0e2      	beq.n	8005130 <_scanf_float+0x1d4>
 800516a:	2d05      	cmp	r5, #5
 800516c:	e7de      	b.n	800512c <_scanf_float+0x1d0>
 800516e:	2d02      	cmp	r5, #2
 8005170:	f47f af26 	bne.w	8004fc0 <_scanf_float+0x64>
 8005174:	2503      	movs	r5, #3
 8005176:	e7b7      	b.n	80050e8 <_scanf_float+0x18c>
 8005178:	2d06      	cmp	r5, #6
 800517a:	f47f af21 	bne.w	8004fc0 <_scanf_float+0x64>
 800517e:	2507      	movs	r5, #7
 8005180:	e7b2      	b.n	80050e8 <_scanf_float+0x18c>
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	0591      	lsls	r1, r2, #22
 8005186:	f57f af1b 	bpl.w	8004fc0 <_scanf_float+0x64>
 800518a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	f8cd 9004 	str.w	r9, [sp, #4]
 8005194:	e7a8      	b.n	80050e8 <_scanf_float+0x18c>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800519c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051a0:	d006      	beq.n	80051b0 <_scanf_float+0x254>
 80051a2:	0550      	lsls	r0, r2, #21
 80051a4:	f57f af0c 	bpl.w	8004fc0 <_scanf_float+0x64>
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	f43f af0f 	beq.w	8004fce <_scanf_float+0x72>
 80051b0:	0591      	lsls	r1, r2, #22
 80051b2:	bf58      	it	pl
 80051b4:	9901      	ldrpl	r1, [sp, #4]
 80051b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051ba:	bf58      	it	pl
 80051bc:	eba9 0101 	subpl.w	r1, r9, r1
 80051c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051c4:	f04f 0900 	mov.w	r9, #0
 80051c8:	bf58      	it	pl
 80051ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051ce:	6022      	str	r2, [r4, #0]
 80051d0:	e78a      	b.n	80050e8 <_scanf_float+0x18c>
 80051d2:	f04f 0a03 	mov.w	sl, #3
 80051d6:	e787      	b.n	80050e8 <_scanf_float+0x18c>
 80051d8:	4639      	mov	r1, r7
 80051da:	4640      	mov	r0, r8
 80051dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051e0:	4798      	blx	r3
 80051e2:	2800      	cmp	r0, #0
 80051e4:	f43f aedf 	beq.w	8004fa6 <_scanf_float+0x4a>
 80051e8:	e6ea      	b.n	8004fc0 <_scanf_float+0x64>
 80051ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051ee:	463a      	mov	r2, r7
 80051f0:	4640      	mov	r0, r8
 80051f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051f6:	4798      	blx	r3
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	e6ec      	b.n	8004fda <_scanf_float+0x7e>
 8005200:	1e6b      	subs	r3, r5, #1
 8005202:	2b06      	cmp	r3, #6
 8005204:	d825      	bhi.n	8005252 <_scanf_float+0x2f6>
 8005206:	2d02      	cmp	r5, #2
 8005208:	d836      	bhi.n	8005278 <_scanf_float+0x31c>
 800520a:	455e      	cmp	r6, fp
 800520c:	f67f aee8 	bls.w	8004fe0 <_scanf_float+0x84>
 8005210:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005214:	463a      	mov	r2, r7
 8005216:	4640      	mov	r0, r8
 8005218:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800521c:	4798      	blx	r3
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	3b01      	subs	r3, #1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	e7f1      	b.n	800520a <_scanf_float+0x2ae>
 8005226:	9802      	ldr	r0, [sp, #8]
 8005228:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800522c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005230:	463a      	mov	r2, r7
 8005232:	9002      	str	r0, [sp, #8]
 8005234:	4640      	mov	r0, r8
 8005236:	4798      	blx	r3
 8005238:	6923      	ldr	r3, [r4, #16]
 800523a:	3b01      	subs	r3, #1
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005242:	fa5f fa8a 	uxtb.w	sl, sl
 8005246:	f1ba 0f02 	cmp.w	sl, #2
 800524a:	d1ec      	bne.n	8005226 <_scanf_float+0x2ca>
 800524c:	3d03      	subs	r5, #3
 800524e:	b2ed      	uxtb	r5, r5
 8005250:	1b76      	subs	r6, r6, r5
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	05da      	lsls	r2, r3, #23
 8005256:	d52f      	bpl.n	80052b8 <_scanf_float+0x35c>
 8005258:	055b      	lsls	r3, r3, #21
 800525a:	d510      	bpl.n	800527e <_scanf_float+0x322>
 800525c:	455e      	cmp	r6, fp
 800525e:	f67f aebf 	bls.w	8004fe0 <_scanf_float+0x84>
 8005262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005266:	463a      	mov	r2, r7
 8005268:	4640      	mov	r0, r8
 800526a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800526e:	4798      	blx	r3
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	3b01      	subs	r3, #1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	e7f1      	b.n	800525c <_scanf_float+0x300>
 8005278:	46aa      	mov	sl, r5
 800527a:	9602      	str	r6, [sp, #8]
 800527c:	e7df      	b.n	800523e <_scanf_float+0x2e2>
 800527e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	2965      	cmp	r1, #101	; 0x65
 8005286:	f103 33ff 	add.w	r3, r3, #4294967295
 800528a:	f106 35ff 	add.w	r5, r6, #4294967295
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	d00c      	beq.n	80052ac <_scanf_float+0x350>
 8005292:	2945      	cmp	r1, #69	; 0x45
 8005294:	d00a      	beq.n	80052ac <_scanf_float+0x350>
 8005296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800529a:	463a      	mov	r2, r7
 800529c:	4640      	mov	r0, r8
 800529e:	4798      	blx	r3
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	1eb5      	subs	r5, r6, #2
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	463a      	mov	r2, r7
 80052ae:	4640      	mov	r0, r8
 80052b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052b4:	4798      	blx	r3
 80052b6:	462e      	mov	r6, r5
 80052b8:	6825      	ldr	r5, [r4, #0]
 80052ba:	f015 0510 	ands.w	r5, r5, #16
 80052be:	d155      	bne.n	800536c <_scanf_float+0x410>
 80052c0:	7035      	strb	r5, [r6, #0]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052cc:	d11d      	bne.n	800530a <_scanf_float+0x3ae>
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	454b      	cmp	r3, r9
 80052d2:	eba3 0209 	sub.w	r2, r3, r9
 80052d6:	d125      	bne.n	8005324 <_scanf_float+0x3c8>
 80052d8:	2200      	movs	r2, #0
 80052da:	4659      	mov	r1, fp
 80052dc:	4640      	mov	r0, r8
 80052de:	f002 fc1b 	bl	8007b18 <_strtod_r>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	f8d4 c000 	ldr.w	ip, [r4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f01c 0f02 	tst.w	ip, #2
 80052ee:	4606      	mov	r6, r0
 80052f0:	460f      	mov	r7, r1
 80052f2:	f103 0204 	add.w	r2, r3, #4
 80052f6:	d020      	beq.n	800533a <_scanf_float+0x3de>
 80052f8:	9903      	ldr	r1, [sp, #12]
 80052fa:	600a      	str	r2, [r1, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	e9c3 6700 	strd	r6, r7, [r3]
 8005302:	68e3      	ldr	r3, [r4, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60e3      	str	r3, [r4, #12]
 8005308:	e66b      	b.n	8004fe2 <_scanf_float+0x86>
 800530a:	9b04      	ldr	r3, [sp, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0e3      	beq.n	80052d8 <_scanf_float+0x37c>
 8005310:	9905      	ldr	r1, [sp, #20]
 8005312:	230a      	movs	r3, #10
 8005314:	462a      	mov	r2, r5
 8005316:	4640      	mov	r0, r8
 8005318:	3101      	adds	r1, #1
 800531a:	f002 fc81 	bl	8007c20 <_strtol_r>
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	9e05      	ldr	r6, [sp, #20]
 8005322:	1ac2      	subs	r2, r0, r3
 8005324:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005328:	429e      	cmp	r6, r3
 800532a:	bf28      	it	cs
 800532c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005330:	4630      	mov	r0, r6
 8005332:	490f      	ldr	r1, [pc, #60]	; (8005370 <_scanf_float+0x414>)
 8005334:	f000 f8d0 	bl	80054d8 <siprintf>
 8005338:	e7ce      	b.n	80052d8 <_scanf_float+0x37c>
 800533a:	f01c 0f04 	tst.w	ip, #4
 800533e:	d1db      	bne.n	80052f8 <_scanf_float+0x39c>
 8005340:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005344:	f8cc 2000 	str.w	r2, [ip]
 8005348:	f8d3 8000 	ldr.w	r8, [r3]
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	f7fb fbc8 	bl	8000ae4 <__aeabi_dcmpun>
 8005354:	b128      	cbz	r0, 8005362 <_scanf_float+0x406>
 8005356:	4807      	ldr	r0, [pc, #28]	; (8005374 <_scanf_float+0x418>)
 8005358:	f000 f9bc 	bl	80056d4 <nanf>
 800535c:	f8c8 0000 	str.w	r0, [r8]
 8005360:	e7cf      	b.n	8005302 <_scanf_float+0x3a6>
 8005362:	4630      	mov	r0, r6
 8005364:	4639      	mov	r1, r7
 8005366:	f7fb fc1b 	bl	8000ba0 <__aeabi_d2f>
 800536a:	e7f7      	b.n	800535c <_scanf_float+0x400>
 800536c:	2500      	movs	r5, #0
 800536e:	e638      	b.n	8004fe2 <_scanf_float+0x86>
 8005370:	08008e6a 	.word	0x08008e6a
 8005374:	080091fd 	.word	0x080091fd

08005378 <std>:
 8005378:	2300      	movs	r3, #0
 800537a:	b510      	push	{r4, lr}
 800537c:	4604      	mov	r4, r0
 800537e:	e9c0 3300 	strd	r3, r3, [r0]
 8005382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005386:	6083      	str	r3, [r0, #8]
 8005388:	8181      	strh	r1, [r0, #12]
 800538a:	6643      	str	r3, [r0, #100]	; 0x64
 800538c:	81c2      	strh	r2, [r0, #14]
 800538e:	6183      	str	r3, [r0, #24]
 8005390:	4619      	mov	r1, r3
 8005392:	2208      	movs	r2, #8
 8005394:	305c      	adds	r0, #92	; 0x5c
 8005396:	f000 f902 	bl	800559e <memset>
 800539a:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <std+0x38>)
 800539c:	6224      	str	r4, [r4, #32]
 800539e:	6263      	str	r3, [r4, #36]	; 0x24
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <std+0x3c>)
 80053a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <std+0x40>)
 80053a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <std+0x44>)
 80053aa:	6323      	str	r3, [r4, #48]	; 0x30
 80053ac:	bd10      	pop	{r4, pc}
 80053ae:	bf00      	nop
 80053b0:	08005519 	.word	0x08005519
 80053b4:	0800553b 	.word	0x0800553b
 80053b8:	08005573 	.word	0x08005573
 80053bc:	08005597 	.word	0x08005597

080053c0 <stdio_exit_handler>:
 80053c0:	4a02      	ldr	r2, [pc, #8]	; (80053cc <stdio_exit_handler+0xc>)
 80053c2:	4903      	ldr	r1, [pc, #12]	; (80053d0 <stdio_exit_handler+0x10>)
 80053c4:	4803      	ldr	r0, [pc, #12]	; (80053d4 <stdio_exit_handler+0x14>)
 80053c6:	f000 b869 	b.w	800549c <_fwalk_sglue>
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c
 80053d0:	08007fd9 	.word	0x08007fd9
 80053d4:	20000018 	.word	0x20000018

080053d8 <cleanup_stdio>:
 80053d8:	6841      	ldr	r1, [r0, #4]
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <cleanup_stdio+0x34>)
 80053dc:	b510      	push	{r4, lr}
 80053de:	4299      	cmp	r1, r3
 80053e0:	4604      	mov	r4, r0
 80053e2:	d001      	beq.n	80053e8 <cleanup_stdio+0x10>
 80053e4:	f002 fdf8 	bl	8007fd8 <_fflush_r>
 80053e8:	68a1      	ldr	r1, [r4, #8]
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <cleanup_stdio+0x38>)
 80053ec:	4299      	cmp	r1, r3
 80053ee:	d002      	beq.n	80053f6 <cleanup_stdio+0x1e>
 80053f0:	4620      	mov	r0, r4
 80053f2:	f002 fdf1 	bl	8007fd8 <_fflush_r>
 80053f6:	68e1      	ldr	r1, [r4, #12]
 80053f8:	4b06      	ldr	r3, [pc, #24]	; (8005414 <cleanup_stdio+0x3c>)
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d004      	beq.n	8005408 <cleanup_stdio+0x30>
 80053fe:	4620      	mov	r0, r4
 8005400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005404:	f002 bde8 	b.w	8007fd8 <_fflush_r>
 8005408:	bd10      	pop	{r4, pc}
 800540a:	bf00      	nop
 800540c:	20000794 	.word	0x20000794
 8005410:	200007fc 	.word	0x200007fc
 8005414:	20000864 	.word	0x20000864

08005418 <global_stdio_init.part.0>:
 8005418:	b510      	push	{r4, lr}
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <global_stdio_init.part.0+0x30>)
 800541c:	4c0b      	ldr	r4, [pc, #44]	; (800544c <global_stdio_init.part.0+0x34>)
 800541e:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <global_stdio_init.part.0+0x38>)
 8005420:	4620      	mov	r0, r4
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	2104      	movs	r1, #4
 8005426:	2200      	movs	r2, #0
 8005428:	f7ff ffa6 	bl	8005378 <std>
 800542c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005430:	2201      	movs	r2, #1
 8005432:	2109      	movs	r1, #9
 8005434:	f7ff ffa0 	bl	8005378 <std>
 8005438:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800543c:	2202      	movs	r2, #2
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	2112      	movs	r1, #18
 8005444:	f7ff bf98 	b.w	8005378 <std>
 8005448:	200008cc 	.word	0x200008cc
 800544c:	20000794 	.word	0x20000794
 8005450:	080053c1 	.word	0x080053c1

08005454 <__sfp_lock_acquire>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__sfp_lock_acquire+0x8>)
 8005456:	f000 b91f 	b.w	8005698 <__retarget_lock_acquire_recursive>
 800545a:	bf00      	nop
 800545c:	200008d5 	.word	0x200008d5

08005460 <__sfp_lock_release>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__sfp_lock_release+0x8>)
 8005462:	f000 b91a 	b.w	800569a <__retarget_lock_release_recursive>
 8005466:	bf00      	nop
 8005468:	200008d5 	.word	0x200008d5

0800546c <__sinit>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	f7ff fff0 	bl	8005454 <__sfp_lock_acquire>
 8005474:	6a23      	ldr	r3, [r4, #32]
 8005476:	b11b      	cbz	r3, 8005480 <__sinit+0x14>
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	f7ff bff0 	b.w	8005460 <__sfp_lock_release>
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <__sinit+0x28>)
 8005482:	6223      	str	r3, [r4, #32]
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <__sinit+0x2c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f5      	bne.n	8005478 <__sinit+0xc>
 800548c:	f7ff ffc4 	bl	8005418 <global_stdio_init.part.0>
 8005490:	e7f2      	b.n	8005478 <__sinit+0xc>
 8005492:	bf00      	nop
 8005494:	080053d9 	.word	0x080053d9
 8005498:	200008cc 	.word	0x200008cc

0800549c <_fwalk_sglue>:
 800549c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a0:	4607      	mov	r7, r0
 80054a2:	4688      	mov	r8, r1
 80054a4:	4614      	mov	r4, r2
 80054a6:	2600      	movs	r6, #0
 80054a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ac:	f1b9 0901 	subs.w	r9, r9, #1
 80054b0:	d505      	bpl.n	80054be <_fwalk_sglue+0x22>
 80054b2:	6824      	ldr	r4, [r4, #0]
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	d1f7      	bne.n	80054a8 <_fwalk_sglue+0xc>
 80054b8:	4630      	mov	r0, r6
 80054ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d907      	bls.n	80054d4 <_fwalk_sglue+0x38>
 80054c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054c8:	3301      	adds	r3, #1
 80054ca:	d003      	beq.n	80054d4 <_fwalk_sglue+0x38>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4638      	mov	r0, r7
 80054d0:	47c0      	blx	r8
 80054d2:	4306      	orrs	r6, r0
 80054d4:	3568      	adds	r5, #104	; 0x68
 80054d6:	e7e9      	b.n	80054ac <_fwalk_sglue+0x10>

080054d8 <siprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054de:	b500      	push	{lr}
 80054e0:	b09c      	sub	sp, #112	; 0x70
 80054e2:	ab1d      	add	r3, sp, #116	; 0x74
 80054e4:	9002      	str	r0, [sp, #8]
 80054e6:	9006      	str	r0, [sp, #24]
 80054e8:	9107      	str	r1, [sp, #28]
 80054ea:	9104      	str	r1, [sp, #16]
 80054ec:	4808      	ldr	r0, [pc, #32]	; (8005510 <siprintf+0x38>)
 80054ee:	4909      	ldr	r1, [pc, #36]	; (8005514 <siprintf+0x3c>)
 80054f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f4:	9105      	str	r1, [sp, #20]
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	a902      	add	r1, sp, #8
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	f002 fbec 	bl	8007cd8 <_svfiprintf_r>
 8005500:	2200      	movs	r2, #0
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	b01c      	add	sp, #112	; 0x70
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	b003      	add	sp, #12
 800550e:	4770      	bx	lr
 8005510:	20000064 	.word	0x20000064
 8005514:	ffff0208 	.word	0xffff0208

08005518 <__sread>:
 8005518:	b510      	push	{r4, lr}
 800551a:	460c      	mov	r4, r1
 800551c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005520:	f000 f86c 	bl	80055fc <_read_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	bfab      	itete	ge
 8005528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800552a:	89a3      	ldrhlt	r3, [r4, #12]
 800552c:	181b      	addge	r3, r3, r0
 800552e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005532:	bfac      	ite	ge
 8005534:	6563      	strge	r3, [r4, #84]	; 0x54
 8005536:	81a3      	strhlt	r3, [r4, #12]
 8005538:	bd10      	pop	{r4, pc}

0800553a <__swrite>:
 800553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553e:	461f      	mov	r7, r3
 8005540:	898b      	ldrh	r3, [r1, #12]
 8005542:	4605      	mov	r5, r0
 8005544:	05db      	lsls	r3, r3, #23
 8005546:	460c      	mov	r4, r1
 8005548:	4616      	mov	r6, r2
 800554a:	d505      	bpl.n	8005558 <__swrite+0x1e>
 800554c:	2302      	movs	r3, #2
 800554e:	2200      	movs	r2, #0
 8005550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005554:	f000 f840 	bl	80055d8 <_lseek_r>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	4632      	mov	r2, r6
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	4628      	mov	r0, r5
 8005564:	463b      	mov	r3, r7
 8005566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800556a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	f000 b857 	b.w	8005620 <_write_r>

08005572 <__sseek>:
 8005572:	b510      	push	{r4, lr}
 8005574:	460c      	mov	r4, r1
 8005576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557a:	f000 f82d 	bl	80055d8 <_lseek_r>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	bf15      	itete	ne
 8005584:	6560      	strne	r0, [r4, #84]	; 0x54
 8005586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800558a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800558e:	81a3      	strheq	r3, [r4, #12]
 8005590:	bf18      	it	ne
 8005592:	81a3      	strhne	r3, [r4, #12]
 8005594:	bd10      	pop	{r4, pc}

08005596 <__sclose>:
 8005596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559a:	f000 b80d 	b.w	80055b8 <_close_r>

0800559e <memset>:
 800559e:	4603      	mov	r3, r0
 80055a0:	4402      	add	r2, r0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d100      	bne.n	80055a8 <memset+0xa>
 80055a6:	4770      	bx	lr
 80055a8:	f803 1b01 	strb.w	r1, [r3], #1
 80055ac:	e7f9      	b.n	80055a2 <memset+0x4>
	...

080055b0 <_localeconv_r>:
 80055b0:	4800      	ldr	r0, [pc, #0]	; (80055b4 <_localeconv_r+0x4>)
 80055b2:	4770      	bx	lr
 80055b4:	20000158 	.word	0x20000158

080055b8 <_close_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	2300      	movs	r3, #0
 80055bc:	4d05      	ldr	r5, [pc, #20]	; (80055d4 <_close_r+0x1c>)
 80055be:	4604      	mov	r4, r0
 80055c0:	4608      	mov	r0, r1
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	f7fc f9d4 	bl	8001970 <_close>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_close_r+0x1a>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_close_r+0x1a>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	200008d0 	.word	0x200008d0

080055d8 <_lseek_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	4d05      	ldr	r5, [pc, #20]	; (80055f8 <_lseek_r+0x20>)
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fc f9e6 	bl	80019b8 <_lseek>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_lseek_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_lseek_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	200008d0 	.word	0x200008d0

080055fc <_read_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	2200      	movs	r2, #0
 8005606:	4d05      	ldr	r5, [pc, #20]	; (800561c <_read_r+0x20>)
 8005608:	602a      	str	r2, [r5, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f7fc f977 	bl	80018fe <_read>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_read_r+0x1e>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_read_r+0x1e>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	200008d0 	.word	0x200008d0

08005620 <_write_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	2200      	movs	r2, #0
 800562a:	4d05      	ldr	r5, [pc, #20]	; (8005640 <_write_r+0x20>)
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fc f982 	bl	8001938 <_write>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_write_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_write_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	200008d0 	.word	0x200008d0

08005644 <__errno>:
 8005644:	4b01      	ldr	r3, [pc, #4]	; (800564c <__errno+0x8>)
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000064 	.word	0x20000064

08005650 <__libc_init_array>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	2600      	movs	r6, #0
 8005654:	4d0c      	ldr	r5, [pc, #48]	; (8005688 <__libc_init_array+0x38>)
 8005656:	4c0d      	ldr	r4, [pc, #52]	; (800568c <__libc_init_array+0x3c>)
 8005658:	1b64      	subs	r4, r4, r5
 800565a:	10a4      	asrs	r4, r4, #2
 800565c:	42a6      	cmp	r6, r4
 800565e:	d109      	bne.n	8005674 <__libc_init_array+0x24>
 8005660:	f003 fbbe 	bl	8008de0 <_init>
 8005664:	2600      	movs	r6, #0
 8005666:	4d0a      	ldr	r5, [pc, #40]	; (8005690 <__libc_init_array+0x40>)
 8005668:	4c0a      	ldr	r4, [pc, #40]	; (8005694 <__libc_init_array+0x44>)
 800566a:	1b64      	subs	r4, r4, r5
 800566c:	10a4      	asrs	r4, r4, #2
 800566e:	42a6      	cmp	r6, r4
 8005670:	d105      	bne.n	800567e <__libc_init_array+0x2e>
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f855 3b04 	ldr.w	r3, [r5], #4
 8005678:	4798      	blx	r3
 800567a:	3601      	adds	r6, #1
 800567c:	e7ee      	b.n	800565c <__libc_init_array+0xc>
 800567e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005682:	4798      	blx	r3
 8005684:	3601      	adds	r6, #1
 8005686:	e7f2      	b.n	800566e <__libc_init_array+0x1e>
 8005688:	08009260 	.word	0x08009260
 800568c:	08009260 	.word	0x08009260
 8005690:	08009260 	.word	0x08009260
 8005694:	08009264 	.word	0x08009264

08005698 <__retarget_lock_acquire_recursive>:
 8005698:	4770      	bx	lr

0800569a <__retarget_lock_release_recursive>:
 800569a:	4770      	bx	lr

0800569c <memchr>:
 800569c:	4603      	mov	r3, r0
 800569e:	b510      	push	{r4, lr}
 80056a0:	b2c9      	uxtb	r1, r1
 80056a2:	4402      	add	r2, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	4618      	mov	r0, r3
 80056a8:	d101      	bne.n	80056ae <memchr+0x12>
 80056aa:	2000      	movs	r0, #0
 80056ac:	e003      	b.n	80056b6 <memchr+0x1a>
 80056ae:	7804      	ldrb	r4, [r0, #0]
 80056b0:	3301      	adds	r3, #1
 80056b2:	428c      	cmp	r4, r1
 80056b4:	d1f6      	bne.n	80056a4 <memchr+0x8>
 80056b6:	bd10      	pop	{r4, pc}

080056b8 <memcpy>:
 80056b8:	440a      	add	r2, r1
 80056ba:	4291      	cmp	r1, r2
 80056bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80056c0:	d100      	bne.n	80056c4 <memcpy+0xc>
 80056c2:	4770      	bx	lr
 80056c4:	b510      	push	{r4, lr}
 80056c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ca:	4291      	cmp	r1, r2
 80056cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056d0:	d1f9      	bne.n	80056c6 <memcpy+0xe>
 80056d2:	bd10      	pop	{r4, pc}

080056d4 <nanf>:
 80056d4:	4800      	ldr	r0, [pc, #0]	; (80056d8 <nanf+0x4>)
 80056d6:	4770      	bx	lr
 80056d8:	7fc00000 	.word	0x7fc00000

080056dc <quorem>:
 80056dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e0:	6903      	ldr	r3, [r0, #16]
 80056e2:	690c      	ldr	r4, [r1, #16]
 80056e4:	4607      	mov	r7, r0
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	db7f      	blt.n	80057ea <quorem+0x10e>
 80056ea:	3c01      	subs	r4, #1
 80056ec:	f100 0514 	add.w	r5, r0, #20
 80056f0:	f101 0814 	add.w	r8, r1, #20
 80056f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005702:	3301      	adds	r3, #1
 8005704:	429a      	cmp	r2, r3
 8005706:	fbb2 f6f3 	udiv	r6, r2, r3
 800570a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800570e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005712:	d331      	bcc.n	8005778 <quorem+0x9c>
 8005714:	f04f 0e00 	mov.w	lr, #0
 8005718:	4640      	mov	r0, r8
 800571a:	46ac      	mov	ip, r5
 800571c:	46f2      	mov	sl, lr
 800571e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005722:	b293      	uxth	r3, r2
 8005724:	fb06 e303 	mla	r3, r6, r3, lr
 8005728:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800572c:	0c1a      	lsrs	r2, r3, #16
 800572e:	b29b      	uxth	r3, r3
 8005730:	fb06 220e 	mla	r2, r6, lr, r2
 8005734:	ebaa 0303 	sub.w	r3, sl, r3
 8005738:	f8dc a000 	ldr.w	sl, [ip]
 800573c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005740:	fa1f fa8a 	uxth.w	sl, sl
 8005744:	4453      	add	r3, sl
 8005746:	f8dc a000 	ldr.w	sl, [ip]
 800574a:	b292      	uxth	r2, r2
 800574c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005754:	b29b      	uxth	r3, r3
 8005756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800575a:	4581      	cmp	r9, r0
 800575c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005760:	f84c 3b04 	str.w	r3, [ip], #4
 8005764:	d2db      	bcs.n	800571e <quorem+0x42>
 8005766:	f855 300b 	ldr.w	r3, [r5, fp]
 800576a:	b92b      	cbnz	r3, 8005778 <quorem+0x9c>
 800576c:	9b01      	ldr	r3, [sp, #4]
 800576e:	3b04      	subs	r3, #4
 8005770:	429d      	cmp	r5, r3
 8005772:	461a      	mov	r2, r3
 8005774:	d32d      	bcc.n	80057d2 <quorem+0xf6>
 8005776:	613c      	str	r4, [r7, #16]
 8005778:	4638      	mov	r0, r7
 800577a:	f001 f9dd 	bl	8006b38 <__mcmp>
 800577e:	2800      	cmp	r0, #0
 8005780:	db23      	blt.n	80057ca <quorem+0xee>
 8005782:	4629      	mov	r1, r5
 8005784:	2000      	movs	r0, #0
 8005786:	3601      	adds	r6, #1
 8005788:	f858 2b04 	ldr.w	r2, [r8], #4
 800578c:	f8d1 c000 	ldr.w	ip, [r1]
 8005790:	b293      	uxth	r3, r2
 8005792:	1ac3      	subs	r3, r0, r3
 8005794:	0c12      	lsrs	r2, r2, #16
 8005796:	fa1f f08c 	uxth.w	r0, ip
 800579a:	4403      	add	r3, r0
 800579c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80057a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057aa:	45c1      	cmp	r9, r8
 80057ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057b0:	f841 3b04 	str.w	r3, [r1], #4
 80057b4:	d2e8      	bcs.n	8005788 <quorem+0xac>
 80057b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057be:	b922      	cbnz	r2, 80057ca <quorem+0xee>
 80057c0:	3b04      	subs	r3, #4
 80057c2:	429d      	cmp	r5, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	d30a      	bcc.n	80057de <quorem+0x102>
 80057c8:	613c      	str	r4, [r7, #16]
 80057ca:	4630      	mov	r0, r6
 80057cc:	b003      	add	sp, #12
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d1cd      	bne.n	8005776 <quorem+0x9a>
 80057da:	3c01      	subs	r4, #1
 80057dc:	e7c8      	b.n	8005770 <quorem+0x94>
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d1f0      	bne.n	80057c8 <quorem+0xec>
 80057e6:	3c01      	subs	r4, #1
 80057e8:	e7eb      	b.n	80057c2 <quorem+0xe6>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7ee      	b.n	80057cc <quorem+0xf0>
	...

080057f0 <_dtoa_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	461f      	mov	r7, r3
 80057f8:	69c4      	ldr	r4, [r0, #28]
 80057fa:	b099      	sub	sp, #100	; 0x64
 80057fc:	4605      	mov	r5, r0
 80057fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005802:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005806:	b974      	cbnz	r4, 8005826 <_dtoa_r+0x36>
 8005808:	2010      	movs	r0, #16
 800580a:	f000 fe1d 	bl	8006448 <malloc>
 800580e:	4602      	mov	r2, r0
 8005810:	61e8      	str	r0, [r5, #28]
 8005812:	b920      	cbnz	r0, 800581e <_dtoa_r+0x2e>
 8005814:	21ef      	movs	r1, #239	; 0xef
 8005816:	4bac      	ldr	r3, [pc, #688]	; (8005ac8 <_dtoa_r+0x2d8>)
 8005818:	48ac      	ldr	r0, [pc, #688]	; (8005acc <_dtoa_r+0x2dc>)
 800581a:	f002 fc47 	bl	80080ac <__assert_func>
 800581e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005822:	6004      	str	r4, [r0, #0]
 8005824:	60c4      	str	r4, [r0, #12]
 8005826:	69eb      	ldr	r3, [r5, #28]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	b151      	cbz	r1, 8005842 <_dtoa_r+0x52>
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	2301      	movs	r3, #1
 8005830:	4093      	lsls	r3, r2
 8005832:	604a      	str	r2, [r1, #4]
 8005834:	608b      	str	r3, [r1, #8]
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fefa 	bl	8006630 <_Bfree>
 800583c:	2200      	movs	r2, #0
 800583e:	69eb      	ldr	r3, [r5, #28]
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	1e3b      	subs	r3, r7, #0
 8005844:	bfaf      	iteee	ge
 8005846:	2300      	movge	r3, #0
 8005848:	2201      	movlt	r2, #1
 800584a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800584e:	9305      	strlt	r3, [sp, #20]
 8005850:	bfa8      	it	ge
 8005852:	f8c8 3000 	strge.w	r3, [r8]
 8005856:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800585a:	4b9d      	ldr	r3, [pc, #628]	; (8005ad0 <_dtoa_r+0x2e0>)
 800585c:	bfb8      	it	lt
 800585e:	f8c8 2000 	strlt.w	r2, [r8]
 8005862:	ea33 0309 	bics.w	r3, r3, r9
 8005866:	d119      	bne.n	800589c <_dtoa_r+0xac>
 8005868:	f242 730f 	movw	r3, #9999	; 0x270f
 800586c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005874:	4333      	orrs	r3, r6
 8005876:	f000 8589 	beq.w	800638c <_dtoa_r+0xb9c>
 800587a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800587c:	b953      	cbnz	r3, 8005894 <_dtoa_r+0xa4>
 800587e:	4b95      	ldr	r3, [pc, #596]	; (8005ad4 <_dtoa_r+0x2e4>)
 8005880:	e023      	b.n	80058ca <_dtoa_r+0xda>
 8005882:	4b95      	ldr	r3, [pc, #596]	; (8005ad8 <_dtoa_r+0x2e8>)
 8005884:	9303      	str	r3, [sp, #12]
 8005886:	3308      	adds	r3, #8
 8005888:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	9803      	ldr	r0, [sp, #12]
 800588e:	b019      	add	sp, #100	; 0x64
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	4b8f      	ldr	r3, [pc, #572]	; (8005ad4 <_dtoa_r+0x2e4>)
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	3303      	adds	r3, #3
 800589a:	e7f5      	b.n	8005888 <_dtoa_r+0x98>
 800589c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80058a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80058a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fb f8e8 	bl	8000a80 <__aeabi_dcmpeq>
 80058b0:	4680      	mov	r8, r0
 80058b2:	b160      	cbz	r0, 80058ce <_dtoa_r+0xde>
 80058b4:	2301      	movs	r3, #1
 80058b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8562 	beq.w	8006386 <_dtoa_r+0xb96>
 80058c2:	4b86      	ldr	r3, [pc, #536]	; (8005adc <_dtoa_r+0x2ec>)
 80058c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	9303      	str	r3, [sp, #12]
 80058cc:	e7de      	b.n	800588c <_dtoa_r+0x9c>
 80058ce:	ab16      	add	r3, sp, #88	; 0x58
 80058d0:	9301      	str	r3, [sp, #4]
 80058d2:	ab17      	add	r3, sp, #92	; 0x5c
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	4628      	mov	r0, r5
 80058d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058dc:	f001 fa3c 	bl	8006d58 <__d2b>
 80058e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058e4:	4682      	mov	sl, r0
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d07e      	beq.n	80059e8 <_dtoa_r+0x1f8>
 80058ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005900:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005904:	4619      	mov	r1, r3
 8005906:	2200      	movs	r2, #0
 8005908:	4b75      	ldr	r3, [pc, #468]	; (8005ae0 <_dtoa_r+0x2f0>)
 800590a:	f7fa fc99 	bl	8000240 <__aeabi_dsub>
 800590e:	a368      	add	r3, pc, #416	; (adr r3, 8005ab0 <_dtoa_r+0x2c0>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fe4c 	bl	80005b0 <__aeabi_dmul>
 8005918:	a367      	add	r3, pc, #412	; (adr r3, 8005ab8 <_dtoa_r+0x2c8>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fc91 	bl	8000244 <__adddf3>
 8005922:	4606      	mov	r6, r0
 8005924:	4620      	mov	r0, r4
 8005926:	460f      	mov	r7, r1
 8005928:	f7fa fdd8 	bl	80004dc <__aeabi_i2d>
 800592c:	a364      	add	r3, pc, #400	; (adr r3, 8005ac0 <_dtoa_r+0x2d0>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fe3d 	bl	80005b0 <__aeabi_dmul>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fc81 	bl	8000244 <__adddf3>
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	f7fb f8e3 	bl	8000b10 <__aeabi_d2iz>
 800594a:	2200      	movs	r2, #0
 800594c:	4683      	mov	fp, r0
 800594e:	2300      	movs	r3, #0
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fb f89e 	bl	8000a94 <__aeabi_dcmplt>
 8005958:	b148      	cbz	r0, 800596e <_dtoa_r+0x17e>
 800595a:	4658      	mov	r0, fp
 800595c:	f7fa fdbe 	bl	80004dc <__aeabi_i2d>
 8005960:	4632      	mov	r2, r6
 8005962:	463b      	mov	r3, r7
 8005964:	f7fb f88c 	bl	8000a80 <__aeabi_dcmpeq>
 8005968:	b908      	cbnz	r0, 800596e <_dtoa_r+0x17e>
 800596a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800596e:	f1bb 0f16 	cmp.w	fp, #22
 8005972:	d857      	bhi.n	8005a24 <_dtoa_r+0x234>
 8005974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005978:	4b5a      	ldr	r3, [pc, #360]	; (8005ae4 <_dtoa_r+0x2f4>)
 800597a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	f7fb f887 	bl	8000a94 <__aeabi_dcmplt>
 8005986:	2800      	cmp	r0, #0
 8005988:	d04e      	beq.n	8005a28 <_dtoa_r+0x238>
 800598a:	2300      	movs	r3, #0
 800598c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005990:	930f      	str	r3, [sp, #60]	; 0x3c
 8005992:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005994:	1b1b      	subs	r3, r3, r4
 8005996:	1e5a      	subs	r2, r3, #1
 8005998:	bf46      	itte	mi
 800599a:	f1c3 0901 	rsbmi	r9, r3, #1
 800599e:	2300      	movmi	r3, #0
 80059a0:	f04f 0900 	movpl.w	r9, #0
 80059a4:	9209      	str	r2, [sp, #36]	; 0x24
 80059a6:	bf48      	it	mi
 80059a8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80059aa:	f1bb 0f00 	cmp.w	fp, #0
 80059ae:	db3d      	blt.n	8005a2c <_dtoa_r+0x23c>
 80059b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80059b6:	445b      	add	r3, fp
 80059b8:	9309      	str	r3, [sp, #36]	; 0x24
 80059ba:	2300      	movs	r3, #0
 80059bc:	930a      	str	r3, [sp, #40]	; 0x28
 80059be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c0:	2b09      	cmp	r3, #9
 80059c2:	d867      	bhi.n	8005a94 <_dtoa_r+0x2a4>
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	bfc4      	itt	gt
 80059c8:	3b04      	subgt	r3, #4
 80059ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80059cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059ce:	bfc8      	it	gt
 80059d0:	2400      	movgt	r4, #0
 80059d2:	f1a3 0302 	sub.w	r3, r3, #2
 80059d6:	bfd8      	it	le
 80059d8:	2401      	movle	r4, #1
 80059da:	2b03      	cmp	r3, #3
 80059dc:	f200 8086 	bhi.w	8005aec <_dtoa_r+0x2fc>
 80059e0:	e8df f003 	tbb	[pc, r3]
 80059e4:	5637392c 	.word	0x5637392c
 80059e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059ec:	441c      	add	r4, r3
 80059ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	bfc1      	itttt	gt
 80059f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059fa:	fa09 f903 	lslgt.w	r9, r9, r3
 80059fe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005a02:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a06:	bfd6      	itet	le
 8005a08:	f1c3 0320 	rsble	r3, r3, #32
 8005a0c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005a10:	fa06 f003 	lslle.w	r0, r6, r3
 8005a14:	f7fa fd52 	bl	80004bc <__aeabi_ui2d>
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005a1e:	3c01      	subs	r4, #1
 8005a20:	9213      	str	r2, [sp, #76]	; 0x4c
 8005a22:	e76f      	b.n	8005904 <_dtoa_r+0x114>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e7b3      	b.n	8005990 <_dtoa_r+0x1a0>
 8005a28:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a2a:	e7b2      	b.n	8005992 <_dtoa_r+0x1a2>
 8005a2c:	f1cb 0300 	rsb	r3, fp, #0
 8005a30:	930a      	str	r3, [sp, #40]	; 0x28
 8005a32:	2300      	movs	r3, #0
 8005a34:	eba9 090b 	sub.w	r9, r9, fp
 8005a38:	930e      	str	r3, [sp, #56]	; 0x38
 8005a3a:	e7c0      	b.n	80059be <_dtoa_r+0x1ce>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dc55      	bgt.n	8005af2 <_dtoa_r+0x302>
 8005a46:	2301      	movs	r3, #1
 8005a48:	461a      	mov	r2, r3
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	9308      	str	r3, [sp, #32]
 8005a4e:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a50:	e00b      	b.n	8005a6a <_dtoa_r+0x27a>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e7f3      	b.n	8005a3e <_dtoa_r+0x24e>
 8005a56:	2300      	movs	r3, #0
 8005a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a5c:	445b      	add	r3, fp
 8005a5e:	9306      	str	r3, [sp, #24]
 8005a60:	3301      	adds	r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	9308      	str	r3, [sp, #32]
 8005a66:	bfb8      	it	lt
 8005a68:	2301      	movlt	r3, #1
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	69e8      	ldr	r0, [r5, #28]
 8005a70:	f102 0614 	add.w	r6, r2, #20
 8005a74:	429e      	cmp	r6, r3
 8005a76:	d940      	bls.n	8005afa <_dtoa_r+0x30a>
 8005a78:	6041      	str	r1, [r0, #4]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 fd98 	bl	80065b0 <_Balloc>
 8005a80:	9003      	str	r0, [sp, #12]
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d13c      	bne.n	8005b00 <_dtoa_r+0x310>
 8005a86:	4602      	mov	r2, r0
 8005a88:	f240 11af 	movw	r1, #431	; 0x1af
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <_dtoa_r+0x2f8>)
 8005a8e:	e6c3      	b.n	8005818 <_dtoa_r+0x28>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e7e1      	b.n	8005a58 <_dtoa_r+0x268>
 8005a94:	2401      	movs	r4, #1
 8005a96:	2300      	movs	r3, #0
 8005a98:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a9a:	9322      	str	r3, [sp, #136]	; 0x88
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	9306      	str	r3, [sp, #24]
 8005aa4:	9308      	str	r3, [sp, #32]
 8005aa6:	2312      	movs	r3, #18
 8005aa8:	e7d1      	b.n	8005a4e <_dtoa_r+0x25e>
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w
 8005ab0:	636f4361 	.word	0x636f4361
 8005ab4:	3fd287a7 	.word	0x3fd287a7
 8005ab8:	8b60c8b3 	.word	0x8b60c8b3
 8005abc:	3fc68a28 	.word	0x3fc68a28
 8005ac0:	509f79fb 	.word	0x509f79fb
 8005ac4:	3fd34413 	.word	0x3fd34413
 8005ac8:	08008e7c 	.word	0x08008e7c
 8005acc:	08008e93 	.word	0x08008e93
 8005ad0:	7ff00000 	.word	0x7ff00000
 8005ad4:	08008e78 	.word	0x08008e78
 8005ad8:	08008e6f 	.word	0x08008e6f
 8005adc:	08008e47 	.word	0x08008e47
 8005ae0:	3ff80000 	.word	0x3ff80000
 8005ae4:	08008f80 	.word	0x08008f80
 8005ae8:	08008eeb 	.word	0x08008eeb
 8005aec:	2301      	movs	r3, #1
 8005aee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005af0:	e7d4      	b.n	8005a9c <_dtoa_r+0x2ac>
 8005af2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005af4:	9306      	str	r3, [sp, #24]
 8005af6:	9308      	str	r3, [sp, #32]
 8005af8:	e7b7      	b.n	8005a6a <_dtoa_r+0x27a>
 8005afa:	3101      	adds	r1, #1
 8005afc:	0052      	lsls	r2, r2, #1
 8005afe:	e7b7      	b.n	8005a70 <_dtoa_r+0x280>
 8005b00:	69eb      	ldr	r3, [r5, #28]
 8005b02:	9a03      	ldr	r2, [sp, #12]
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	9b08      	ldr	r3, [sp, #32]
 8005b08:	2b0e      	cmp	r3, #14
 8005b0a:	f200 80a8 	bhi.w	8005c5e <_dtoa_r+0x46e>
 8005b0e:	2c00      	cmp	r4, #0
 8005b10:	f000 80a5 	beq.w	8005c5e <_dtoa_r+0x46e>
 8005b14:	f1bb 0f00 	cmp.w	fp, #0
 8005b18:	dd34      	ble.n	8005b84 <_dtoa_r+0x394>
 8005b1a:	4b9a      	ldr	r3, [pc, #616]	; (8005d84 <_dtoa_r+0x594>)
 8005b1c:	f00b 020f 	and.w	r2, fp, #15
 8005b20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005b28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b30:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005b34:	d016      	beq.n	8005b64 <_dtoa_r+0x374>
 8005b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b3a:	4b93      	ldr	r3, [pc, #588]	; (8005d88 <_dtoa_r+0x598>)
 8005b3c:	2703      	movs	r7, #3
 8005b3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b42:	f7fa fe5f 	bl	8000804 <__aeabi_ddiv>
 8005b46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b4a:	f004 040f 	and.w	r4, r4, #15
 8005b4e:	4e8e      	ldr	r6, [pc, #568]	; (8005d88 <_dtoa_r+0x598>)
 8005b50:	b954      	cbnz	r4, 8005b68 <_dtoa_r+0x378>
 8005b52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b5a:	f7fa fe53 	bl	8000804 <__aeabi_ddiv>
 8005b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b62:	e029      	b.n	8005bb8 <_dtoa_r+0x3c8>
 8005b64:	2702      	movs	r7, #2
 8005b66:	e7f2      	b.n	8005b4e <_dtoa_r+0x35e>
 8005b68:	07e1      	lsls	r1, r4, #31
 8005b6a:	d508      	bpl.n	8005b7e <_dtoa_r+0x38e>
 8005b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b74:	f7fa fd1c 	bl	80005b0 <__aeabi_dmul>
 8005b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b7c:	3701      	adds	r7, #1
 8005b7e:	1064      	asrs	r4, r4, #1
 8005b80:	3608      	adds	r6, #8
 8005b82:	e7e5      	b.n	8005b50 <_dtoa_r+0x360>
 8005b84:	f000 80a5 	beq.w	8005cd2 <_dtoa_r+0x4e2>
 8005b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b8c:	f1cb 0400 	rsb	r4, fp, #0
 8005b90:	4b7c      	ldr	r3, [pc, #496]	; (8005d84 <_dtoa_r+0x594>)
 8005b92:	f004 020f 	and.w	r2, r4, #15
 8005b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fd07 	bl	80005b0 <__aeabi_dmul>
 8005ba2:	2702      	movs	r7, #2
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005baa:	4e77      	ldr	r6, [pc, #476]	; (8005d88 <_dtoa_r+0x598>)
 8005bac:	1124      	asrs	r4, r4, #4
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	f040 8084 	bne.w	8005cbc <_dtoa_r+0x4cc>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1d2      	bne.n	8005b5e <_dtoa_r+0x36e>
 8005bb8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005bbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8087 	beq.w	8005cd6 <_dtoa_r+0x4e6>
 8005bc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <_dtoa_r+0x59c>)
 8005bd0:	f7fa ff60 	bl	8000a94 <__aeabi_dcmplt>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d07e      	beq.n	8005cd6 <_dtoa_r+0x4e6>
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d07b      	beq.n	8005cd6 <_dtoa_r+0x4e6>
 8005bde:	9b06      	ldr	r3, [sp, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd38      	ble.n	8005c56 <_dtoa_r+0x466>
 8005be4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005be8:	2200      	movs	r2, #0
 8005bea:	4b69      	ldr	r3, [pc, #420]	; (8005d90 <_dtoa_r+0x5a0>)
 8005bec:	f7fa fce0 	bl	80005b0 <__aeabi_dmul>
 8005bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bf4:	9c06      	ldr	r4, [sp, #24]
 8005bf6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005bfa:	3701      	adds	r7, #1
 8005bfc:	4638      	mov	r0, r7
 8005bfe:	f7fa fc6d 	bl	80004dc <__aeabi_i2d>
 8005c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c06:	f7fa fcd3 	bl	80005b0 <__aeabi_dmul>
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4b61      	ldr	r3, [pc, #388]	; (8005d94 <_dtoa_r+0x5a4>)
 8005c0e:	f7fa fb19 	bl	8000244 <__adddf3>
 8005c12:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c1a:	9611      	str	r6, [sp, #68]	; 0x44
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d15d      	bne.n	8005cdc <_dtoa_r+0x4ec>
 8005c20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c24:	2200      	movs	r2, #0
 8005c26:	4b5c      	ldr	r3, [pc, #368]	; (8005d98 <_dtoa_r+0x5a8>)
 8005c28:	f7fa fb0a 	bl	8000240 <__aeabi_dsub>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c34:	4633      	mov	r3, r6
 8005c36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c38:	f7fa ff4a 	bl	8000ad0 <__aeabi_dcmpgt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 8295 	bne.w	800616c <_dtoa_r+0x97c>
 8005c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c4c:	f7fa ff22 	bl	8000a94 <__aeabi_dcmplt>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f040 8289 	bne.w	8006168 <_dtoa_r+0x978>
 8005c56:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f2c0 8151 	blt.w	8005f08 <_dtoa_r+0x718>
 8005c66:	f1bb 0f0e 	cmp.w	fp, #14
 8005c6a:	f300 814d 	bgt.w	8005f08 <_dtoa_r+0x718>
 8005c6e:	4b45      	ldr	r3, [pc, #276]	; (8005d84 <_dtoa_r+0x594>)
 8005c70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f280 80da 	bge.w	8005e38 <_dtoa_r+0x648>
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f300 80d6 	bgt.w	8005e38 <_dtoa_r+0x648>
 8005c8c:	f040 826b 	bne.w	8006166 <_dtoa_r+0x976>
 8005c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c94:	2200      	movs	r2, #0
 8005c96:	4b40      	ldr	r3, [pc, #256]	; (8005d98 <_dtoa_r+0x5a8>)
 8005c98:	f7fa fc8a 	bl	80005b0 <__aeabi_dmul>
 8005c9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca0:	f7fa ff0c 	bl	8000abc <__aeabi_dcmpge>
 8005ca4:	9c08      	ldr	r4, [sp, #32]
 8005ca6:	4626      	mov	r6, r4
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f040 8241 	bne.w	8006130 <_dtoa_r+0x940>
 8005cae:	2331      	movs	r3, #49	; 0x31
 8005cb0:	9f03      	ldr	r7, [sp, #12]
 8005cb2:	f10b 0b01 	add.w	fp, fp, #1
 8005cb6:	f807 3b01 	strb.w	r3, [r7], #1
 8005cba:	e23d      	b.n	8006138 <_dtoa_r+0x948>
 8005cbc:	07e2      	lsls	r2, r4, #31
 8005cbe:	d505      	bpl.n	8005ccc <_dtoa_r+0x4dc>
 8005cc0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cc4:	f7fa fc74 	bl	80005b0 <__aeabi_dmul>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	3701      	adds	r7, #1
 8005ccc:	1064      	asrs	r4, r4, #1
 8005cce:	3608      	adds	r6, #8
 8005cd0:	e76d      	b.n	8005bae <_dtoa_r+0x3be>
 8005cd2:	2702      	movs	r7, #2
 8005cd4:	e770      	b.n	8005bb8 <_dtoa_r+0x3c8>
 8005cd6:	46d8      	mov	r8, fp
 8005cd8:	9c08      	ldr	r4, [sp, #32]
 8005cda:	e78f      	b.n	8005bfc <_dtoa_r+0x40c>
 8005cdc:	9903      	ldr	r1, [sp, #12]
 8005cde:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <_dtoa_r+0x594>)
 8005ce0:	4421      	add	r1, r4
 8005ce2:	9112      	str	r1, [sp, #72]	; 0x48
 8005ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ce6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005cee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d054      	beq.n	8005da0 <_dtoa_r+0x5b0>
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	4928      	ldr	r1, [pc, #160]	; (8005d9c <_dtoa_r+0x5ac>)
 8005cfa:	f7fa fd83 	bl	8000804 <__aeabi_ddiv>
 8005cfe:	463b      	mov	r3, r7
 8005d00:	4632      	mov	r2, r6
 8005d02:	f7fa fa9d 	bl	8000240 <__aeabi_dsub>
 8005d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d0a:	9f03      	ldr	r7, [sp, #12]
 8005d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d10:	f7fa fefe 	bl	8000b10 <__aeabi_d2iz>
 8005d14:	4604      	mov	r4, r0
 8005d16:	f7fa fbe1 	bl	80004dc <__aeabi_i2d>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d22:	f7fa fa8d 	bl	8000240 <__aeabi_dsub>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	3430      	adds	r4, #48	; 0x30
 8005d2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d34:	f807 4b01 	strb.w	r4, [r7], #1
 8005d38:	f7fa feac 	bl	8000a94 <__aeabi_dcmplt>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d173      	bne.n	8005e28 <_dtoa_r+0x638>
 8005d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d44:	2000      	movs	r0, #0
 8005d46:	4911      	ldr	r1, [pc, #68]	; (8005d8c <_dtoa_r+0x59c>)
 8005d48:	f7fa fa7a 	bl	8000240 <__aeabi_dsub>
 8005d4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d50:	f7fa fea0 	bl	8000a94 <__aeabi_dcmplt>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f040 80b6 	bne.w	8005ec6 <_dtoa_r+0x6d6>
 8005d5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d5c:	429f      	cmp	r7, r3
 8005d5e:	f43f af7a 	beq.w	8005c56 <_dtoa_r+0x466>
 8005d62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d66:	2200      	movs	r2, #0
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <_dtoa_r+0x5a0>)
 8005d6a:	f7fa fc21 	bl	80005b0 <__aeabi_dmul>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <_dtoa_r+0x5a0>)
 8005d7a:	f7fa fc19 	bl	80005b0 <__aeabi_dmul>
 8005d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d82:	e7c3      	b.n	8005d0c <_dtoa_r+0x51c>
 8005d84:	08008f80 	.word	0x08008f80
 8005d88:	08008f58 	.word	0x08008f58
 8005d8c:	3ff00000 	.word	0x3ff00000
 8005d90:	40240000 	.word	0x40240000
 8005d94:	401c0000 	.word	0x401c0000
 8005d98:	40140000 	.word	0x40140000
 8005d9c:	3fe00000 	.word	0x3fe00000
 8005da0:	4630      	mov	r0, r6
 8005da2:	4639      	mov	r1, r7
 8005da4:	f7fa fc04 	bl	80005b0 <__aeabi_dmul>
 8005da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005daa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005dae:	9c03      	ldr	r4, [sp, #12]
 8005db0:	9314      	str	r3, [sp, #80]	; 0x50
 8005db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005db6:	f7fa feab 	bl	8000b10 <__aeabi_d2iz>
 8005dba:	9015      	str	r0, [sp, #84]	; 0x54
 8005dbc:	f7fa fb8e 	bl	80004dc <__aeabi_i2d>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dc8:	f7fa fa3a 	bl	8000240 <__aeabi_dsub>
 8005dcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dce:	4606      	mov	r6, r0
 8005dd0:	3330      	adds	r3, #48	; 0x30
 8005dd2:	f804 3b01 	strb.w	r3, [r4], #1
 8005dd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dd8:	460f      	mov	r7, r1
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	d124      	bne.n	8005e2c <_dtoa_r+0x63c>
 8005de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005de6:	4baf      	ldr	r3, [pc, #700]	; (80060a4 <_dtoa_r+0x8b4>)
 8005de8:	f7fa fa2c 	bl	8000244 <__adddf3>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4630      	mov	r0, r6
 8005df2:	4639      	mov	r1, r7
 8005df4:	f7fa fe6c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d163      	bne.n	8005ec4 <_dtoa_r+0x6d4>
 8005dfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e00:	2000      	movs	r0, #0
 8005e02:	49a8      	ldr	r1, [pc, #672]	; (80060a4 <_dtoa_r+0x8b4>)
 8005e04:	f7fa fa1c 	bl	8000240 <__aeabi_dsub>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa fe40 	bl	8000a94 <__aeabi_dcmplt>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	f43f af1e 	beq.w	8005c56 <_dtoa_r+0x466>
 8005e1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005e1c:	1e7b      	subs	r3, r7, #1
 8005e1e:	9314      	str	r3, [sp, #80]	; 0x50
 8005e20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e24:	2b30      	cmp	r3, #48	; 0x30
 8005e26:	d0f8      	beq.n	8005e1a <_dtoa_r+0x62a>
 8005e28:	46c3      	mov	fp, r8
 8005e2a:	e03b      	b.n	8005ea4 <_dtoa_r+0x6b4>
 8005e2c:	4b9e      	ldr	r3, [pc, #632]	; (80060a8 <_dtoa_r+0x8b8>)
 8005e2e:	f7fa fbbf 	bl	80005b0 <__aeabi_dmul>
 8005e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e36:	e7bc      	b.n	8005db2 <_dtoa_r+0x5c2>
 8005e38:	9f03      	ldr	r7, [sp, #12]
 8005e3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f7fa fcdd 	bl	8000804 <__aeabi_ddiv>
 8005e4a:	f7fa fe61 	bl	8000b10 <__aeabi_d2iz>
 8005e4e:	4604      	mov	r4, r0
 8005e50:	f7fa fb44 	bl	80004dc <__aeabi_i2d>
 8005e54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e58:	f7fa fbaa 	bl	80005b0 <__aeabi_dmul>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4640      	mov	r0, r8
 8005e62:	4649      	mov	r1, r9
 8005e64:	f7fa f9ec 	bl	8000240 <__aeabi_dsub>
 8005e68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e6c:	f807 6b01 	strb.w	r6, [r7], #1
 8005e70:	9e03      	ldr	r6, [sp, #12]
 8005e72:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e76:	1bbe      	subs	r6, r7, r6
 8005e78:	45b4      	cmp	ip, r6
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	d136      	bne.n	8005eee <_dtoa_r+0x6fe>
 8005e80:	f7fa f9e0 	bl	8000244 <__adddf3>
 8005e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4689      	mov	r9, r1
 8005e8c:	f7fa fe20 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e90:	bb58      	cbnz	r0, 8005eea <_dtoa_r+0x6fa>
 8005e92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e96:	4640      	mov	r0, r8
 8005e98:	4649      	mov	r1, r9
 8005e9a:	f7fa fdf1 	bl	8000a80 <__aeabi_dcmpeq>
 8005e9e:	b108      	cbz	r0, 8005ea4 <_dtoa_r+0x6b4>
 8005ea0:	07e3      	lsls	r3, r4, #31
 8005ea2:	d422      	bmi.n	8005eea <_dtoa_r+0x6fa>
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fbc2 	bl	8006630 <_Bfree>
 8005eac:	2300      	movs	r3, #0
 8005eae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005eb0:	703b      	strb	r3, [r7, #0]
 8005eb2:	f10b 0301 	add.w	r3, fp, #1
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f43f ace6 	beq.w	800588c <_dtoa_r+0x9c>
 8005ec0:	601f      	str	r7, [r3, #0]
 8005ec2:	e4e3      	b.n	800588c <_dtoa_r+0x9c>
 8005ec4:	4627      	mov	r7, r4
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	461f      	mov	r7, r3
 8005eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ece:	2a39      	cmp	r2, #57	; 0x39
 8005ed0:	d107      	bne.n	8005ee2 <_dtoa_r+0x6f2>
 8005ed2:	9a03      	ldr	r2, [sp, #12]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1f7      	bne.n	8005ec8 <_dtoa_r+0x6d8>
 8005ed8:	2230      	movs	r2, #48	; 0x30
 8005eda:	9903      	ldr	r1, [sp, #12]
 8005edc:	f108 0801 	add.w	r8, r8, #1
 8005ee0:	700a      	strb	r2, [r1, #0]
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	3201      	adds	r2, #1
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	e79e      	b.n	8005e28 <_dtoa_r+0x638>
 8005eea:	46d8      	mov	r8, fp
 8005eec:	e7eb      	b.n	8005ec6 <_dtoa_r+0x6d6>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4b6d      	ldr	r3, [pc, #436]	; (80060a8 <_dtoa_r+0x8b8>)
 8005ef2:	f7fa fb5d 	bl	80005b0 <__aeabi_dmul>
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4680      	mov	r8, r0
 8005efc:	4689      	mov	r9, r1
 8005efe:	f7fa fdbf 	bl	8000a80 <__aeabi_dcmpeq>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d09b      	beq.n	8005e3e <_dtoa_r+0x64e>
 8005f06:	e7cd      	b.n	8005ea4 <_dtoa_r+0x6b4>
 8005f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	f000 80c4 	beq.w	8006098 <_dtoa_r+0x8a8>
 8005f10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f12:	2a01      	cmp	r2, #1
 8005f14:	f300 80a8 	bgt.w	8006068 <_dtoa_r+0x878>
 8005f18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	f000 80a0 	beq.w	8006060 <_dtoa_r+0x870>
 8005f20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f24:	464f      	mov	r7, r9
 8005f26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	441a      	add	r2, r3
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4499      	add	r9, r3
 8005f32:	9209      	str	r2, [sp, #36]	; 0x24
 8005f34:	f000 fc7c 	bl	8006830 <__i2b>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	b15f      	cbz	r7, 8005f54 <_dtoa_r+0x764>
 8005f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	dd08      	ble.n	8005f54 <_dtoa_r+0x764>
 8005f42:	42bb      	cmp	r3, r7
 8005f44:	bfa8      	it	ge
 8005f46:	463b      	movge	r3, r7
 8005f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f4a:	eba9 0903 	sub.w	r9, r9, r3
 8005f4e:	1aff      	subs	r7, r7, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	9309      	str	r3, [sp, #36]	; 0x24
 8005f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f56:	b1f3      	cbz	r3, 8005f96 <_dtoa_r+0x7a6>
 8005f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80a0 	beq.w	80060a0 <_dtoa_r+0x8b0>
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	dd10      	ble.n	8005f86 <_dtoa_r+0x796>
 8005f64:	4631      	mov	r1, r6
 8005f66:	4622      	mov	r2, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fd1f 	bl	80069ac <__pow5mult>
 8005f6e:	4652      	mov	r2, sl
 8005f70:	4601      	mov	r1, r0
 8005f72:	4606      	mov	r6, r0
 8005f74:	4628      	mov	r0, r5
 8005f76:	f000 fc71 	bl	800685c <__multiply>
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	4651      	mov	r1, sl
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 fb56 	bl	8006630 <_Bfree>
 8005f84:	46c2      	mov	sl, r8
 8005f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f88:	1b1a      	subs	r2, r3, r4
 8005f8a:	d004      	beq.n	8005f96 <_dtoa_r+0x7a6>
 8005f8c:	4651      	mov	r1, sl
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fd0c 	bl	80069ac <__pow5mult>
 8005f94:	4682      	mov	sl, r0
 8005f96:	2101      	movs	r1, #1
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f000 fc49 	bl	8006830 <__i2b>
 8005f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f340 8082 	ble.w	80060ac <_dtoa_r+0x8bc>
 8005fa8:	461a      	mov	r2, r3
 8005faa:	4601      	mov	r1, r0
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 fcfd 	bl	80069ac <__pow5mult>
 8005fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	dd7b      	ble.n	80060b2 <_dtoa_r+0x8c2>
 8005fba:	f04f 0800 	mov.w	r8, #0
 8005fbe:	6923      	ldr	r3, [r4, #16]
 8005fc0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fc4:	6918      	ldr	r0, [r3, #16]
 8005fc6:	f000 fbe5 	bl	8006794 <__hi0bits>
 8005fca:	f1c0 0020 	rsb	r0, r0, #32
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	4418      	add	r0, r3
 8005fd2:	f010 001f 	ands.w	r0, r0, #31
 8005fd6:	f000 8092 	beq.w	80060fe <_dtoa_r+0x90e>
 8005fda:	f1c0 0320 	rsb	r3, r0, #32
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	f340 8085 	ble.w	80060ee <_dtoa_r+0x8fe>
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	f1c0 001c 	rsb	r0, r0, #28
 8005fea:	4403      	add	r3, r0
 8005fec:	4481      	add	r9, r0
 8005fee:	4407      	add	r7, r0
 8005ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff2:	f1b9 0f00 	cmp.w	r9, #0
 8005ff6:	dd05      	ble.n	8006004 <_dtoa_r+0x814>
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	464a      	mov	r2, r9
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	f000 fd2f 	bl	8006a60 <__lshift>
 8006002:	4682      	mov	sl, r0
 8006004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	dd05      	ble.n	8006016 <_dtoa_r+0x826>
 800600a:	4621      	mov	r1, r4
 800600c:	461a      	mov	r2, r3
 800600e:	4628      	mov	r0, r5
 8006010:	f000 fd26 	bl	8006a60 <__lshift>
 8006014:	4604      	mov	r4, r0
 8006016:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d072      	beq.n	8006102 <_dtoa_r+0x912>
 800601c:	4621      	mov	r1, r4
 800601e:	4650      	mov	r0, sl
 8006020:	f000 fd8a 	bl	8006b38 <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	da6c      	bge.n	8006102 <_dtoa_r+0x912>
 8006028:	2300      	movs	r3, #0
 800602a:	4651      	mov	r1, sl
 800602c:	220a      	movs	r2, #10
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fb20 	bl	8006674 <__multadd>
 8006034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006036:	4682      	mov	sl, r0
 8006038:	f10b 3bff 	add.w	fp, fp, #4294967295
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 81ac 	beq.w	800639a <_dtoa_r+0xbaa>
 8006042:	2300      	movs	r3, #0
 8006044:	4631      	mov	r1, r6
 8006046:	220a      	movs	r2, #10
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fb13 	bl	8006674 <__multadd>
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	4606      	mov	r6, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f300 8093 	bgt.w	800617e <_dtoa_r+0x98e>
 8006058:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800605a:	2b02      	cmp	r3, #2
 800605c:	dc59      	bgt.n	8006112 <_dtoa_r+0x922>
 800605e:	e08e      	b.n	800617e <_dtoa_r+0x98e>
 8006060:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006062:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006066:	e75d      	b.n	8005f24 <_dtoa_r+0x734>
 8006068:	9b08      	ldr	r3, [sp, #32]
 800606a:	1e5c      	subs	r4, r3, #1
 800606c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800606e:	42a3      	cmp	r3, r4
 8006070:	bfbf      	itttt	lt
 8006072:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006074:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006076:	1ae3      	sublt	r3, r4, r3
 8006078:	18d2      	addlt	r2, r2, r3
 800607a:	bfa8      	it	ge
 800607c:	1b1c      	subge	r4, r3, r4
 800607e:	9b08      	ldr	r3, [sp, #32]
 8006080:	bfbe      	ittt	lt
 8006082:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006084:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006086:	2400      	movlt	r4, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	bfb5      	itete	lt
 800608c:	eba9 0703 	sublt.w	r7, r9, r3
 8006090:	464f      	movge	r7, r9
 8006092:	2300      	movlt	r3, #0
 8006094:	9b08      	ldrge	r3, [sp, #32]
 8006096:	e747      	b.n	8005f28 <_dtoa_r+0x738>
 8006098:	464f      	mov	r7, r9
 800609a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800609c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800609e:	e74c      	b.n	8005f3a <_dtoa_r+0x74a>
 80060a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a2:	e773      	b.n	8005f8c <_dtoa_r+0x79c>
 80060a4:	3fe00000 	.word	0x3fe00000
 80060a8:	40240000 	.word	0x40240000
 80060ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	dc18      	bgt.n	80060e4 <_dtoa_r+0x8f4>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	b9b3      	cbnz	r3, 80060e4 <_dtoa_r+0x8f4>
 80060b6:	9b05      	ldr	r3, [sp, #20]
 80060b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060bc:	b993      	cbnz	r3, 80060e4 <_dtoa_r+0x8f4>
 80060be:	9b05      	ldr	r3, [sp, #20]
 80060c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060c4:	0d1b      	lsrs	r3, r3, #20
 80060c6:	051b      	lsls	r3, r3, #20
 80060c8:	b17b      	cbz	r3, 80060ea <_dtoa_r+0x8fa>
 80060ca:	f04f 0801 	mov.w	r8, #1
 80060ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d0:	f109 0901 	add.w	r9, r9, #1
 80060d4:	3301      	adds	r3, #1
 80060d6:	9309      	str	r3, [sp, #36]	; 0x24
 80060d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f47f af6f 	bne.w	8005fbe <_dtoa_r+0x7ce>
 80060e0:	2001      	movs	r0, #1
 80060e2:	e774      	b.n	8005fce <_dtoa_r+0x7de>
 80060e4:	f04f 0800 	mov.w	r8, #0
 80060e8:	e7f6      	b.n	80060d8 <_dtoa_r+0x8e8>
 80060ea:	4698      	mov	r8, r3
 80060ec:	e7f4      	b.n	80060d8 <_dtoa_r+0x8e8>
 80060ee:	d080      	beq.n	8005ff2 <_dtoa_r+0x802>
 80060f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f2:	331c      	adds	r3, #28
 80060f4:	441a      	add	r2, r3
 80060f6:	4499      	add	r9, r3
 80060f8:	441f      	add	r7, r3
 80060fa:	9209      	str	r2, [sp, #36]	; 0x24
 80060fc:	e779      	b.n	8005ff2 <_dtoa_r+0x802>
 80060fe:	4603      	mov	r3, r0
 8006100:	e7f6      	b.n	80060f0 <_dtoa_r+0x900>
 8006102:	9b08      	ldr	r3, [sp, #32]
 8006104:	2b00      	cmp	r3, #0
 8006106:	dc34      	bgt.n	8006172 <_dtoa_r+0x982>
 8006108:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800610a:	2b02      	cmp	r3, #2
 800610c:	dd31      	ble.n	8006172 <_dtoa_r+0x982>
 800610e:	9b08      	ldr	r3, [sp, #32]
 8006110:	9306      	str	r3, [sp, #24]
 8006112:	9b06      	ldr	r3, [sp, #24]
 8006114:	b963      	cbnz	r3, 8006130 <_dtoa_r+0x940>
 8006116:	4621      	mov	r1, r4
 8006118:	2205      	movs	r2, #5
 800611a:	4628      	mov	r0, r5
 800611c:	f000 faaa 	bl	8006674 <__multadd>
 8006120:	4601      	mov	r1, r0
 8006122:	4604      	mov	r4, r0
 8006124:	4650      	mov	r0, sl
 8006126:	f000 fd07 	bl	8006b38 <__mcmp>
 800612a:	2800      	cmp	r0, #0
 800612c:	f73f adbf 	bgt.w	8005cae <_dtoa_r+0x4be>
 8006130:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006132:	9f03      	ldr	r7, [sp, #12]
 8006134:	ea6f 0b03 	mvn.w	fp, r3
 8006138:	f04f 0800 	mov.w	r8, #0
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fa76 	bl	8006630 <_Bfree>
 8006144:	2e00      	cmp	r6, #0
 8006146:	f43f aead 	beq.w	8005ea4 <_dtoa_r+0x6b4>
 800614a:	f1b8 0f00 	cmp.w	r8, #0
 800614e:	d005      	beq.n	800615c <_dtoa_r+0x96c>
 8006150:	45b0      	cmp	r8, r6
 8006152:	d003      	beq.n	800615c <_dtoa_r+0x96c>
 8006154:	4641      	mov	r1, r8
 8006156:	4628      	mov	r0, r5
 8006158:	f000 fa6a 	bl	8006630 <_Bfree>
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	f000 fa66 	bl	8006630 <_Bfree>
 8006164:	e69e      	b.n	8005ea4 <_dtoa_r+0x6b4>
 8006166:	2400      	movs	r4, #0
 8006168:	4626      	mov	r6, r4
 800616a:	e7e1      	b.n	8006130 <_dtoa_r+0x940>
 800616c:	46c3      	mov	fp, r8
 800616e:	4626      	mov	r6, r4
 8006170:	e59d      	b.n	8005cae <_dtoa_r+0x4be>
 8006172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80c8 	beq.w	800630a <_dtoa_r+0xb1a>
 800617a:	9b08      	ldr	r3, [sp, #32]
 800617c:	9306      	str	r3, [sp, #24]
 800617e:	2f00      	cmp	r7, #0
 8006180:	dd05      	ble.n	800618e <_dtoa_r+0x99e>
 8006182:	4631      	mov	r1, r6
 8006184:	463a      	mov	r2, r7
 8006186:	4628      	mov	r0, r5
 8006188:	f000 fc6a 	bl	8006a60 <__lshift>
 800618c:	4606      	mov	r6, r0
 800618e:	f1b8 0f00 	cmp.w	r8, #0
 8006192:	d05b      	beq.n	800624c <_dtoa_r+0xa5c>
 8006194:	4628      	mov	r0, r5
 8006196:	6871      	ldr	r1, [r6, #4]
 8006198:	f000 fa0a 	bl	80065b0 <_Balloc>
 800619c:	4607      	mov	r7, r0
 800619e:	b928      	cbnz	r0, 80061ac <_dtoa_r+0x9bc>
 80061a0:	4602      	mov	r2, r0
 80061a2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80061a6:	4b81      	ldr	r3, [pc, #516]	; (80063ac <_dtoa_r+0xbbc>)
 80061a8:	f7ff bb36 	b.w	8005818 <_dtoa_r+0x28>
 80061ac:	6932      	ldr	r2, [r6, #16]
 80061ae:	f106 010c 	add.w	r1, r6, #12
 80061b2:	3202      	adds	r2, #2
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	300c      	adds	r0, #12
 80061b8:	f7ff fa7e 	bl	80056b8 <memcpy>
 80061bc:	2201      	movs	r2, #1
 80061be:	4639      	mov	r1, r7
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fc4d 	bl	8006a60 <__lshift>
 80061c6:	46b0      	mov	r8, r6
 80061c8:	4606      	mov	r6, r0
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	9a03      	ldr	r2, [sp, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	9308      	str	r3, [sp, #32]
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	4413      	add	r3, r2
 80061d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061d8:	9b04      	ldr	r3, [sp, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	930a      	str	r3, [sp, #40]	; 0x28
 80061e0:	9b08      	ldr	r3, [sp, #32]
 80061e2:	4621      	mov	r1, r4
 80061e4:	3b01      	subs	r3, #1
 80061e6:	4650      	mov	r0, sl
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	f7ff fa77 	bl	80056dc <quorem>
 80061ee:	4641      	mov	r1, r8
 80061f0:	9006      	str	r0, [sp, #24]
 80061f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061f6:	4650      	mov	r0, sl
 80061f8:	f000 fc9e 	bl	8006b38 <__mcmp>
 80061fc:	4632      	mov	r2, r6
 80061fe:	9009      	str	r0, [sp, #36]	; 0x24
 8006200:	4621      	mov	r1, r4
 8006202:	4628      	mov	r0, r5
 8006204:	f000 fcb4 	bl	8006b70 <__mdiff>
 8006208:	68c2      	ldr	r2, [r0, #12]
 800620a:	4607      	mov	r7, r0
 800620c:	bb02      	cbnz	r2, 8006250 <_dtoa_r+0xa60>
 800620e:	4601      	mov	r1, r0
 8006210:	4650      	mov	r0, sl
 8006212:	f000 fc91 	bl	8006b38 <__mcmp>
 8006216:	4602      	mov	r2, r0
 8006218:	4639      	mov	r1, r7
 800621a:	4628      	mov	r0, r5
 800621c:	920c      	str	r2, [sp, #48]	; 0x30
 800621e:	f000 fa07 	bl	8006630 <_Bfree>
 8006222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006226:	9f08      	ldr	r7, [sp, #32]
 8006228:	ea43 0102 	orr.w	r1, r3, r2
 800622c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800622e:	4319      	orrs	r1, r3
 8006230:	d110      	bne.n	8006254 <_dtoa_r+0xa64>
 8006232:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006236:	d029      	beq.n	800628c <_dtoa_r+0xa9c>
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	2b00      	cmp	r3, #0
 800623c:	dd02      	ble.n	8006244 <_dtoa_r+0xa54>
 800623e:	9b06      	ldr	r3, [sp, #24]
 8006240:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006244:	9b04      	ldr	r3, [sp, #16]
 8006246:	f883 9000 	strb.w	r9, [r3]
 800624a:	e777      	b.n	800613c <_dtoa_r+0x94c>
 800624c:	4630      	mov	r0, r6
 800624e:	e7ba      	b.n	80061c6 <_dtoa_r+0x9d6>
 8006250:	2201      	movs	r2, #1
 8006252:	e7e1      	b.n	8006218 <_dtoa_r+0xa28>
 8006254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006256:	2b00      	cmp	r3, #0
 8006258:	db04      	blt.n	8006264 <_dtoa_r+0xa74>
 800625a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800625c:	430b      	orrs	r3, r1
 800625e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006260:	430b      	orrs	r3, r1
 8006262:	d120      	bne.n	80062a6 <_dtoa_r+0xab6>
 8006264:	2a00      	cmp	r2, #0
 8006266:	dded      	ble.n	8006244 <_dtoa_r+0xa54>
 8006268:	4651      	mov	r1, sl
 800626a:	2201      	movs	r2, #1
 800626c:	4628      	mov	r0, r5
 800626e:	f000 fbf7 	bl	8006a60 <__lshift>
 8006272:	4621      	mov	r1, r4
 8006274:	4682      	mov	sl, r0
 8006276:	f000 fc5f 	bl	8006b38 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	dc03      	bgt.n	8006286 <_dtoa_r+0xa96>
 800627e:	d1e1      	bne.n	8006244 <_dtoa_r+0xa54>
 8006280:	f019 0f01 	tst.w	r9, #1
 8006284:	d0de      	beq.n	8006244 <_dtoa_r+0xa54>
 8006286:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800628a:	d1d8      	bne.n	800623e <_dtoa_r+0xa4e>
 800628c:	2339      	movs	r3, #57	; 0x39
 800628e:	9a04      	ldr	r2, [sp, #16]
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	463b      	mov	r3, r7
 8006294:	461f      	mov	r7, r3
 8006296:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800629a:	3b01      	subs	r3, #1
 800629c:	2a39      	cmp	r2, #57	; 0x39
 800629e:	d06b      	beq.n	8006378 <_dtoa_r+0xb88>
 80062a0:	3201      	adds	r2, #1
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	e74a      	b.n	800613c <_dtoa_r+0x94c>
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	dd07      	ble.n	80062ba <_dtoa_r+0xaca>
 80062aa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062ae:	d0ed      	beq.n	800628c <_dtoa_r+0xa9c>
 80062b0:	9a04      	ldr	r2, [sp, #16]
 80062b2:	f109 0301 	add.w	r3, r9, #1
 80062b6:	7013      	strb	r3, [r2, #0]
 80062b8:	e740      	b.n	800613c <_dtoa_r+0x94c>
 80062ba:	9b08      	ldr	r3, [sp, #32]
 80062bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062be:	f803 9c01 	strb.w	r9, [r3, #-1]
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d042      	beq.n	800634c <_dtoa_r+0xb5c>
 80062c6:	4651      	mov	r1, sl
 80062c8:	2300      	movs	r3, #0
 80062ca:	220a      	movs	r2, #10
 80062cc:	4628      	mov	r0, r5
 80062ce:	f000 f9d1 	bl	8006674 <__multadd>
 80062d2:	45b0      	cmp	r8, r6
 80062d4:	4682      	mov	sl, r0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	f04f 020a 	mov.w	r2, #10
 80062de:	4641      	mov	r1, r8
 80062e0:	4628      	mov	r0, r5
 80062e2:	d107      	bne.n	80062f4 <_dtoa_r+0xb04>
 80062e4:	f000 f9c6 	bl	8006674 <__multadd>
 80062e8:	4680      	mov	r8, r0
 80062ea:	4606      	mov	r6, r0
 80062ec:	9b08      	ldr	r3, [sp, #32]
 80062ee:	3301      	adds	r3, #1
 80062f0:	9308      	str	r3, [sp, #32]
 80062f2:	e775      	b.n	80061e0 <_dtoa_r+0x9f0>
 80062f4:	f000 f9be 	bl	8006674 <__multadd>
 80062f8:	4631      	mov	r1, r6
 80062fa:	4680      	mov	r8, r0
 80062fc:	2300      	movs	r3, #0
 80062fe:	220a      	movs	r2, #10
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f9b7 	bl	8006674 <__multadd>
 8006306:	4606      	mov	r6, r0
 8006308:	e7f0      	b.n	80062ec <_dtoa_r+0xafc>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	9306      	str	r3, [sp, #24]
 800630e:	9f03      	ldr	r7, [sp, #12]
 8006310:	4621      	mov	r1, r4
 8006312:	4650      	mov	r0, sl
 8006314:	f7ff f9e2 	bl	80056dc <quorem>
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800631e:	f807 9b01 	strb.w	r9, [r7], #1
 8006322:	1afa      	subs	r2, r7, r3
 8006324:	9b06      	ldr	r3, [sp, #24]
 8006326:	4293      	cmp	r3, r2
 8006328:	dd07      	ble.n	800633a <_dtoa_r+0xb4a>
 800632a:	4651      	mov	r1, sl
 800632c:	2300      	movs	r3, #0
 800632e:	220a      	movs	r2, #10
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f99f 	bl	8006674 <__multadd>
 8006336:	4682      	mov	sl, r0
 8006338:	e7ea      	b.n	8006310 <_dtoa_r+0xb20>
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	f04f 0800 	mov.w	r8, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfcc      	ite	gt
 8006344:	461f      	movgt	r7, r3
 8006346:	2701      	movle	r7, #1
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	441f      	add	r7, r3
 800634c:	4651      	mov	r1, sl
 800634e:	2201      	movs	r2, #1
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fb85 	bl	8006a60 <__lshift>
 8006356:	4621      	mov	r1, r4
 8006358:	4682      	mov	sl, r0
 800635a:	f000 fbed 	bl	8006b38 <__mcmp>
 800635e:	2800      	cmp	r0, #0
 8006360:	dc97      	bgt.n	8006292 <_dtoa_r+0xaa2>
 8006362:	d102      	bne.n	800636a <_dtoa_r+0xb7a>
 8006364:	f019 0f01 	tst.w	r9, #1
 8006368:	d193      	bne.n	8006292 <_dtoa_r+0xaa2>
 800636a:	463b      	mov	r3, r7
 800636c:	461f      	mov	r7, r3
 800636e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006372:	2a30      	cmp	r2, #48	; 0x30
 8006374:	d0fa      	beq.n	800636c <_dtoa_r+0xb7c>
 8006376:	e6e1      	b.n	800613c <_dtoa_r+0x94c>
 8006378:	9a03      	ldr	r2, [sp, #12]
 800637a:	429a      	cmp	r2, r3
 800637c:	d18a      	bne.n	8006294 <_dtoa_r+0xaa4>
 800637e:	2331      	movs	r3, #49	; 0x31
 8006380:	f10b 0b01 	add.w	fp, fp, #1
 8006384:	e797      	b.n	80062b6 <_dtoa_r+0xac6>
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <_dtoa_r+0xbc0>)
 8006388:	f7ff ba9f 	b.w	80058ca <_dtoa_r+0xda>
 800638c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800638e:	2b00      	cmp	r3, #0
 8006390:	f47f aa77 	bne.w	8005882 <_dtoa_r+0x92>
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <_dtoa_r+0xbc4>)
 8006396:	f7ff ba98 	b.w	80058ca <_dtoa_r+0xda>
 800639a:	9b06      	ldr	r3, [sp, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dcb6      	bgt.n	800630e <_dtoa_r+0xb1e>
 80063a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	f73f aeb5 	bgt.w	8006112 <_dtoa_r+0x922>
 80063a8:	e7b1      	b.n	800630e <_dtoa_r+0xb1e>
 80063aa:	bf00      	nop
 80063ac:	08008eeb 	.word	0x08008eeb
 80063b0:	08008e46 	.word	0x08008e46
 80063b4:	08008e6f 	.word	0x08008e6f

080063b8 <_free_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4605      	mov	r5, r0
 80063bc:	2900      	cmp	r1, #0
 80063be:	d040      	beq.n	8006442 <_free_r+0x8a>
 80063c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c4:	1f0c      	subs	r4, r1, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfb8      	it	lt
 80063ca:	18e4      	addlt	r4, r4, r3
 80063cc:	f000 f8e4 	bl	8006598 <__malloc_lock>
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <_free_r+0x8c>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	b933      	cbnz	r3, 80063e4 <_free_r+0x2c>
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	6014      	str	r4, [r2, #0]
 80063da:	4628      	mov	r0, r5
 80063dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e0:	f000 b8e0 	b.w	80065a4 <__malloc_unlock>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d908      	bls.n	80063fa <_free_r+0x42>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	1821      	adds	r1, r4, r0
 80063ec:	428b      	cmp	r3, r1
 80063ee:	bf01      	itttt	eq
 80063f0:	6819      	ldreq	r1, [r3, #0]
 80063f2:	685b      	ldreq	r3, [r3, #4]
 80063f4:	1809      	addeq	r1, r1, r0
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	e7ed      	b.n	80063d6 <_free_r+0x1e>
 80063fa:	461a      	mov	r2, r3
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b10b      	cbz	r3, 8006404 <_free_r+0x4c>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d9fa      	bls.n	80063fa <_free_r+0x42>
 8006404:	6811      	ldr	r1, [r2, #0]
 8006406:	1850      	adds	r0, r2, r1
 8006408:	42a0      	cmp	r0, r4
 800640a:	d10b      	bne.n	8006424 <_free_r+0x6c>
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	4401      	add	r1, r0
 8006410:	1850      	adds	r0, r2, r1
 8006412:	4283      	cmp	r3, r0
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	d1e0      	bne.n	80063da <_free_r+0x22>
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	4408      	add	r0, r1
 800641e:	6010      	str	r0, [r2, #0]
 8006420:	6053      	str	r3, [r2, #4]
 8006422:	e7da      	b.n	80063da <_free_r+0x22>
 8006424:	d902      	bls.n	800642c <_free_r+0x74>
 8006426:	230c      	movs	r3, #12
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	e7d6      	b.n	80063da <_free_r+0x22>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	1821      	adds	r1, r4, r0
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1809      	addeq	r1, r1, r0
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	6063      	str	r3, [r4, #4]
 800643e:	6054      	str	r4, [r2, #4]
 8006440:	e7cb      	b.n	80063da <_free_r+0x22>
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200008d8 	.word	0x200008d8

08006448 <malloc>:
 8006448:	4b02      	ldr	r3, [pc, #8]	; (8006454 <malloc+0xc>)
 800644a:	4601      	mov	r1, r0
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	f000 b823 	b.w	8006498 <_malloc_r>
 8006452:	bf00      	nop
 8006454:	20000064 	.word	0x20000064

08006458 <sbrk_aligned>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4e0e      	ldr	r6, [pc, #56]	; (8006494 <sbrk_aligned+0x3c>)
 800645c:	460c      	mov	r4, r1
 800645e:	6831      	ldr	r1, [r6, #0]
 8006460:	4605      	mov	r5, r0
 8006462:	b911      	cbnz	r1, 800646a <sbrk_aligned+0x12>
 8006464:	f001 fe0c 	bl	8008080 <_sbrk_r>
 8006468:	6030      	str	r0, [r6, #0]
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f001 fe07 	bl	8008080 <_sbrk_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	d00a      	beq.n	800648c <sbrk_aligned+0x34>
 8006476:	1cc4      	adds	r4, r0, #3
 8006478:	f024 0403 	bic.w	r4, r4, #3
 800647c:	42a0      	cmp	r0, r4
 800647e:	d007      	beq.n	8006490 <sbrk_aligned+0x38>
 8006480:	1a21      	subs	r1, r4, r0
 8006482:	4628      	mov	r0, r5
 8006484:	f001 fdfc 	bl	8008080 <_sbrk_r>
 8006488:	3001      	adds	r0, #1
 800648a:	d101      	bne.n	8006490 <sbrk_aligned+0x38>
 800648c:	f04f 34ff 	mov.w	r4, #4294967295
 8006490:	4620      	mov	r0, r4
 8006492:	bd70      	pop	{r4, r5, r6, pc}
 8006494:	200008dc 	.word	0x200008dc

08006498 <_malloc_r>:
 8006498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800649c:	1ccd      	adds	r5, r1, #3
 800649e:	f025 0503 	bic.w	r5, r5, #3
 80064a2:	3508      	adds	r5, #8
 80064a4:	2d0c      	cmp	r5, #12
 80064a6:	bf38      	it	cc
 80064a8:	250c      	movcc	r5, #12
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	4607      	mov	r7, r0
 80064ae:	db01      	blt.n	80064b4 <_malloc_r+0x1c>
 80064b0:	42a9      	cmp	r1, r5
 80064b2:	d905      	bls.n	80064c0 <_malloc_r+0x28>
 80064b4:	230c      	movs	r3, #12
 80064b6:	2600      	movs	r6, #0
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	4630      	mov	r0, r6
 80064bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006594 <_malloc_r+0xfc>
 80064c4:	f000 f868 	bl	8006598 <__malloc_lock>
 80064c8:	f8d8 3000 	ldr.w	r3, [r8]
 80064cc:	461c      	mov	r4, r3
 80064ce:	bb5c      	cbnz	r4, 8006528 <_malloc_r+0x90>
 80064d0:	4629      	mov	r1, r5
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff ffc0 	bl	8006458 <sbrk_aligned>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	4604      	mov	r4, r0
 80064dc:	d155      	bne.n	800658a <_malloc_r+0xf2>
 80064de:	f8d8 4000 	ldr.w	r4, [r8]
 80064e2:	4626      	mov	r6, r4
 80064e4:	2e00      	cmp	r6, #0
 80064e6:	d145      	bne.n	8006574 <_malloc_r+0xdc>
 80064e8:	2c00      	cmp	r4, #0
 80064ea:	d048      	beq.n	800657e <_malloc_r+0xe6>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	4631      	mov	r1, r6
 80064f0:	4638      	mov	r0, r7
 80064f2:	eb04 0903 	add.w	r9, r4, r3
 80064f6:	f001 fdc3 	bl	8008080 <_sbrk_r>
 80064fa:	4581      	cmp	r9, r0
 80064fc:	d13f      	bne.n	800657e <_malloc_r+0xe6>
 80064fe:	6821      	ldr	r1, [r4, #0]
 8006500:	4638      	mov	r0, r7
 8006502:	1a6d      	subs	r5, r5, r1
 8006504:	4629      	mov	r1, r5
 8006506:	f7ff ffa7 	bl	8006458 <sbrk_aligned>
 800650a:	3001      	adds	r0, #1
 800650c:	d037      	beq.n	800657e <_malloc_r+0xe6>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	442b      	add	r3, r5
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	f8d8 3000 	ldr.w	r3, [r8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d038      	beq.n	800658e <_malloc_r+0xf6>
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	42a2      	cmp	r2, r4
 8006520:	d12b      	bne.n	800657a <_malloc_r+0xe2>
 8006522:	2200      	movs	r2, #0
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	e00f      	b.n	8006548 <_malloc_r+0xb0>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	1b52      	subs	r2, r2, r5
 800652c:	d41f      	bmi.n	800656e <_malloc_r+0xd6>
 800652e:	2a0b      	cmp	r2, #11
 8006530:	d917      	bls.n	8006562 <_malloc_r+0xca>
 8006532:	1961      	adds	r1, r4, r5
 8006534:	42a3      	cmp	r3, r4
 8006536:	6025      	str	r5, [r4, #0]
 8006538:	bf18      	it	ne
 800653a:	6059      	strne	r1, [r3, #4]
 800653c:	6863      	ldr	r3, [r4, #4]
 800653e:	bf08      	it	eq
 8006540:	f8c8 1000 	streq.w	r1, [r8]
 8006544:	5162      	str	r2, [r4, r5]
 8006546:	604b      	str	r3, [r1, #4]
 8006548:	4638      	mov	r0, r7
 800654a:	f104 060b 	add.w	r6, r4, #11
 800654e:	f000 f829 	bl	80065a4 <__malloc_unlock>
 8006552:	f026 0607 	bic.w	r6, r6, #7
 8006556:	1d23      	adds	r3, r4, #4
 8006558:	1af2      	subs	r2, r6, r3
 800655a:	d0ae      	beq.n	80064ba <_malloc_r+0x22>
 800655c:	1b9b      	subs	r3, r3, r6
 800655e:	50a3      	str	r3, [r4, r2]
 8006560:	e7ab      	b.n	80064ba <_malloc_r+0x22>
 8006562:	42a3      	cmp	r3, r4
 8006564:	6862      	ldr	r2, [r4, #4]
 8006566:	d1dd      	bne.n	8006524 <_malloc_r+0x8c>
 8006568:	f8c8 2000 	str.w	r2, [r8]
 800656c:	e7ec      	b.n	8006548 <_malloc_r+0xb0>
 800656e:	4623      	mov	r3, r4
 8006570:	6864      	ldr	r4, [r4, #4]
 8006572:	e7ac      	b.n	80064ce <_malloc_r+0x36>
 8006574:	4634      	mov	r4, r6
 8006576:	6876      	ldr	r6, [r6, #4]
 8006578:	e7b4      	b.n	80064e4 <_malloc_r+0x4c>
 800657a:	4613      	mov	r3, r2
 800657c:	e7cc      	b.n	8006518 <_malloc_r+0x80>
 800657e:	230c      	movs	r3, #12
 8006580:	4638      	mov	r0, r7
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	f000 f80e 	bl	80065a4 <__malloc_unlock>
 8006588:	e797      	b.n	80064ba <_malloc_r+0x22>
 800658a:	6025      	str	r5, [r4, #0]
 800658c:	e7dc      	b.n	8006548 <_malloc_r+0xb0>
 800658e:	605b      	str	r3, [r3, #4]
 8006590:	deff      	udf	#255	; 0xff
 8006592:	bf00      	nop
 8006594:	200008d8 	.word	0x200008d8

08006598 <__malloc_lock>:
 8006598:	4801      	ldr	r0, [pc, #4]	; (80065a0 <__malloc_lock+0x8>)
 800659a:	f7ff b87d 	b.w	8005698 <__retarget_lock_acquire_recursive>
 800659e:	bf00      	nop
 80065a0:	200008d4 	.word	0x200008d4

080065a4 <__malloc_unlock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_unlock+0x8>)
 80065a6:	f7ff b878 	b.w	800569a <__retarget_lock_release_recursive>
 80065aa:	bf00      	nop
 80065ac:	200008d4 	.word	0x200008d4

080065b0 <_Balloc>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	69c6      	ldr	r6, [r0, #28]
 80065b4:	4604      	mov	r4, r0
 80065b6:	460d      	mov	r5, r1
 80065b8:	b976      	cbnz	r6, 80065d8 <_Balloc+0x28>
 80065ba:	2010      	movs	r0, #16
 80065bc:	f7ff ff44 	bl	8006448 <malloc>
 80065c0:	4602      	mov	r2, r0
 80065c2:	61e0      	str	r0, [r4, #28]
 80065c4:	b920      	cbnz	r0, 80065d0 <_Balloc+0x20>
 80065c6:	216b      	movs	r1, #107	; 0x6b
 80065c8:	4b17      	ldr	r3, [pc, #92]	; (8006628 <_Balloc+0x78>)
 80065ca:	4818      	ldr	r0, [pc, #96]	; (800662c <_Balloc+0x7c>)
 80065cc:	f001 fd6e 	bl	80080ac <__assert_func>
 80065d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065d4:	6006      	str	r6, [r0, #0]
 80065d6:	60c6      	str	r6, [r0, #12]
 80065d8:	69e6      	ldr	r6, [r4, #28]
 80065da:	68f3      	ldr	r3, [r6, #12]
 80065dc:	b183      	cbz	r3, 8006600 <_Balloc+0x50>
 80065de:	69e3      	ldr	r3, [r4, #28]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065e6:	b9b8      	cbnz	r0, 8006618 <_Balloc+0x68>
 80065e8:	2101      	movs	r1, #1
 80065ea:	fa01 f605 	lsl.w	r6, r1, r5
 80065ee:	1d72      	adds	r2, r6, #5
 80065f0:	4620      	mov	r0, r4
 80065f2:	0092      	lsls	r2, r2, #2
 80065f4:	f001 fd78 	bl	80080e8 <_calloc_r>
 80065f8:	b160      	cbz	r0, 8006614 <_Balloc+0x64>
 80065fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065fe:	e00e      	b.n	800661e <_Balloc+0x6e>
 8006600:	2221      	movs	r2, #33	; 0x21
 8006602:	2104      	movs	r1, #4
 8006604:	4620      	mov	r0, r4
 8006606:	f001 fd6f 	bl	80080e8 <_calloc_r>
 800660a:	69e3      	ldr	r3, [r4, #28]
 800660c:	60f0      	str	r0, [r6, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1e4      	bne.n	80065de <_Balloc+0x2e>
 8006614:	2000      	movs	r0, #0
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	6802      	ldr	r2, [r0, #0]
 800661a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800661e:	2300      	movs	r3, #0
 8006620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006624:	e7f7      	b.n	8006616 <_Balloc+0x66>
 8006626:	bf00      	nop
 8006628:	08008e7c 	.word	0x08008e7c
 800662c:	08008efc 	.word	0x08008efc

08006630 <_Bfree>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	69c6      	ldr	r6, [r0, #28]
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	b976      	cbnz	r6, 8006658 <_Bfree+0x28>
 800663a:	2010      	movs	r0, #16
 800663c:	f7ff ff04 	bl	8006448 <malloc>
 8006640:	4602      	mov	r2, r0
 8006642:	61e8      	str	r0, [r5, #28]
 8006644:	b920      	cbnz	r0, 8006650 <_Bfree+0x20>
 8006646:	218f      	movs	r1, #143	; 0x8f
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <_Bfree+0x3c>)
 800664a:	4809      	ldr	r0, [pc, #36]	; (8006670 <_Bfree+0x40>)
 800664c:	f001 fd2e 	bl	80080ac <__assert_func>
 8006650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006654:	6006      	str	r6, [r0, #0]
 8006656:	60c6      	str	r6, [r0, #12]
 8006658:	b13c      	cbz	r4, 800666a <_Bfree+0x3a>
 800665a:	69eb      	ldr	r3, [r5, #28]
 800665c:	6862      	ldr	r2, [r4, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006664:	6021      	str	r1, [r4, #0]
 8006666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	08008e7c 	.word	0x08008e7c
 8006670:	08008efc 	.word	0x08008efc

08006674 <__multadd>:
 8006674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006678:	4607      	mov	r7, r0
 800667a:	460c      	mov	r4, r1
 800667c:	461e      	mov	r6, r3
 800667e:	2000      	movs	r0, #0
 8006680:	690d      	ldr	r5, [r1, #16]
 8006682:	f101 0c14 	add.w	ip, r1, #20
 8006686:	f8dc 3000 	ldr.w	r3, [ip]
 800668a:	3001      	adds	r0, #1
 800668c:	b299      	uxth	r1, r3
 800668e:	fb02 6101 	mla	r1, r2, r1, r6
 8006692:	0c1e      	lsrs	r6, r3, #16
 8006694:	0c0b      	lsrs	r3, r1, #16
 8006696:	fb02 3306 	mla	r3, r2, r6, r3
 800669a:	b289      	uxth	r1, r1
 800669c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066a0:	4285      	cmp	r5, r0
 80066a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066a6:	f84c 1b04 	str.w	r1, [ip], #4
 80066aa:	dcec      	bgt.n	8006686 <__multadd+0x12>
 80066ac:	b30e      	cbz	r6, 80066f2 <__multadd+0x7e>
 80066ae:	68a3      	ldr	r3, [r4, #8]
 80066b0:	42ab      	cmp	r3, r5
 80066b2:	dc19      	bgt.n	80066e8 <__multadd+0x74>
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4638      	mov	r0, r7
 80066b8:	3101      	adds	r1, #1
 80066ba:	f7ff ff79 	bl	80065b0 <_Balloc>
 80066be:	4680      	mov	r8, r0
 80066c0:	b928      	cbnz	r0, 80066ce <__multadd+0x5a>
 80066c2:	4602      	mov	r2, r0
 80066c4:	21ba      	movs	r1, #186	; 0xba
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <__multadd+0x84>)
 80066c8:	480c      	ldr	r0, [pc, #48]	; (80066fc <__multadd+0x88>)
 80066ca:	f001 fcef 	bl	80080ac <__assert_func>
 80066ce:	6922      	ldr	r2, [r4, #16]
 80066d0:	f104 010c 	add.w	r1, r4, #12
 80066d4:	3202      	adds	r2, #2
 80066d6:	0092      	lsls	r2, r2, #2
 80066d8:	300c      	adds	r0, #12
 80066da:	f7fe ffed 	bl	80056b8 <memcpy>
 80066de:	4621      	mov	r1, r4
 80066e0:	4638      	mov	r0, r7
 80066e2:	f7ff ffa5 	bl	8006630 <_Bfree>
 80066e6:	4644      	mov	r4, r8
 80066e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066ec:	3501      	adds	r5, #1
 80066ee:	615e      	str	r6, [r3, #20]
 80066f0:	6125      	str	r5, [r4, #16]
 80066f2:	4620      	mov	r0, r4
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	08008eeb 	.word	0x08008eeb
 80066fc:	08008efc 	.word	0x08008efc

08006700 <__s2b>:
 8006700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006704:	4615      	mov	r5, r2
 8006706:	2209      	movs	r2, #9
 8006708:	461f      	mov	r7, r3
 800670a:	3308      	adds	r3, #8
 800670c:	460c      	mov	r4, r1
 800670e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006712:	4606      	mov	r6, r0
 8006714:	2201      	movs	r2, #1
 8006716:	2100      	movs	r1, #0
 8006718:	429a      	cmp	r2, r3
 800671a:	db09      	blt.n	8006730 <__s2b+0x30>
 800671c:	4630      	mov	r0, r6
 800671e:	f7ff ff47 	bl	80065b0 <_Balloc>
 8006722:	b940      	cbnz	r0, 8006736 <__s2b+0x36>
 8006724:	4602      	mov	r2, r0
 8006726:	21d3      	movs	r1, #211	; 0xd3
 8006728:	4b18      	ldr	r3, [pc, #96]	; (800678c <__s2b+0x8c>)
 800672a:	4819      	ldr	r0, [pc, #100]	; (8006790 <__s2b+0x90>)
 800672c:	f001 fcbe 	bl	80080ac <__assert_func>
 8006730:	0052      	lsls	r2, r2, #1
 8006732:	3101      	adds	r1, #1
 8006734:	e7f0      	b.n	8006718 <__s2b+0x18>
 8006736:	9b08      	ldr	r3, [sp, #32]
 8006738:	2d09      	cmp	r5, #9
 800673a:	6143      	str	r3, [r0, #20]
 800673c:	f04f 0301 	mov.w	r3, #1
 8006740:	6103      	str	r3, [r0, #16]
 8006742:	dd16      	ble.n	8006772 <__s2b+0x72>
 8006744:	f104 0909 	add.w	r9, r4, #9
 8006748:	46c8      	mov	r8, r9
 800674a:	442c      	add	r4, r5
 800674c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006750:	4601      	mov	r1, r0
 8006752:	220a      	movs	r2, #10
 8006754:	4630      	mov	r0, r6
 8006756:	3b30      	subs	r3, #48	; 0x30
 8006758:	f7ff ff8c 	bl	8006674 <__multadd>
 800675c:	45a0      	cmp	r8, r4
 800675e:	d1f5      	bne.n	800674c <__s2b+0x4c>
 8006760:	f1a5 0408 	sub.w	r4, r5, #8
 8006764:	444c      	add	r4, r9
 8006766:	1b2d      	subs	r5, r5, r4
 8006768:	1963      	adds	r3, r4, r5
 800676a:	42bb      	cmp	r3, r7
 800676c:	db04      	blt.n	8006778 <__s2b+0x78>
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	2509      	movs	r5, #9
 8006774:	340a      	adds	r4, #10
 8006776:	e7f6      	b.n	8006766 <__s2b+0x66>
 8006778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800677c:	4601      	mov	r1, r0
 800677e:	220a      	movs	r2, #10
 8006780:	4630      	mov	r0, r6
 8006782:	3b30      	subs	r3, #48	; 0x30
 8006784:	f7ff ff76 	bl	8006674 <__multadd>
 8006788:	e7ee      	b.n	8006768 <__s2b+0x68>
 800678a:	bf00      	nop
 800678c:	08008eeb 	.word	0x08008eeb
 8006790:	08008efc 	.word	0x08008efc

08006794 <__hi0bits>:
 8006794:	0c02      	lsrs	r2, r0, #16
 8006796:	0412      	lsls	r2, r2, #16
 8006798:	4603      	mov	r3, r0
 800679a:	b9ca      	cbnz	r2, 80067d0 <__hi0bits+0x3c>
 800679c:	0403      	lsls	r3, r0, #16
 800679e:	2010      	movs	r0, #16
 80067a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067a4:	bf04      	itt	eq
 80067a6:	021b      	lsleq	r3, r3, #8
 80067a8:	3008      	addeq	r0, #8
 80067aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067ae:	bf04      	itt	eq
 80067b0:	011b      	lsleq	r3, r3, #4
 80067b2:	3004      	addeq	r0, #4
 80067b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067b8:	bf04      	itt	eq
 80067ba:	009b      	lsleq	r3, r3, #2
 80067bc:	3002      	addeq	r0, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	db05      	blt.n	80067ce <__hi0bits+0x3a>
 80067c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80067c6:	f100 0001 	add.w	r0, r0, #1
 80067ca:	bf08      	it	eq
 80067cc:	2020      	moveq	r0, #32
 80067ce:	4770      	bx	lr
 80067d0:	2000      	movs	r0, #0
 80067d2:	e7e5      	b.n	80067a0 <__hi0bits+0xc>

080067d4 <__lo0bits>:
 80067d4:	6803      	ldr	r3, [r0, #0]
 80067d6:	4602      	mov	r2, r0
 80067d8:	f013 0007 	ands.w	r0, r3, #7
 80067dc:	d00b      	beq.n	80067f6 <__lo0bits+0x22>
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d421      	bmi.n	8006826 <__lo0bits+0x52>
 80067e2:	0798      	lsls	r0, r3, #30
 80067e4:	bf49      	itett	mi
 80067e6:	085b      	lsrmi	r3, r3, #1
 80067e8:	089b      	lsrpl	r3, r3, #2
 80067ea:	2001      	movmi	r0, #1
 80067ec:	6013      	strmi	r3, [r2, #0]
 80067ee:	bf5c      	itt	pl
 80067f0:	2002      	movpl	r0, #2
 80067f2:	6013      	strpl	r3, [r2, #0]
 80067f4:	4770      	bx	lr
 80067f6:	b299      	uxth	r1, r3
 80067f8:	b909      	cbnz	r1, 80067fe <__lo0bits+0x2a>
 80067fa:	2010      	movs	r0, #16
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2d9      	uxtb	r1, r3
 8006800:	b909      	cbnz	r1, 8006806 <__lo0bits+0x32>
 8006802:	3008      	adds	r0, #8
 8006804:	0a1b      	lsrs	r3, r3, #8
 8006806:	0719      	lsls	r1, r3, #28
 8006808:	bf04      	itt	eq
 800680a:	091b      	lsreq	r3, r3, #4
 800680c:	3004      	addeq	r0, #4
 800680e:	0799      	lsls	r1, r3, #30
 8006810:	bf04      	itt	eq
 8006812:	089b      	lsreq	r3, r3, #2
 8006814:	3002      	addeq	r0, #2
 8006816:	07d9      	lsls	r1, r3, #31
 8006818:	d403      	bmi.n	8006822 <__lo0bits+0x4e>
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	f100 0001 	add.w	r0, r0, #1
 8006820:	d003      	beq.n	800682a <__lo0bits+0x56>
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	4770      	bx	lr
 8006826:	2000      	movs	r0, #0
 8006828:	4770      	bx	lr
 800682a:	2020      	movs	r0, #32
 800682c:	4770      	bx	lr
	...

08006830 <__i2b>:
 8006830:	b510      	push	{r4, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	2101      	movs	r1, #1
 8006836:	f7ff febb 	bl	80065b0 <_Balloc>
 800683a:	4602      	mov	r2, r0
 800683c:	b928      	cbnz	r0, 800684a <__i2b+0x1a>
 800683e:	f240 1145 	movw	r1, #325	; 0x145
 8006842:	4b04      	ldr	r3, [pc, #16]	; (8006854 <__i2b+0x24>)
 8006844:	4804      	ldr	r0, [pc, #16]	; (8006858 <__i2b+0x28>)
 8006846:	f001 fc31 	bl	80080ac <__assert_func>
 800684a:	2301      	movs	r3, #1
 800684c:	6144      	str	r4, [r0, #20]
 800684e:	6103      	str	r3, [r0, #16]
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	08008eeb 	.word	0x08008eeb
 8006858:	08008efc 	.word	0x08008efc

0800685c <__multiply>:
 800685c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006860:	4691      	mov	r9, r2
 8006862:	690a      	ldr	r2, [r1, #16]
 8006864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006868:	460c      	mov	r4, r1
 800686a:	429a      	cmp	r2, r3
 800686c:	bfbe      	ittt	lt
 800686e:	460b      	movlt	r3, r1
 8006870:	464c      	movlt	r4, r9
 8006872:	4699      	movlt	r9, r3
 8006874:	6927      	ldr	r7, [r4, #16]
 8006876:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800687a:	68a3      	ldr	r3, [r4, #8]
 800687c:	6861      	ldr	r1, [r4, #4]
 800687e:	eb07 060a 	add.w	r6, r7, sl
 8006882:	42b3      	cmp	r3, r6
 8006884:	b085      	sub	sp, #20
 8006886:	bfb8      	it	lt
 8006888:	3101      	addlt	r1, #1
 800688a:	f7ff fe91 	bl	80065b0 <_Balloc>
 800688e:	b930      	cbnz	r0, 800689e <__multiply+0x42>
 8006890:	4602      	mov	r2, r0
 8006892:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006896:	4b43      	ldr	r3, [pc, #268]	; (80069a4 <__multiply+0x148>)
 8006898:	4843      	ldr	r0, [pc, #268]	; (80069a8 <__multiply+0x14c>)
 800689a:	f001 fc07 	bl	80080ac <__assert_func>
 800689e:	f100 0514 	add.w	r5, r0, #20
 80068a2:	462b      	mov	r3, r5
 80068a4:	2200      	movs	r2, #0
 80068a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068aa:	4543      	cmp	r3, r8
 80068ac:	d321      	bcc.n	80068f2 <__multiply+0x96>
 80068ae:	f104 0314 	add.w	r3, r4, #20
 80068b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068b6:	f109 0314 	add.w	r3, r9, #20
 80068ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068be:	9202      	str	r2, [sp, #8]
 80068c0:	1b3a      	subs	r2, r7, r4
 80068c2:	3a15      	subs	r2, #21
 80068c4:	f022 0203 	bic.w	r2, r2, #3
 80068c8:	3204      	adds	r2, #4
 80068ca:	f104 0115 	add.w	r1, r4, #21
 80068ce:	428f      	cmp	r7, r1
 80068d0:	bf38      	it	cc
 80068d2:	2204      	movcc	r2, #4
 80068d4:	9201      	str	r2, [sp, #4]
 80068d6:	9a02      	ldr	r2, [sp, #8]
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d80c      	bhi.n	80068f8 <__multiply+0x9c>
 80068de:	2e00      	cmp	r6, #0
 80068e0:	dd03      	ble.n	80068ea <__multiply+0x8e>
 80068e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d05a      	beq.n	80069a0 <__multiply+0x144>
 80068ea:	6106      	str	r6, [r0, #16]
 80068ec:	b005      	add	sp, #20
 80068ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f2:	f843 2b04 	str.w	r2, [r3], #4
 80068f6:	e7d8      	b.n	80068aa <__multiply+0x4e>
 80068f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80068fc:	f1ba 0f00 	cmp.w	sl, #0
 8006900:	d023      	beq.n	800694a <__multiply+0xee>
 8006902:	46a9      	mov	r9, r5
 8006904:	f04f 0c00 	mov.w	ip, #0
 8006908:	f104 0e14 	add.w	lr, r4, #20
 800690c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006910:	f8d9 1000 	ldr.w	r1, [r9]
 8006914:	fa1f fb82 	uxth.w	fp, r2
 8006918:	b289      	uxth	r1, r1
 800691a:	fb0a 110b 	mla	r1, sl, fp, r1
 800691e:	4461      	add	r1, ip
 8006920:	f8d9 c000 	ldr.w	ip, [r9]
 8006924:	0c12      	lsrs	r2, r2, #16
 8006926:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800692a:	fb0a c202 	mla	r2, sl, r2, ip
 800692e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006932:	b289      	uxth	r1, r1
 8006934:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006938:	4577      	cmp	r7, lr
 800693a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800693e:	f849 1b04 	str.w	r1, [r9], #4
 8006942:	d8e3      	bhi.n	800690c <__multiply+0xb0>
 8006944:	9a01      	ldr	r2, [sp, #4]
 8006946:	f845 c002 	str.w	ip, [r5, r2]
 800694a:	9a03      	ldr	r2, [sp, #12]
 800694c:	3304      	adds	r3, #4
 800694e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006952:	f1b9 0f00 	cmp.w	r9, #0
 8006956:	d021      	beq.n	800699c <__multiply+0x140>
 8006958:	46ae      	mov	lr, r5
 800695a:	f04f 0a00 	mov.w	sl, #0
 800695e:	6829      	ldr	r1, [r5, #0]
 8006960:	f104 0c14 	add.w	ip, r4, #20
 8006964:	f8bc b000 	ldrh.w	fp, [ip]
 8006968:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800696c:	b289      	uxth	r1, r1
 800696e:	fb09 220b 	mla	r2, r9, fp, r2
 8006972:	4452      	add	r2, sl
 8006974:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006978:	f84e 1b04 	str.w	r1, [lr], #4
 800697c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006980:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006984:	f8be 1000 	ldrh.w	r1, [lr]
 8006988:	4567      	cmp	r7, ip
 800698a:	fb09 110a 	mla	r1, r9, sl, r1
 800698e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006992:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006996:	d8e5      	bhi.n	8006964 <__multiply+0x108>
 8006998:	9a01      	ldr	r2, [sp, #4]
 800699a:	50a9      	str	r1, [r5, r2]
 800699c:	3504      	adds	r5, #4
 800699e:	e79a      	b.n	80068d6 <__multiply+0x7a>
 80069a0:	3e01      	subs	r6, #1
 80069a2:	e79c      	b.n	80068de <__multiply+0x82>
 80069a4:	08008eeb 	.word	0x08008eeb
 80069a8:	08008efc 	.word	0x08008efc

080069ac <__pow5mult>:
 80069ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b0:	4615      	mov	r5, r2
 80069b2:	f012 0203 	ands.w	r2, r2, #3
 80069b6:	4606      	mov	r6, r0
 80069b8:	460f      	mov	r7, r1
 80069ba:	d007      	beq.n	80069cc <__pow5mult+0x20>
 80069bc:	4c25      	ldr	r4, [pc, #148]	; (8006a54 <__pow5mult+0xa8>)
 80069be:	3a01      	subs	r2, #1
 80069c0:	2300      	movs	r3, #0
 80069c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069c6:	f7ff fe55 	bl	8006674 <__multadd>
 80069ca:	4607      	mov	r7, r0
 80069cc:	10ad      	asrs	r5, r5, #2
 80069ce:	d03d      	beq.n	8006a4c <__pow5mult+0xa0>
 80069d0:	69f4      	ldr	r4, [r6, #28]
 80069d2:	b97c      	cbnz	r4, 80069f4 <__pow5mult+0x48>
 80069d4:	2010      	movs	r0, #16
 80069d6:	f7ff fd37 	bl	8006448 <malloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	61f0      	str	r0, [r6, #28]
 80069de:	b928      	cbnz	r0, 80069ec <__pow5mult+0x40>
 80069e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80069e4:	4b1c      	ldr	r3, [pc, #112]	; (8006a58 <__pow5mult+0xac>)
 80069e6:	481d      	ldr	r0, [pc, #116]	; (8006a5c <__pow5mult+0xb0>)
 80069e8:	f001 fb60 	bl	80080ac <__assert_func>
 80069ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069f0:	6004      	str	r4, [r0, #0]
 80069f2:	60c4      	str	r4, [r0, #12]
 80069f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80069f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069fc:	b94c      	cbnz	r4, 8006a12 <__pow5mult+0x66>
 80069fe:	f240 2171 	movw	r1, #625	; 0x271
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff ff14 	bl	8006830 <__i2b>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a10:	6003      	str	r3, [r0, #0]
 8006a12:	f04f 0900 	mov.w	r9, #0
 8006a16:	07eb      	lsls	r3, r5, #31
 8006a18:	d50a      	bpl.n	8006a30 <__pow5mult+0x84>
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ff1c 	bl	800685c <__multiply>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4639      	mov	r1, r7
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f7ff fe01 	bl	8006630 <_Bfree>
 8006a2e:	4647      	mov	r7, r8
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	d00b      	beq.n	8006a4c <__pow5mult+0xa0>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	b938      	cbnz	r0, 8006a48 <__pow5mult+0x9c>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff ff0d 	bl	800685c <__multiply>
 8006a42:	6020      	str	r0, [r4, #0]
 8006a44:	f8c0 9000 	str.w	r9, [r0]
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e7e4      	b.n	8006a16 <__pow5mult+0x6a>
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a52:	bf00      	nop
 8006a54:	08009048 	.word	0x08009048
 8006a58:	08008e7c 	.word	0x08008e7c
 8006a5c:	08008efc 	.word	0x08008efc

08006a60 <__lshift>:
 8006a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	460c      	mov	r4, r1
 8006a66:	4607      	mov	r7, r0
 8006a68:	4691      	mov	r9, r2
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	6849      	ldr	r1, [r1, #4]
 8006a6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a72:	68a3      	ldr	r3, [r4, #8]
 8006a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a78:	f108 0601 	add.w	r6, r8, #1
 8006a7c:	42b3      	cmp	r3, r6
 8006a7e:	db0b      	blt.n	8006a98 <__lshift+0x38>
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff fd95 	bl	80065b0 <_Balloc>
 8006a86:	4605      	mov	r5, r0
 8006a88:	b948      	cbnz	r0, 8006a9e <__lshift+0x3e>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <__lshift+0xd0>)
 8006a92:	4828      	ldr	r0, [pc, #160]	; (8006b34 <__lshift+0xd4>)
 8006a94:	f001 fb0a 	bl	80080ac <__assert_func>
 8006a98:	3101      	adds	r1, #1
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	e7ee      	b.n	8006a7c <__lshift+0x1c>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f100 0114 	add.w	r1, r0, #20
 8006aa4:	f100 0210 	add.w	r2, r0, #16
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	4553      	cmp	r3, sl
 8006aac:	db33      	blt.n	8006b16 <__lshift+0xb6>
 8006aae:	6920      	ldr	r0, [r4, #16]
 8006ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ab4:	f104 0314 	add.w	r3, r4, #20
 8006ab8:	f019 091f 	ands.w	r9, r9, #31
 8006abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ac4:	d02b      	beq.n	8006b1e <__lshift+0xbe>
 8006ac6:	468a      	mov	sl, r1
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f1c9 0e20 	rsb	lr, r9, #32
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	fa00 f009 	lsl.w	r0, r0, r9
 8006ad4:	4310      	orrs	r0, r2
 8006ad6:	f84a 0b04 	str.w	r0, [sl], #4
 8006ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ade:	459c      	cmp	ip, r3
 8006ae0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ae4:	d8f3      	bhi.n	8006ace <__lshift+0x6e>
 8006ae6:	ebac 0304 	sub.w	r3, ip, r4
 8006aea:	3b15      	subs	r3, #21
 8006aec:	f023 0303 	bic.w	r3, r3, #3
 8006af0:	3304      	adds	r3, #4
 8006af2:	f104 0015 	add.w	r0, r4, #21
 8006af6:	4584      	cmp	ip, r0
 8006af8:	bf38      	it	cc
 8006afa:	2304      	movcc	r3, #4
 8006afc:	50ca      	str	r2, [r1, r3]
 8006afe:	b10a      	cbz	r2, 8006b04 <__lshift+0xa4>
 8006b00:	f108 0602 	add.w	r6, r8, #2
 8006b04:	3e01      	subs	r6, #1
 8006b06:	4638      	mov	r0, r7
 8006b08:	4621      	mov	r1, r4
 8006b0a:	612e      	str	r6, [r5, #16]
 8006b0c:	f7ff fd90 	bl	8006630 <_Bfree>
 8006b10:	4628      	mov	r0, r5
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	e7c5      	b.n	8006aaa <__lshift+0x4a>
 8006b1e:	3904      	subs	r1, #4
 8006b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b24:	459c      	cmp	ip, r3
 8006b26:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b2a:	d8f9      	bhi.n	8006b20 <__lshift+0xc0>
 8006b2c:	e7ea      	b.n	8006b04 <__lshift+0xa4>
 8006b2e:	bf00      	nop
 8006b30:	08008eeb 	.word	0x08008eeb
 8006b34:	08008efc 	.word	0x08008efc

08006b38 <__mcmp>:
 8006b38:	4603      	mov	r3, r0
 8006b3a:	690a      	ldr	r2, [r1, #16]
 8006b3c:	6900      	ldr	r0, [r0, #16]
 8006b3e:	b530      	push	{r4, r5, lr}
 8006b40:	1a80      	subs	r0, r0, r2
 8006b42:	d10d      	bne.n	8006b60 <__mcmp+0x28>
 8006b44:	3314      	adds	r3, #20
 8006b46:	3114      	adds	r1, #20
 8006b48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b58:	4295      	cmp	r5, r2
 8006b5a:	d002      	beq.n	8006b62 <__mcmp+0x2a>
 8006b5c:	d304      	bcc.n	8006b68 <__mcmp+0x30>
 8006b5e:	2001      	movs	r0, #1
 8006b60:	bd30      	pop	{r4, r5, pc}
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d3f4      	bcc.n	8006b50 <__mcmp+0x18>
 8006b66:	e7fb      	b.n	8006b60 <__mcmp+0x28>
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	e7f8      	b.n	8006b60 <__mcmp+0x28>
	...

08006b70 <__mdiff>:
 8006b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b74:	460d      	mov	r5, r1
 8006b76:	4607      	mov	r7, r0
 8006b78:	4611      	mov	r1, r2
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	f7ff ffdb 	bl	8006b38 <__mcmp>
 8006b82:	1e06      	subs	r6, r0, #0
 8006b84:	d111      	bne.n	8006baa <__mdiff+0x3a>
 8006b86:	4631      	mov	r1, r6
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff fd11 	bl	80065b0 <_Balloc>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	b928      	cbnz	r0, 8006b9e <__mdiff+0x2e>
 8006b92:	f240 2137 	movw	r1, #567	; 0x237
 8006b96:	4b3a      	ldr	r3, [pc, #232]	; (8006c80 <__mdiff+0x110>)
 8006b98:	483a      	ldr	r0, [pc, #232]	; (8006c84 <__mdiff+0x114>)
 8006b9a:	f001 fa87 	bl	80080ac <__assert_func>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	bfa4      	itt	ge
 8006bac:	4623      	movge	r3, r4
 8006bae:	462c      	movge	r4, r5
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	6861      	ldr	r1, [r4, #4]
 8006bb4:	bfa6      	itte	ge
 8006bb6:	461d      	movge	r5, r3
 8006bb8:	2600      	movge	r6, #0
 8006bba:	2601      	movlt	r6, #1
 8006bbc:	f7ff fcf8 	bl	80065b0 <_Balloc>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	b918      	cbnz	r0, 8006bcc <__mdiff+0x5c>
 8006bc4:	f240 2145 	movw	r1, #581	; 0x245
 8006bc8:	4b2d      	ldr	r3, [pc, #180]	; (8006c80 <__mdiff+0x110>)
 8006bca:	e7e5      	b.n	8006b98 <__mdiff+0x28>
 8006bcc:	f102 0814 	add.w	r8, r2, #20
 8006bd0:	46c2      	mov	sl, r8
 8006bd2:	f04f 0c00 	mov.w	ip, #0
 8006bd6:	6927      	ldr	r7, [r4, #16]
 8006bd8:	60c6      	str	r6, [r0, #12]
 8006bda:	692e      	ldr	r6, [r5, #16]
 8006bdc:	f104 0014 	add.w	r0, r4, #20
 8006be0:	f105 0914 	add.w	r9, r5, #20
 8006be4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006be8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bec:	3410      	adds	r4, #16
 8006bee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bf2:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bf6:	fa1f f18b 	uxth.w	r1, fp
 8006bfa:	4461      	add	r1, ip
 8006bfc:	fa1f fc83 	uxth.w	ip, r3
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	eba1 010c 	sub.w	r1, r1, ip
 8006c06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c0e:	b289      	uxth	r1, r1
 8006c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006c14:	454e      	cmp	r6, r9
 8006c16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006c1a:	f84a 1b04 	str.w	r1, [sl], #4
 8006c1e:	d8e6      	bhi.n	8006bee <__mdiff+0x7e>
 8006c20:	1b73      	subs	r3, r6, r5
 8006c22:	3b15      	subs	r3, #21
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	3515      	adds	r5, #21
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	42ae      	cmp	r6, r5
 8006c2e:	bf38      	it	cc
 8006c30:	2304      	movcc	r3, #4
 8006c32:	4418      	add	r0, r3
 8006c34:	4443      	add	r3, r8
 8006c36:	461e      	mov	r6, r3
 8006c38:	4605      	mov	r5, r0
 8006c3a:	4575      	cmp	r5, lr
 8006c3c:	d30e      	bcc.n	8006c5c <__mdiff+0xec>
 8006c3e:	f10e 0103 	add.w	r1, lr, #3
 8006c42:	1a09      	subs	r1, r1, r0
 8006c44:	f021 0103 	bic.w	r1, r1, #3
 8006c48:	3803      	subs	r0, #3
 8006c4a:	4586      	cmp	lr, r0
 8006c4c:	bf38      	it	cc
 8006c4e:	2100      	movcc	r1, #0
 8006c50:	440b      	add	r3, r1
 8006c52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c56:	b189      	cbz	r1, 8006c7c <__mdiff+0x10c>
 8006c58:	6117      	str	r7, [r2, #16]
 8006c5a:	e7a3      	b.n	8006ba4 <__mdiff+0x34>
 8006c5c:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c60:	fa1f f188 	uxth.w	r1, r8
 8006c64:	4461      	add	r1, ip
 8006c66:	140c      	asrs	r4, r1, #16
 8006c68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c6c:	b289      	uxth	r1, r1
 8006c6e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c72:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c76:	f846 1b04 	str.w	r1, [r6], #4
 8006c7a:	e7de      	b.n	8006c3a <__mdiff+0xca>
 8006c7c:	3f01      	subs	r7, #1
 8006c7e:	e7e8      	b.n	8006c52 <__mdiff+0xe2>
 8006c80:	08008eeb 	.word	0x08008eeb
 8006c84:	08008efc 	.word	0x08008efc

08006c88 <__ulp>:
 8006c88:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <__ulp+0x3c>)
 8006c8a:	400b      	ands	r3, r1
 8006c8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc08      	bgt.n	8006ca6 <__ulp+0x1e>
 8006c94:	425b      	negs	r3, r3
 8006c96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006c9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006c9e:	da04      	bge.n	8006caa <__ulp+0x22>
 8006ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ca4:	4113      	asrs	r3, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	e008      	b.n	8006cbc <__ulp+0x34>
 8006caa:	f1a2 0314 	sub.w	r3, r2, #20
 8006cae:	2b1e      	cmp	r3, #30
 8006cb0:	bfd6      	itet	le
 8006cb2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006cb6:	2201      	movgt	r2, #1
 8006cb8:	40da      	lsrle	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	7ff00000 	.word	0x7ff00000

08006cc8 <__b2d>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	6905      	ldr	r5, [r0, #16]
 8006ccc:	f100 0714 	add.w	r7, r0, #20
 8006cd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006cd4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006cd8:	1f2e      	subs	r6, r5, #4
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff fd5a 	bl	8006794 <__hi0bits>
 8006ce0:	f1c0 0220 	rsb	r2, r0, #32
 8006ce4:	280a      	cmp	r0, #10
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006d54 <__b2d+0x8c>
 8006cec:	600a      	str	r2, [r1, #0]
 8006cee:	dc12      	bgt.n	8006d16 <__b2d+0x4e>
 8006cf0:	f1c0 0e0b 	rsb	lr, r0, #11
 8006cf4:	fa24 f20e 	lsr.w	r2, r4, lr
 8006cf8:	42b7      	cmp	r7, r6
 8006cfa:	ea42 010c 	orr.w	r1, r2, ip
 8006cfe:	bf2c      	ite	cs
 8006d00:	2200      	movcs	r2, #0
 8006d02:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006d06:	3315      	adds	r3, #21
 8006d08:	fa04 f303 	lsl.w	r3, r4, r3
 8006d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d10:	431a      	orrs	r2, r3
 8006d12:	4610      	mov	r0, r2
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d16:	42b7      	cmp	r7, r6
 8006d18:	bf2e      	itee	cs
 8006d1a:	2200      	movcs	r2, #0
 8006d1c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006d20:	f1a5 0608 	subcc.w	r6, r5, #8
 8006d24:	3b0b      	subs	r3, #11
 8006d26:	d012      	beq.n	8006d4e <__b2d+0x86>
 8006d28:	f1c3 0520 	rsb	r5, r3, #32
 8006d2c:	fa22 f105 	lsr.w	r1, r2, r5
 8006d30:	409c      	lsls	r4, r3
 8006d32:	430c      	orrs	r4, r1
 8006d34:	42be      	cmp	r6, r7
 8006d36:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006d3a:	bf94      	ite	ls
 8006d3c:	2400      	movls	r4, #0
 8006d3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006d42:	409a      	lsls	r2, r3
 8006d44:	40ec      	lsrs	r4, r5
 8006d46:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006d4a:	4322      	orrs	r2, r4
 8006d4c:	e7e1      	b.n	8006d12 <__b2d+0x4a>
 8006d4e:	ea44 010c 	orr.w	r1, r4, ip
 8006d52:	e7de      	b.n	8006d12 <__b2d+0x4a>
 8006d54:	3ff00000 	.word	0x3ff00000

08006d58 <__d2b>:
 8006d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	4617      	mov	r7, r2
 8006d5e:	461c      	mov	r4, r3
 8006d60:	9e08      	ldr	r6, [sp, #32]
 8006d62:	f7ff fc25 	bl	80065b0 <_Balloc>
 8006d66:	4605      	mov	r5, r0
 8006d68:	b930      	cbnz	r0, 8006d78 <__d2b+0x20>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	f240 310f 	movw	r1, #783	; 0x30f
 8006d70:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <__d2b+0xa4>)
 8006d72:	4823      	ldr	r0, [pc, #140]	; (8006e00 <__d2b+0xa8>)
 8006d74:	f001 f99a 	bl	80080ac <__assert_func>
 8006d78:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006d7c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006d80:	bb24      	cbnz	r4, 8006dcc <__d2b+0x74>
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	d026      	beq.n	8006dd6 <__d2b+0x7e>
 8006d88:	4668      	mov	r0, sp
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	f7ff fd22 	bl	80067d4 <__lo0bits>
 8006d90:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d94:	b1e8      	cbz	r0, 8006dd2 <__d2b+0x7a>
 8006d96:	f1c0 0320 	rsb	r3, r0, #32
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	40c2      	lsrs	r2, r0
 8006da2:	616b      	str	r3, [r5, #20]
 8006da4:	9201      	str	r2, [sp, #4]
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2102      	movne	r1, #2
 8006dae:	2101      	moveq	r1, #1
 8006db0:	61ab      	str	r3, [r5, #24]
 8006db2:	6129      	str	r1, [r5, #16]
 8006db4:	b1bc      	cbz	r4, 8006de6 <__d2b+0x8e>
 8006db6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006dba:	4404      	add	r4, r0
 8006dbc:	6034      	str	r4, [r6, #0]
 8006dbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	6018      	str	r0, [r3, #0]
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	b003      	add	sp, #12
 8006dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dd0:	e7d7      	b.n	8006d82 <__d2b+0x2a>
 8006dd2:	6169      	str	r1, [r5, #20]
 8006dd4:	e7e7      	b.n	8006da6 <__d2b+0x4e>
 8006dd6:	a801      	add	r0, sp, #4
 8006dd8:	f7ff fcfc 	bl	80067d4 <__lo0bits>
 8006ddc:	9b01      	ldr	r3, [sp, #4]
 8006dde:	2101      	movs	r1, #1
 8006de0:	616b      	str	r3, [r5, #20]
 8006de2:	3020      	adds	r0, #32
 8006de4:	e7e5      	b.n	8006db2 <__d2b+0x5a>
 8006de6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006dea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006dee:	6030      	str	r0, [r6, #0]
 8006df0:	6918      	ldr	r0, [r3, #16]
 8006df2:	f7ff fccf 	bl	8006794 <__hi0bits>
 8006df6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006dfa:	e7e2      	b.n	8006dc2 <__d2b+0x6a>
 8006dfc:	08008eeb 	.word	0x08008eeb
 8006e00:	08008efc 	.word	0x08008efc

08006e04 <__ratio>:
 8006e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	4688      	mov	r8, r1
 8006e0a:	4669      	mov	r1, sp
 8006e0c:	4681      	mov	r9, r0
 8006e0e:	f7ff ff5b 	bl	8006cc8 <__b2d>
 8006e12:	460f      	mov	r7, r1
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	4640      	mov	r0, r8
 8006e1a:	a901      	add	r1, sp, #4
 8006e1c:	f7ff ff54 	bl	8006cc8 <__b2d>
 8006e20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e24:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006e28:	468b      	mov	fp, r1
 8006e2a:	eba3 0c02 	sub.w	ip, r3, r2
 8006e2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006e32:	1a9b      	subs	r3, r3, r2
 8006e34:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bfd5      	itete	le
 8006e3c:	460a      	movle	r2, r1
 8006e3e:	462a      	movgt	r2, r5
 8006e40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e44:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006e48:	bfd8      	it	le
 8006e4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006e4e:	465b      	mov	r3, fp
 8006e50:	4602      	mov	r2, r0
 8006e52:	4639      	mov	r1, r7
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7f9 fcd5 	bl	8000804 <__aeabi_ddiv>
 8006e5a:	b003      	add	sp, #12
 8006e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e60 <__copybits>:
 8006e60:	3901      	subs	r1, #1
 8006e62:	b570      	push	{r4, r5, r6, lr}
 8006e64:	1149      	asrs	r1, r1, #5
 8006e66:	6914      	ldr	r4, [r2, #16]
 8006e68:	3101      	adds	r1, #1
 8006e6a:	f102 0314 	add.w	r3, r2, #20
 8006e6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006e72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006e76:	1f05      	subs	r5, r0, #4
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d30c      	bcc.n	8006e96 <__copybits+0x36>
 8006e7c:	1aa3      	subs	r3, r4, r2
 8006e7e:	3b11      	subs	r3, #17
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	3211      	adds	r2, #17
 8006e86:	42a2      	cmp	r2, r4
 8006e88:	bf88      	it	hi
 8006e8a:	2300      	movhi	r3, #0
 8006e8c:	4418      	add	r0, r3
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4288      	cmp	r0, r1
 8006e92:	d305      	bcc.n	8006ea0 <__copybits+0x40>
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
 8006e96:	f853 6b04 	ldr.w	r6, [r3], #4
 8006e9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006e9e:	e7eb      	b.n	8006e78 <__copybits+0x18>
 8006ea0:	f840 3b04 	str.w	r3, [r0], #4
 8006ea4:	e7f4      	b.n	8006e90 <__copybits+0x30>

08006ea6 <__any_on>:
 8006ea6:	f100 0214 	add.w	r2, r0, #20
 8006eaa:	6900      	ldr	r0, [r0, #16]
 8006eac:	114b      	asrs	r3, r1, #5
 8006eae:	4298      	cmp	r0, r3
 8006eb0:	b510      	push	{r4, lr}
 8006eb2:	db11      	blt.n	8006ed8 <__any_on+0x32>
 8006eb4:	dd0a      	ble.n	8006ecc <__any_on+0x26>
 8006eb6:	f011 011f 	ands.w	r1, r1, #31
 8006eba:	d007      	beq.n	8006ecc <__any_on+0x26>
 8006ebc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006ec0:	fa24 f001 	lsr.w	r0, r4, r1
 8006ec4:	fa00 f101 	lsl.w	r1, r0, r1
 8006ec8:	428c      	cmp	r4, r1
 8006eca:	d10b      	bne.n	8006ee4 <__any_on+0x3e>
 8006ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d803      	bhi.n	8006edc <__any_on+0x36>
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	bd10      	pop	{r4, pc}
 8006ed8:	4603      	mov	r3, r0
 8006eda:	e7f7      	b.n	8006ecc <__any_on+0x26>
 8006edc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d0f5      	beq.n	8006ed0 <__any_on+0x2a>
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	e7f6      	b.n	8006ed6 <__any_on+0x30>

08006ee8 <sulp>:
 8006ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eec:	460f      	mov	r7, r1
 8006eee:	4690      	mov	r8, r2
 8006ef0:	f7ff feca 	bl	8006c88 <__ulp>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460d      	mov	r5, r1
 8006ef8:	f1b8 0f00 	cmp.w	r8, #0
 8006efc:	d011      	beq.n	8006f22 <sulp+0x3a>
 8006efe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	dd0b      	ble.n	8006f22 <sulp+0x3a>
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	051b      	lsls	r3, r3, #20
 8006f0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006f12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006f16:	4622      	mov	r2, r4
 8006f18:	462b      	mov	r3, r5
 8006f1a:	f7f9 fb49 	bl	80005b0 <__aeabi_dmul>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	4620      	mov	r0, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2a:	0000      	movs	r0, r0
 8006f2c:	0000      	movs	r0, r0
	...

08006f30 <_strtod_l>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	b09f      	sub	sp, #124	; 0x7c
 8006f36:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	921a      	str	r2, [sp, #104]	; 0x68
 8006f3e:	460d      	mov	r5, r1
 8006f40:	f04f 0800 	mov.w	r8, #0
 8006f44:	f04f 0900 	mov.w	r9, #0
 8006f48:	460a      	mov	r2, r1
 8006f4a:	9219      	str	r2, [sp, #100]	; 0x64
 8006f4c:	7811      	ldrb	r1, [r2, #0]
 8006f4e:	292b      	cmp	r1, #43	; 0x2b
 8006f50:	d04a      	beq.n	8006fe8 <_strtod_l+0xb8>
 8006f52:	d838      	bhi.n	8006fc6 <_strtod_l+0x96>
 8006f54:	290d      	cmp	r1, #13
 8006f56:	d832      	bhi.n	8006fbe <_strtod_l+0x8e>
 8006f58:	2908      	cmp	r1, #8
 8006f5a:	d832      	bhi.n	8006fc2 <_strtod_l+0x92>
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	d03b      	beq.n	8006fd8 <_strtod_l+0xa8>
 8006f60:	2200      	movs	r2, #0
 8006f62:	920e      	str	r2, [sp, #56]	; 0x38
 8006f64:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f66:	7832      	ldrb	r2, [r6, #0]
 8006f68:	2a30      	cmp	r2, #48	; 0x30
 8006f6a:	f040 80b2 	bne.w	80070d2 <_strtod_l+0x1a2>
 8006f6e:	7872      	ldrb	r2, [r6, #1]
 8006f70:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006f74:	2a58      	cmp	r2, #88	; 0x58
 8006f76:	d16e      	bne.n	8007056 <_strtod_l+0x126>
 8006f78:	9302      	str	r3, [sp, #8]
 8006f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	ab1a      	add	r3, sp, #104	; 0x68
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4a8c      	ldr	r2, [pc, #560]	; (80071b8 <_strtod_l+0x288>)
 8006f86:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f88:	a919      	add	r1, sp, #100	; 0x64
 8006f8a:	f001 f929 	bl	80081e0 <__gethex>
 8006f8e:	f010 070f 	ands.w	r7, r0, #15
 8006f92:	4605      	mov	r5, r0
 8006f94:	d005      	beq.n	8006fa2 <_strtod_l+0x72>
 8006f96:	2f06      	cmp	r7, #6
 8006f98:	d128      	bne.n	8006fec <_strtod_l+0xbc>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	3601      	adds	r6, #1
 8006f9e:	9619      	str	r6, [sp, #100]	; 0x64
 8006fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8006fa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 85a0 	bne.w	8007aea <_strtod_l+0xbba>
 8006faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fac:	b1cb      	cbz	r3, 8006fe2 <_strtod_l+0xb2>
 8006fae:	4642      	mov	r2, r8
 8006fb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	b01f      	add	sp, #124	; 0x7c
 8006fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbe:	2920      	cmp	r1, #32
 8006fc0:	d1ce      	bne.n	8006f60 <_strtod_l+0x30>
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	e7c1      	b.n	8006f4a <_strtod_l+0x1a>
 8006fc6:	292d      	cmp	r1, #45	; 0x2d
 8006fc8:	d1ca      	bne.n	8006f60 <_strtod_l+0x30>
 8006fca:	2101      	movs	r1, #1
 8006fcc:	910e      	str	r1, [sp, #56]	; 0x38
 8006fce:	1c51      	adds	r1, r2, #1
 8006fd0:	9119      	str	r1, [sp, #100]	; 0x64
 8006fd2:	7852      	ldrb	r2, [r2, #1]
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d1c5      	bne.n	8006f64 <_strtod_l+0x34>
 8006fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fda:	9519      	str	r5, [sp, #100]	; 0x64
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f040 8582 	bne.w	8007ae6 <_strtod_l+0xbb6>
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	e7e5      	b.n	8006fb4 <_strtod_l+0x84>
 8006fe8:	2100      	movs	r1, #0
 8006fea:	e7ef      	b.n	8006fcc <_strtod_l+0x9c>
 8006fec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fee:	b13a      	cbz	r2, 8007000 <_strtod_l+0xd0>
 8006ff0:	2135      	movs	r1, #53	; 0x35
 8006ff2:	a81c      	add	r0, sp, #112	; 0x70
 8006ff4:	f7ff ff34 	bl	8006e60 <__copybits>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ffc:	f7ff fb18 	bl	8006630 <_Bfree>
 8007000:	3f01      	subs	r7, #1
 8007002:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007004:	2f04      	cmp	r7, #4
 8007006:	d806      	bhi.n	8007016 <_strtod_l+0xe6>
 8007008:	e8df f007 	tbb	[pc, r7]
 800700c:	201d0314 	.word	0x201d0314
 8007010:	14          	.byte	0x14
 8007011:	00          	.byte	0x00
 8007012:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007016:	05e9      	lsls	r1, r5, #23
 8007018:	bf48      	it	mi
 800701a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800701e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007022:	0d1b      	lsrs	r3, r3, #20
 8007024:	051b      	lsls	r3, r3, #20
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1bb      	bne.n	8006fa2 <_strtod_l+0x72>
 800702a:	f7fe fb0b 	bl	8005644 <__errno>
 800702e:	2322      	movs	r3, #34	; 0x22
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	e7b6      	b.n	8006fa2 <_strtod_l+0x72>
 8007034:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007038:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800703c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007040:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007044:	e7e7      	b.n	8007016 <_strtod_l+0xe6>
 8007046:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80071bc <_strtod_l+0x28c>
 800704a:	e7e4      	b.n	8007016 <_strtod_l+0xe6>
 800704c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007050:	f04f 38ff 	mov.w	r8, #4294967295
 8007054:	e7df      	b.n	8007016 <_strtod_l+0xe6>
 8007056:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	9219      	str	r2, [sp, #100]	; 0x64
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b30      	cmp	r3, #48	; 0x30
 8007060:	d0f9      	beq.n	8007056 <_strtod_l+0x126>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d09d      	beq.n	8006fa2 <_strtod_l+0x72>
 8007066:	2301      	movs	r3, #1
 8007068:	f04f 0a00 	mov.w	sl, #0
 800706c:	220a      	movs	r2, #10
 800706e:	46d3      	mov	fp, sl
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007074:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007078:	930b      	str	r3, [sp, #44]	; 0x2c
 800707a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800707c:	7806      	ldrb	r6, [r0, #0]
 800707e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007082:	b2d9      	uxtb	r1, r3
 8007084:	2909      	cmp	r1, #9
 8007086:	d926      	bls.n	80070d6 <_strtod_l+0x1a6>
 8007088:	2201      	movs	r2, #1
 800708a:	494d      	ldr	r1, [pc, #308]	; (80071c0 <_strtod_l+0x290>)
 800708c:	f000 ffe6 	bl	800805c <strncmp>
 8007090:	2800      	cmp	r0, #0
 8007092:	d030      	beq.n	80070f6 <_strtod_l+0x1c6>
 8007094:	2000      	movs	r0, #0
 8007096:	4632      	mov	r2, r6
 8007098:	4603      	mov	r3, r0
 800709a:	465e      	mov	r6, fp
 800709c:	9008      	str	r0, [sp, #32]
 800709e:	2a65      	cmp	r2, #101	; 0x65
 80070a0:	d001      	beq.n	80070a6 <_strtod_l+0x176>
 80070a2:	2a45      	cmp	r2, #69	; 0x45
 80070a4:	d113      	bne.n	80070ce <_strtod_l+0x19e>
 80070a6:	b91e      	cbnz	r6, 80070b0 <_strtod_l+0x180>
 80070a8:	9a05      	ldr	r2, [sp, #20]
 80070aa:	4302      	orrs	r2, r0
 80070ac:	d094      	beq.n	8006fd8 <_strtod_l+0xa8>
 80070ae:	2600      	movs	r6, #0
 80070b0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80070b2:	1c6a      	adds	r2, r5, #1
 80070b4:	9219      	str	r2, [sp, #100]	; 0x64
 80070b6:	786a      	ldrb	r2, [r5, #1]
 80070b8:	2a2b      	cmp	r2, #43	; 0x2b
 80070ba:	d074      	beq.n	80071a6 <_strtod_l+0x276>
 80070bc:	2a2d      	cmp	r2, #45	; 0x2d
 80070be:	d078      	beq.n	80071b2 <_strtod_l+0x282>
 80070c0:	f04f 0c00 	mov.w	ip, #0
 80070c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070c8:	2909      	cmp	r1, #9
 80070ca:	d97f      	bls.n	80071cc <_strtod_l+0x29c>
 80070cc:	9519      	str	r5, [sp, #100]	; 0x64
 80070ce:	2700      	movs	r7, #0
 80070d0:	e09e      	b.n	8007210 <_strtod_l+0x2e0>
 80070d2:	2300      	movs	r3, #0
 80070d4:	e7c8      	b.n	8007068 <_strtod_l+0x138>
 80070d6:	f1bb 0f08 	cmp.w	fp, #8
 80070da:	bfd8      	it	le
 80070dc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80070de:	f100 0001 	add.w	r0, r0, #1
 80070e2:	bfd6      	itet	le
 80070e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80070e8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80070ec:	930a      	strle	r3, [sp, #40]	; 0x28
 80070ee:	f10b 0b01 	add.w	fp, fp, #1
 80070f2:	9019      	str	r0, [sp, #100]	; 0x64
 80070f4:	e7c1      	b.n	800707a <_strtod_l+0x14a>
 80070f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	9219      	str	r2, [sp, #100]	; 0x64
 80070fc:	785a      	ldrb	r2, [r3, #1]
 80070fe:	f1bb 0f00 	cmp.w	fp, #0
 8007102:	d037      	beq.n	8007174 <_strtod_l+0x244>
 8007104:	465e      	mov	r6, fp
 8007106:	9008      	str	r0, [sp, #32]
 8007108:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800710c:	2b09      	cmp	r3, #9
 800710e:	d912      	bls.n	8007136 <_strtod_l+0x206>
 8007110:	2301      	movs	r3, #1
 8007112:	e7c4      	b.n	800709e <_strtod_l+0x16e>
 8007114:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007116:	3001      	adds	r0, #1
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	9219      	str	r2, [sp, #100]	; 0x64
 800711c:	785a      	ldrb	r2, [r3, #1]
 800711e:	2a30      	cmp	r2, #48	; 0x30
 8007120:	d0f8      	beq.n	8007114 <_strtod_l+0x1e4>
 8007122:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007126:	2b08      	cmp	r3, #8
 8007128:	f200 84e4 	bhi.w	8007af4 <_strtod_l+0xbc4>
 800712c:	9008      	str	r0, [sp, #32]
 800712e:	2000      	movs	r0, #0
 8007130:	4606      	mov	r6, r0
 8007132:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007134:	930b      	str	r3, [sp, #44]	; 0x2c
 8007136:	3a30      	subs	r2, #48	; 0x30
 8007138:	f100 0301 	add.w	r3, r0, #1
 800713c:	d014      	beq.n	8007168 <_strtod_l+0x238>
 800713e:	9908      	ldr	r1, [sp, #32]
 8007140:	eb00 0c06 	add.w	ip, r0, r6
 8007144:	4419      	add	r1, r3
 8007146:	9108      	str	r1, [sp, #32]
 8007148:	4633      	mov	r3, r6
 800714a:	210a      	movs	r1, #10
 800714c:	4563      	cmp	r3, ip
 800714e:	d113      	bne.n	8007178 <_strtod_l+0x248>
 8007150:	1833      	adds	r3, r6, r0
 8007152:	2b08      	cmp	r3, #8
 8007154:	f106 0601 	add.w	r6, r6, #1
 8007158:	4406      	add	r6, r0
 800715a:	dc1a      	bgt.n	8007192 <_strtod_l+0x262>
 800715c:	230a      	movs	r3, #10
 800715e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007160:	fb03 2301 	mla	r3, r3, r1, r2
 8007164:	930a      	str	r3, [sp, #40]	; 0x28
 8007166:	2300      	movs	r3, #0
 8007168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800716a:	4618      	mov	r0, r3
 800716c:	1c51      	adds	r1, r2, #1
 800716e:	9119      	str	r1, [sp, #100]	; 0x64
 8007170:	7852      	ldrb	r2, [r2, #1]
 8007172:	e7c9      	b.n	8007108 <_strtod_l+0x1d8>
 8007174:	4658      	mov	r0, fp
 8007176:	e7d2      	b.n	800711e <_strtod_l+0x1ee>
 8007178:	2b08      	cmp	r3, #8
 800717a:	f103 0301 	add.w	r3, r3, #1
 800717e:	dc03      	bgt.n	8007188 <_strtod_l+0x258>
 8007180:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007182:	434f      	muls	r7, r1
 8007184:	970a      	str	r7, [sp, #40]	; 0x28
 8007186:	e7e1      	b.n	800714c <_strtod_l+0x21c>
 8007188:	2b10      	cmp	r3, #16
 800718a:	bfd8      	it	le
 800718c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007190:	e7dc      	b.n	800714c <_strtod_l+0x21c>
 8007192:	2e10      	cmp	r6, #16
 8007194:	bfdc      	itt	le
 8007196:	230a      	movle	r3, #10
 8007198:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800719c:	e7e3      	b.n	8007166 <_strtod_l+0x236>
 800719e:	2300      	movs	r3, #0
 80071a0:	9308      	str	r3, [sp, #32]
 80071a2:	2301      	movs	r3, #1
 80071a4:	e780      	b.n	80070a8 <_strtod_l+0x178>
 80071a6:	f04f 0c00 	mov.w	ip, #0
 80071aa:	1caa      	adds	r2, r5, #2
 80071ac:	9219      	str	r2, [sp, #100]	; 0x64
 80071ae:	78aa      	ldrb	r2, [r5, #2]
 80071b0:	e788      	b.n	80070c4 <_strtod_l+0x194>
 80071b2:	f04f 0c01 	mov.w	ip, #1
 80071b6:	e7f8      	b.n	80071aa <_strtod_l+0x27a>
 80071b8:	08009058 	.word	0x08009058
 80071bc:	7ff00000 	.word	0x7ff00000
 80071c0:	08009054 	.word	0x08009054
 80071c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071c6:	1c51      	adds	r1, r2, #1
 80071c8:	9119      	str	r1, [sp, #100]	; 0x64
 80071ca:	7852      	ldrb	r2, [r2, #1]
 80071cc:	2a30      	cmp	r2, #48	; 0x30
 80071ce:	d0f9      	beq.n	80071c4 <_strtod_l+0x294>
 80071d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80071d4:	2908      	cmp	r1, #8
 80071d6:	f63f af7a 	bhi.w	80070ce <_strtod_l+0x19e>
 80071da:	3a30      	subs	r2, #48	; 0x30
 80071dc:	9209      	str	r2, [sp, #36]	; 0x24
 80071de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071e0:	920c      	str	r2, [sp, #48]	; 0x30
 80071e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80071e4:	1c57      	adds	r7, r2, #1
 80071e6:	9719      	str	r7, [sp, #100]	; 0x64
 80071e8:	7852      	ldrb	r2, [r2, #1]
 80071ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80071ee:	f1be 0f09 	cmp.w	lr, #9
 80071f2:	d938      	bls.n	8007266 <_strtod_l+0x336>
 80071f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071f6:	1a7f      	subs	r7, r7, r1
 80071f8:	2f08      	cmp	r7, #8
 80071fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80071fe:	dc03      	bgt.n	8007208 <_strtod_l+0x2d8>
 8007200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007202:	428f      	cmp	r7, r1
 8007204:	bfa8      	it	ge
 8007206:	460f      	movge	r7, r1
 8007208:	f1bc 0f00 	cmp.w	ip, #0
 800720c:	d000      	beq.n	8007210 <_strtod_l+0x2e0>
 800720e:	427f      	negs	r7, r7
 8007210:	2e00      	cmp	r6, #0
 8007212:	d14f      	bne.n	80072b4 <_strtod_l+0x384>
 8007214:	9905      	ldr	r1, [sp, #20]
 8007216:	4301      	orrs	r1, r0
 8007218:	f47f aec3 	bne.w	8006fa2 <_strtod_l+0x72>
 800721c:	2b00      	cmp	r3, #0
 800721e:	f47f aedb 	bne.w	8006fd8 <_strtod_l+0xa8>
 8007222:	2a69      	cmp	r2, #105	; 0x69
 8007224:	d029      	beq.n	800727a <_strtod_l+0x34a>
 8007226:	dc26      	bgt.n	8007276 <_strtod_l+0x346>
 8007228:	2a49      	cmp	r2, #73	; 0x49
 800722a:	d026      	beq.n	800727a <_strtod_l+0x34a>
 800722c:	2a4e      	cmp	r2, #78	; 0x4e
 800722e:	f47f aed3 	bne.w	8006fd8 <_strtod_l+0xa8>
 8007232:	499a      	ldr	r1, [pc, #616]	; (800749c <_strtod_l+0x56c>)
 8007234:	a819      	add	r0, sp, #100	; 0x64
 8007236:	f001 fa15 	bl	8008664 <__match>
 800723a:	2800      	cmp	r0, #0
 800723c:	f43f aecc 	beq.w	8006fd8 <_strtod_l+0xa8>
 8007240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b28      	cmp	r3, #40	; 0x28
 8007246:	d12f      	bne.n	80072a8 <_strtod_l+0x378>
 8007248:	4995      	ldr	r1, [pc, #596]	; (80074a0 <_strtod_l+0x570>)
 800724a:	aa1c      	add	r2, sp, #112	; 0x70
 800724c:	a819      	add	r0, sp, #100	; 0x64
 800724e:	f001 fa1d 	bl	800868c <__hexnan>
 8007252:	2805      	cmp	r0, #5
 8007254:	d128      	bne.n	80072a8 <_strtod_l+0x378>
 8007256:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007258:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800725c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007260:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007264:	e69d      	b.n	8006fa2 <_strtod_l+0x72>
 8007266:	210a      	movs	r1, #10
 8007268:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800726a:	fb01 2107 	mla	r1, r1, r7, r2
 800726e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007272:	9209      	str	r2, [sp, #36]	; 0x24
 8007274:	e7b5      	b.n	80071e2 <_strtod_l+0x2b2>
 8007276:	2a6e      	cmp	r2, #110	; 0x6e
 8007278:	e7d9      	b.n	800722e <_strtod_l+0x2fe>
 800727a:	498a      	ldr	r1, [pc, #552]	; (80074a4 <_strtod_l+0x574>)
 800727c:	a819      	add	r0, sp, #100	; 0x64
 800727e:	f001 f9f1 	bl	8008664 <__match>
 8007282:	2800      	cmp	r0, #0
 8007284:	f43f aea8 	beq.w	8006fd8 <_strtod_l+0xa8>
 8007288:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800728a:	4987      	ldr	r1, [pc, #540]	; (80074a8 <_strtod_l+0x578>)
 800728c:	3b01      	subs	r3, #1
 800728e:	a819      	add	r0, sp, #100	; 0x64
 8007290:	9319      	str	r3, [sp, #100]	; 0x64
 8007292:	f001 f9e7 	bl	8008664 <__match>
 8007296:	b910      	cbnz	r0, 800729e <_strtod_l+0x36e>
 8007298:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800729a:	3301      	adds	r3, #1
 800729c:	9319      	str	r3, [sp, #100]	; 0x64
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80074ac <_strtod_l+0x57c>
 80072a6:	e67c      	b.n	8006fa2 <_strtod_l+0x72>
 80072a8:	4881      	ldr	r0, [pc, #516]	; (80074b0 <_strtod_l+0x580>)
 80072aa:	f000 fef9 	bl	80080a0 <nan>
 80072ae:	4680      	mov	r8, r0
 80072b0:	4689      	mov	r9, r1
 80072b2:	e676      	b.n	8006fa2 <_strtod_l+0x72>
 80072b4:	9b08      	ldr	r3, [sp, #32]
 80072b6:	f1bb 0f00 	cmp.w	fp, #0
 80072ba:	bf08      	it	eq
 80072bc:	46b3      	moveq	fp, r6
 80072be:	1afb      	subs	r3, r7, r3
 80072c0:	2e10      	cmp	r6, #16
 80072c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072c4:	4635      	mov	r5, r6
 80072c6:	9309      	str	r3, [sp, #36]	; 0x24
 80072c8:	bfa8      	it	ge
 80072ca:	2510      	movge	r5, #16
 80072cc:	f7f9 f8f6 	bl	80004bc <__aeabi_ui2d>
 80072d0:	2e09      	cmp	r6, #9
 80072d2:	4680      	mov	r8, r0
 80072d4:	4689      	mov	r9, r1
 80072d6:	dd13      	ble.n	8007300 <_strtod_l+0x3d0>
 80072d8:	4b76      	ldr	r3, [pc, #472]	; (80074b4 <_strtod_l+0x584>)
 80072da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072e2:	f7f9 f965 	bl	80005b0 <__aeabi_dmul>
 80072e6:	4680      	mov	r8, r0
 80072e8:	4650      	mov	r0, sl
 80072ea:	4689      	mov	r9, r1
 80072ec:	f7f9 f8e6 	bl	80004bc <__aeabi_ui2d>
 80072f0:	4602      	mov	r2, r0
 80072f2:	460b      	mov	r3, r1
 80072f4:	4640      	mov	r0, r8
 80072f6:	4649      	mov	r1, r9
 80072f8:	f7f8 ffa4 	bl	8000244 <__adddf3>
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	2e0f      	cmp	r6, #15
 8007302:	dc36      	bgt.n	8007372 <_strtod_l+0x442>
 8007304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	f43f ae4b 	beq.w	8006fa2 <_strtod_l+0x72>
 800730c:	dd22      	ble.n	8007354 <_strtod_l+0x424>
 800730e:	2b16      	cmp	r3, #22
 8007310:	dc09      	bgt.n	8007326 <_strtod_l+0x3f6>
 8007312:	4968      	ldr	r1, [pc, #416]	; (80074b4 <_strtod_l+0x584>)
 8007314:	4642      	mov	r2, r8
 8007316:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800731a:	464b      	mov	r3, r9
 800731c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007320:	f7f9 f946 	bl	80005b0 <__aeabi_dmul>
 8007324:	e7c3      	b.n	80072ae <_strtod_l+0x37e>
 8007326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007328:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800732c:	4293      	cmp	r3, r2
 800732e:	db20      	blt.n	8007372 <_strtod_l+0x442>
 8007330:	4c60      	ldr	r4, [pc, #384]	; (80074b4 <_strtod_l+0x584>)
 8007332:	f1c6 060f 	rsb	r6, r6, #15
 8007336:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800733a:	4642      	mov	r2, r8
 800733c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007340:	464b      	mov	r3, r9
 8007342:	f7f9 f935 	bl	80005b0 <__aeabi_dmul>
 8007346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007348:	1b9e      	subs	r6, r3, r6
 800734a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800734e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007352:	e7e5      	b.n	8007320 <_strtod_l+0x3f0>
 8007354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007356:	3316      	adds	r3, #22
 8007358:	db0b      	blt.n	8007372 <_strtod_l+0x442>
 800735a:	9b08      	ldr	r3, [sp, #32]
 800735c:	4640      	mov	r0, r8
 800735e:	1bdf      	subs	r7, r3, r7
 8007360:	4b54      	ldr	r3, [pc, #336]	; (80074b4 <_strtod_l+0x584>)
 8007362:	4649      	mov	r1, r9
 8007364:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736c:	f7f9 fa4a 	bl	8000804 <__aeabi_ddiv>
 8007370:	e79d      	b.n	80072ae <_strtod_l+0x37e>
 8007372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007374:	1b75      	subs	r5, r6, r5
 8007376:	441d      	add	r5, r3
 8007378:	2d00      	cmp	r5, #0
 800737a:	dd70      	ble.n	800745e <_strtod_l+0x52e>
 800737c:	f015 030f 	ands.w	r3, r5, #15
 8007380:	d00a      	beq.n	8007398 <_strtod_l+0x468>
 8007382:	494c      	ldr	r1, [pc, #304]	; (80074b4 <_strtod_l+0x584>)
 8007384:	4642      	mov	r2, r8
 8007386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800738a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800738e:	464b      	mov	r3, r9
 8007390:	f7f9 f90e 	bl	80005b0 <__aeabi_dmul>
 8007394:	4680      	mov	r8, r0
 8007396:	4689      	mov	r9, r1
 8007398:	f035 050f 	bics.w	r5, r5, #15
 800739c:	d04d      	beq.n	800743a <_strtod_l+0x50a>
 800739e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80073a2:	dd22      	ble.n	80073ea <_strtod_l+0x4ba>
 80073a4:	2600      	movs	r6, #0
 80073a6:	46b3      	mov	fp, r6
 80073a8:	960b      	str	r6, [sp, #44]	; 0x2c
 80073aa:	9608      	str	r6, [sp, #32]
 80073ac:	2322      	movs	r3, #34	; 0x22
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80074ac <_strtod_l+0x57c>
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f43f adf1 	beq.w	8006fa2 <_strtod_l+0x72>
 80073c0:	4620      	mov	r0, r4
 80073c2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80073c4:	f7ff f934 	bl	8006630 <_Bfree>
 80073c8:	4620      	mov	r0, r4
 80073ca:	9908      	ldr	r1, [sp, #32]
 80073cc:	f7ff f930 	bl	8006630 <_Bfree>
 80073d0:	4659      	mov	r1, fp
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7ff f92c 	bl	8006630 <_Bfree>
 80073d8:	4620      	mov	r0, r4
 80073da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073dc:	f7ff f928 	bl	8006630 <_Bfree>
 80073e0:	4631      	mov	r1, r6
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7ff f924 	bl	8006630 <_Bfree>
 80073e8:	e5db      	b.n	8006fa2 <_strtod_l+0x72>
 80073ea:	4b33      	ldr	r3, [pc, #204]	; (80074b8 <_strtod_l+0x588>)
 80073ec:	4640      	mov	r0, r8
 80073ee:	9305      	str	r3, [sp, #20]
 80073f0:	2300      	movs	r3, #0
 80073f2:	4649      	mov	r1, r9
 80073f4:	469a      	mov	sl, r3
 80073f6:	112d      	asrs	r5, r5, #4
 80073f8:	2d01      	cmp	r5, #1
 80073fa:	dc21      	bgt.n	8007440 <_strtod_l+0x510>
 80073fc:	b10b      	cbz	r3, 8007402 <_strtod_l+0x4d2>
 80073fe:	4680      	mov	r8, r0
 8007400:	4689      	mov	r9, r1
 8007402:	492d      	ldr	r1, [pc, #180]	; (80074b8 <_strtod_l+0x588>)
 8007404:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007408:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800740c:	4642      	mov	r2, r8
 800740e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007412:	464b      	mov	r3, r9
 8007414:	f7f9 f8cc 	bl	80005b0 <__aeabi_dmul>
 8007418:	4b24      	ldr	r3, [pc, #144]	; (80074ac <_strtod_l+0x57c>)
 800741a:	460a      	mov	r2, r1
 800741c:	400b      	ands	r3, r1
 800741e:	4927      	ldr	r1, [pc, #156]	; (80074bc <_strtod_l+0x58c>)
 8007420:	4680      	mov	r8, r0
 8007422:	428b      	cmp	r3, r1
 8007424:	d8be      	bhi.n	80073a4 <_strtod_l+0x474>
 8007426:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800742a:	428b      	cmp	r3, r1
 800742c:	bf86      	itte	hi
 800742e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007432:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80074c0 <_strtod_l+0x590>
 8007436:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800743a:	2300      	movs	r3, #0
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	e07b      	b.n	8007538 <_strtod_l+0x608>
 8007440:	07ea      	lsls	r2, r5, #31
 8007442:	d505      	bpl.n	8007450 <_strtod_l+0x520>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f9 f8b1 	bl	80005b0 <__aeabi_dmul>
 800744e:	2301      	movs	r3, #1
 8007450:	9a05      	ldr	r2, [sp, #20]
 8007452:	f10a 0a01 	add.w	sl, sl, #1
 8007456:	3208      	adds	r2, #8
 8007458:	106d      	asrs	r5, r5, #1
 800745a:	9205      	str	r2, [sp, #20]
 800745c:	e7cc      	b.n	80073f8 <_strtod_l+0x4c8>
 800745e:	d0ec      	beq.n	800743a <_strtod_l+0x50a>
 8007460:	426d      	negs	r5, r5
 8007462:	f015 020f 	ands.w	r2, r5, #15
 8007466:	d00a      	beq.n	800747e <_strtod_l+0x54e>
 8007468:	4b12      	ldr	r3, [pc, #72]	; (80074b4 <_strtod_l+0x584>)
 800746a:	4640      	mov	r0, r8
 800746c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007470:	4649      	mov	r1, r9
 8007472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007476:	f7f9 f9c5 	bl	8000804 <__aeabi_ddiv>
 800747a:	4680      	mov	r8, r0
 800747c:	4689      	mov	r9, r1
 800747e:	112d      	asrs	r5, r5, #4
 8007480:	d0db      	beq.n	800743a <_strtod_l+0x50a>
 8007482:	2d1f      	cmp	r5, #31
 8007484:	dd1e      	ble.n	80074c4 <_strtod_l+0x594>
 8007486:	2600      	movs	r6, #0
 8007488:	46b3      	mov	fp, r6
 800748a:	960b      	str	r6, [sp, #44]	; 0x2c
 800748c:	9608      	str	r6, [sp, #32]
 800748e:	2322      	movs	r3, #34	; 0x22
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	f04f 0900 	mov.w	r9, #0
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	e78d      	b.n	80073b8 <_strtod_l+0x488>
 800749c:	08008e43 	.word	0x08008e43
 80074a0:	0800906c 	.word	0x0800906c
 80074a4:	08008e3b 	.word	0x08008e3b
 80074a8:	08008e72 	.word	0x08008e72
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	080091fd 	.word	0x080091fd
 80074b4:	08008f80 	.word	0x08008f80
 80074b8:	08008f58 	.word	0x08008f58
 80074bc:	7ca00000 	.word	0x7ca00000
 80074c0:	7fefffff 	.word	0x7fefffff
 80074c4:	f015 0310 	ands.w	r3, r5, #16
 80074c8:	bf18      	it	ne
 80074ca:	236a      	movne	r3, #106	; 0x6a
 80074cc:	4640      	mov	r0, r8
 80074ce:	9305      	str	r3, [sp, #20]
 80074d0:	4649      	mov	r1, r9
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80077a0 <_strtod_l+0x870>
 80074d8:	07ea      	lsls	r2, r5, #31
 80074da:	d504      	bpl.n	80074e6 <_strtod_l+0x5b6>
 80074dc:	e9da 2300 	ldrd	r2, r3, [sl]
 80074e0:	f7f9 f866 	bl	80005b0 <__aeabi_dmul>
 80074e4:	2301      	movs	r3, #1
 80074e6:	106d      	asrs	r5, r5, #1
 80074e8:	f10a 0a08 	add.w	sl, sl, #8
 80074ec:	d1f4      	bne.n	80074d8 <_strtod_l+0x5a8>
 80074ee:	b10b      	cbz	r3, 80074f4 <_strtod_l+0x5c4>
 80074f0:	4680      	mov	r8, r0
 80074f2:	4689      	mov	r9, r1
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	b1bb      	cbz	r3, 8007528 <_strtod_l+0x5f8>
 80074f8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80074fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007500:	2b00      	cmp	r3, #0
 8007502:	4649      	mov	r1, r9
 8007504:	dd10      	ble.n	8007528 <_strtod_l+0x5f8>
 8007506:	2b1f      	cmp	r3, #31
 8007508:	f340 8128 	ble.w	800775c <_strtod_l+0x82c>
 800750c:	2b34      	cmp	r3, #52	; 0x34
 800750e:	bfd8      	it	le
 8007510:	f04f 33ff 	movle.w	r3, #4294967295
 8007514:	f04f 0800 	mov.w	r8, #0
 8007518:	bfcf      	iteee	gt
 800751a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800751e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007522:	4093      	lslle	r3, r2
 8007524:	ea03 0901 	andle.w	r9, r3, r1
 8007528:	2200      	movs	r2, #0
 800752a:	2300      	movs	r3, #0
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f9 faa6 	bl	8000a80 <__aeabi_dcmpeq>
 8007534:	2800      	cmp	r0, #0
 8007536:	d1a6      	bne.n	8007486 <_strtod_l+0x556>
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	465a      	mov	r2, fp
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4620      	mov	r0, r4
 8007540:	4633      	mov	r3, r6
 8007542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007544:	f7ff f8dc 	bl	8006700 <__s2b>
 8007548:	900b      	str	r0, [sp, #44]	; 0x2c
 800754a:	2800      	cmp	r0, #0
 800754c:	f43f af2a 	beq.w	80073a4 <_strtod_l+0x474>
 8007550:	2600      	movs	r6, #0
 8007552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007554:	9b08      	ldr	r3, [sp, #32]
 8007556:	2a00      	cmp	r2, #0
 8007558:	eba3 0307 	sub.w	r3, r3, r7
 800755c:	bfa8      	it	ge
 800755e:	2300      	movge	r3, #0
 8007560:	46b3      	mov	fp, r6
 8007562:	9312      	str	r3, [sp, #72]	; 0x48
 8007564:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007568:	9316      	str	r3, [sp, #88]	; 0x58
 800756a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800756c:	4620      	mov	r0, r4
 800756e:	6859      	ldr	r1, [r3, #4]
 8007570:	f7ff f81e 	bl	80065b0 <_Balloc>
 8007574:	9008      	str	r0, [sp, #32]
 8007576:	2800      	cmp	r0, #0
 8007578:	f43f af18 	beq.w	80073ac <_strtod_l+0x47c>
 800757c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800757e:	300c      	adds	r0, #12
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	f103 010c 	add.w	r1, r3, #12
 8007586:	3202      	adds	r2, #2
 8007588:	0092      	lsls	r2, r2, #2
 800758a:	f7fe f895 	bl	80056b8 <memcpy>
 800758e:	ab1c      	add	r3, sp, #112	; 0x70
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	ab1b      	add	r3, sp, #108	; 0x6c
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	4642      	mov	r2, r8
 8007598:	464b      	mov	r3, r9
 800759a:	4620      	mov	r0, r4
 800759c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80075a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80075a4:	f7ff fbd8 	bl	8006d58 <__d2b>
 80075a8:	901a      	str	r0, [sp, #104]	; 0x68
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f43f aefe 	beq.w	80073ac <_strtod_l+0x47c>
 80075b0:	2101      	movs	r1, #1
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff f93c 	bl	8006830 <__i2b>
 80075b8:	4683      	mov	fp, r0
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f43f aef6 	beq.w	80073ac <_strtod_l+0x47c>
 80075c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80075c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80075c4:	2f00      	cmp	r7, #0
 80075c6:	bfab      	itete	ge
 80075c8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80075ca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80075cc:	eb07 0a03 	addge.w	sl, r7, r3
 80075d0:	1bdd      	sublt	r5, r3, r7
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	bfa8      	it	ge
 80075d6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80075d8:	eba7 0703 	sub.w	r7, r7, r3
 80075dc:	4417      	add	r7, r2
 80075de:	4b71      	ldr	r3, [pc, #452]	; (80077a4 <_strtod_l+0x874>)
 80075e0:	f107 37ff 	add.w	r7, r7, #4294967295
 80075e4:	bfb8      	it	lt
 80075e6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80075ea:	429f      	cmp	r7, r3
 80075ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075f0:	f280 80c7 	bge.w	8007782 <_strtod_l+0x852>
 80075f4:	1bdb      	subs	r3, r3, r7
 80075f6:	2b1f      	cmp	r3, #31
 80075f8:	f04f 0101 	mov.w	r1, #1
 80075fc:	eba2 0203 	sub.w	r2, r2, r3
 8007600:	f300 80b3 	bgt.w	800776a <_strtod_l+0x83a>
 8007604:	fa01 f303 	lsl.w	r3, r1, r3
 8007608:	9313      	str	r3, [sp, #76]	; 0x4c
 800760a:	2300      	movs	r3, #0
 800760c:	9310      	str	r3, [sp, #64]	; 0x40
 800760e:	eb0a 0702 	add.w	r7, sl, r2
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	45ba      	cmp	sl, r7
 8007616:	4415      	add	r5, r2
 8007618:	441d      	add	r5, r3
 800761a:	4653      	mov	r3, sl
 800761c:	bfa8      	it	ge
 800761e:	463b      	movge	r3, r7
 8007620:	42ab      	cmp	r3, r5
 8007622:	bfa8      	it	ge
 8007624:	462b      	movge	r3, r5
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfc2      	ittt	gt
 800762a:	1aff      	subgt	r7, r7, r3
 800762c:	1aed      	subgt	r5, r5, r3
 800762e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007634:	2b00      	cmp	r3, #0
 8007636:	dd17      	ble.n	8007668 <_strtod_l+0x738>
 8007638:	4659      	mov	r1, fp
 800763a:	461a      	mov	r2, r3
 800763c:	4620      	mov	r0, r4
 800763e:	f7ff f9b5 	bl	80069ac <__pow5mult>
 8007642:	4683      	mov	fp, r0
 8007644:	2800      	cmp	r0, #0
 8007646:	f43f aeb1 	beq.w	80073ac <_strtod_l+0x47c>
 800764a:	4601      	mov	r1, r0
 800764c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800764e:	4620      	mov	r0, r4
 8007650:	f7ff f904 	bl	800685c <__multiply>
 8007654:	900a      	str	r0, [sp, #40]	; 0x28
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f aea8 	beq.w	80073ac <_strtod_l+0x47c>
 800765c:	4620      	mov	r0, r4
 800765e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007660:	f7fe ffe6 	bl	8006630 <_Bfree>
 8007664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007666:	931a      	str	r3, [sp, #104]	; 0x68
 8007668:	2f00      	cmp	r7, #0
 800766a:	f300 808f 	bgt.w	800778c <_strtod_l+0x85c>
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	dd08      	ble.n	8007686 <_strtod_l+0x756>
 8007674:	4620      	mov	r0, r4
 8007676:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007678:	9908      	ldr	r1, [sp, #32]
 800767a:	f7ff f997 	bl	80069ac <__pow5mult>
 800767e:	9008      	str	r0, [sp, #32]
 8007680:	2800      	cmp	r0, #0
 8007682:	f43f ae93 	beq.w	80073ac <_strtod_l+0x47c>
 8007686:	2d00      	cmp	r5, #0
 8007688:	dd08      	ble.n	800769c <_strtod_l+0x76c>
 800768a:	462a      	mov	r2, r5
 800768c:	4620      	mov	r0, r4
 800768e:	9908      	ldr	r1, [sp, #32]
 8007690:	f7ff f9e6 	bl	8006a60 <__lshift>
 8007694:	9008      	str	r0, [sp, #32]
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f ae88 	beq.w	80073ac <_strtod_l+0x47c>
 800769c:	f1ba 0f00 	cmp.w	sl, #0
 80076a0:	dd08      	ble.n	80076b4 <_strtod_l+0x784>
 80076a2:	4659      	mov	r1, fp
 80076a4:	4652      	mov	r2, sl
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff f9da 	bl	8006a60 <__lshift>
 80076ac:	4683      	mov	fp, r0
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f ae7c 	beq.w	80073ac <_strtod_l+0x47c>
 80076b4:	4620      	mov	r0, r4
 80076b6:	9a08      	ldr	r2, [sp, #32]
 80076b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076ba:	f7ff fa59 	bl	8006b70 <__mdiff>
 80076be:	4606      	mov	r6, r0
 80076c0:	2800      	cmp	r0, #0
 80076c2:	f43f ae73 	beq.w	80073ac <_strtod_l+0x47c>
 80076c6:	2500      	movs	r5, #0
 80076c8:	68c3      	ldr	r3, [r0, #12]
 80076ca:	4659      	mov	r1, fp
 80076cc:	60c5      	str	r5, [r0, #12]
 80076ce:	930a      	str	r3, [sp, #40]	; 0x28
 80076d0:	f7ff fa32 	bl	8006b38 <__mcmp>
 80076d4:	42a8      	cmp	r0, r5
 80076d6:	da6b      	bge.n	80077b0 <_strtod_l+0x880>
 80076d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076da:	ea53 0308 	orrs.w	r3, r3, r8
 80076de:	f040 808f 	bne.w	8007800 <_strtod_l+0x8d0>
 80076e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 808a 	bne.w	8007800 <_strtod_l+0x8d0>
 80076ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076f8:	f240 8082 	bls.w	8007800 <_strtod_l+0x8d0>
 80076fc:	6973      	ldr	r3, [r6, #20]
 80076fe:	b913      	cbnz	r3, 8007706 <_strtod_l+0x7d6>
 8007700:	6933      	ldr	r3, [r6, #16]
 8007702:	2b01      	cmp	r3, #1
 8007704:	dd7c      	ble.n	8007800 <_strtod_l+0x8d0>
 8007706:	4631      	mov	r1, r6
 8007708:	2201      	movs	r2, #1
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff f9a8 	bl	8006a60 <__lshift>
 8007710:	4659      	mov	r1, fp
 8007712:	4606      	mov	r6, r0
 8007714:	f7ff fa10 	bl	8006b38 <__mcmp>
 8007718:	2800      	cmp	r0, #0
 800771a:	dd71      	ble.n	8007800 <_strtod_l+0x8d0>
 800771c:	9905      	ldr	r1, [sp, #20]
 800771e:	464b      	mov	r3, r9
 8007720:	4a21      	ldr	r2, [pc, #132]	; (80077a8 <_strtod_l+0x878>)
 8007722:	2900      	cmp	r1, #0
 8007724:	f000 808d 	beq.w	8007842 <_strtod_l+0x912>
 8007728:	ea02 0109 	and.w	r1, r2, r9
 800772c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007730:	f300 8087 	bgt.w	8007842 <_strtod_l+0x912>
 8007734:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007738:	f77f aea9 	ble.w	800748e <_strtod_l+0x55e>
 800773c:	4640      	mov	r0, r8
 800773e:	4649      	mov	r1, r9
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <_strtod_l+0x87c>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 ff34 	bl	80005b0 <__aeabi_dmul>
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <_strtod_l+0x878>)
 800774a:	4680      	mov	r8, r0
 800774c:	400b      	ands	r3, r1
 800774e:	4689      	mov	r9, r1
 8007750:	2b00      	cmp	r3, #0
 8007752:	f47f ae35 	bne.w	80073c0 <_strtod_l+0x490>
 8007756:	2322      	movs	r3, #34	; 0x22
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	e631      	b.n	80073c0 <_strtod_l+0x490>
 800775c:	f04f 32ff 	mov.w	r2, #4294967295
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	ea03 0808 	and.w	r8, r3, r8
 8007768:	e6de      	b.n	8007528 <_strtod_l+0x5f8>
 800776a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800776e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007772:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007776:	37e2      	adds	r7, #226	; 0xe2
 8007778:	fa01 f307 	lsl.w	r3, r1, r7
 800777c:	9310      	str	r3, [sp, #64]	; 0x40
 800777e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007780:	e745      	b.n	800760e <_strtod_l+0x6de>
 8007782:	2300      	movs	r3, #0
 8007784:	9310      	str	r3, [sp, #64]	; 0x40
 8007786:	2301      	movs	r3, #1
 8007788:	9313      	str	r3, [sp, #76]	; 0x4c
 800778a:	e740      	b.n	800760e <_strtod_l+0x6de>
 800778c:	463a      	mov	r2, r7
 800778e:	4620      	mov	r0, r4
 8007790:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007792:	f7ff f965 	bl	8006a60 <__lshift>
 8007796:	901a      	str	r0, [sp, #104]	; 0x68
 8007798:	2800      	cmp	r0, #0
 800779a:	f47f af68 	bne.w	800766e <_strtod_l+0x73e>
 800779e:	e605      	b.n	80073ac <_strtod_l+0x47c>
 80077a0:	08009080 	.word	0x08009080
 80077a4:	fffffc02 	.word	0xfffffc02
 80077a8:	7ff00000 	.word	0x7ff00000
 80077ac:	39500000 	.word	0x39500000
 80077b0:	46ca      	mov	sl, r9
 80077b2:	d165      	bne.n	8007880 <_strtod_l+0x950>
 80077b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ba:	b352      	cbz	r2, 8007812 <_strtod_l+0x8e2>
 80077bc:	4a9e      	ldr	r2, [pc, #632]	; (8007a38 <_strtod_l+0xb08>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d12a      	bne.n	8007818 <_strtod_l+0x8e8>
 80077c2:	9b05      	ldr	r3, [sp, #20]
 80077c4:	4641      	mov	r1, r8
 80077c6:	b1fb      	cbz	r3, 8007808 <_strtod_l+0x8d8>
 80077c8:	4b9c      	ldr	r3, [pc, #624]	; (8007a3c <_strtod_l+0xb0c>)
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295
 80077ce:	ea09 0303 	and.w	r3, r9, r3
 80077d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077d6:	d81a      	bhi.n	800780e <_strtod_l+0x8de>
 80077d8:	0d1b      	lsrs	r3, r3, #20
 80077da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	4299      	cmp	r1, r3
 80077e4:	d118      	bne.n	8007818 <_strtod_l+0x8e8>
 80077e6:	4b96      	ldr	r3, [pc, #600]	; (8007a40 <_strtod_l+0xb10>)
 80077e8:	459a      	cmp	sl, r3
 80077ea:	d102      	bne.n	80077f2 <_strtod_l+0x8c2>
 80077ec:	3101      	adds	r1, #1
 80077ee:	f43f addd 	beq.w	80073ac <_strtod_l+0x47c>
 80077f2:	f04f 0800 	mov.w	r8, #0
 80077f6:	4b91      	ldr	r3, [pc, #580]	; (8007a3c <_strtod_l+0xb0c>)
 80077f8:	ea0a 0303 	and.w	r3, sl, r3
 80077fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d19a      	bne.n	800773c <_strtod_l+0x80c>
 8007806:	e5db      	b.n	80073c0 <_strtod_l+0x490>
 8007808:	f04f 33ff 	mov.w	r3, #4294967295
 800780c:	e7e9      	b.n	80077e2 <_strtod_l+0x8b2>
 800780e:	4613      	mov	r3, r2
 8007810:	e7e7      	b.n	80077e2 <_strtod_l+0x8b2>
 8007812:	ea53 0308 	orrs.w	r3, r3, r8
 8007816:	d081      	beq.n	800771c <_strtod_l+0x7ec>
 8007818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800781a:	b1e3      	cbz	r3, 8007856 <_strtod_l+0x926>
 800781c:	ea13 0f0a 	tst.w	r3, sl
 8007820:	d0ee      	beq.n	8007800 <_strtod_l+0x8d0>
 8007822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007824:	4640      	mov	r0, r8
 8007826:	4649      	mov	r1, r9
 8007828:	9a05      	ldr	r2, [sp, #20]
 800782a:	b1c3      	cbz	r3, 800785e <_strtod_l+0x92e>
 800782c:	f7ff fb5c 	bl	8006ee8 <sulp>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007836:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007838:	f7f8 fd04 	bl	8000244 <__adddf3>
 800783c:	4680      	mov	r8, r0
 800783e:	4689      	mov	r9, r1
 8007840:	e7de      	b.n	8007800 <_strtod_l+0x8d0>
 8007842:	4013      	ands	r3, r2
 8007844:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007848:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800784c:	f04f 38ff 	mov.w	r8, #4294967295
 8007850:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007854:	e7d4      	b.n	8007800 <_strtod_l+0x8d0>
 8007856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007858:	ea13 0f08 	tst.w	r3, r8
 800785c:	e7e0      	b.n	8007820 <_strtod_l+0x8f0>
 800785e:	f7ff fb43 	bl	8006ee8 <sulp>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800786a:	f7f8 fce9 	bl	8000240 <__aeabi_dsub>
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4680      	mov	r8, r0
 8007874:	4689      	mov	r9, r1
 8007876:	f7f9 f903 	bl	8000a80 <__aeabi_dcmpeq>
 800787a:	2800      	cmp	r0, #0
 800787c:	d0c0      	beq.n	8007800 <_strtod_l+0x8d0>
 800787e:	e606      	b.n	800748e <_strtod_l+0x55e>
 8007880:	4659      	mov	r1, fp
 8007882:	4630      	mov	r0, r6
 8007884:	f7ff fabe 	bl	8006e04 <__ratio>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007890:	2200      	movs	r2, #0
 8007892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007896:	f7f9 f907 	bl	8000aa8 <__aeabi_dcmple>
 800789a:	2800      	cmp	r0, #0
 800789c:	d06f      	beq.n	800797e <_strtod_l+0xa4e>
 800789e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d17c      	bne.n	800799e <_strtod_l+0xa6e>
 80078a4:	f1b8 0f00 	cmp.w	r8, #0
 80078a8:	d159      	bne.n	800795e <_strtod_l+0xa2e>
 80078aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d17b      	bne.n	80079aa <_strtod_l+0xa7a>
 80078b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078b6:	2200      	movs	r2, #0
 80078b8:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <_strtod_l+0xb14>)
 80078ba:	f7f9 f8eb 	bl	8000a94 <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d15a      	bne.n	8007978 <_strtod_l+0xa48>
 80078c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078c6:	2200      	movs	r2, #0
 80078c8:	4b5f      	ldr	r3, [pc, #380]	; (8007a48 <_strtod_l+0xb18>)
 80078ca:	f7f8 fe71 	bl	80005b0 <__aeabi_dmul>
 80078ce:	4605      	mov	r5, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80078d6:	9506      	str	r5, [sp, #24]
 80078d8:	9307      	str	r3, [sp, #28]
 80078da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80078e2:	4b56      	ldr	r3, [pc, #344]	; (8007a3c <_strtod_l+0xb0c>)
 80078e4:	4a55      	ldr	r2, [pc, #340]	; (8007a3c <_strtod_l+0xb0c>)
 80078e6:	ea0a 0303 	and.w	r3, sl, r3
 80078ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80078ec:	4b57      	ldr	r3, [pc, #348]	; (8007a4c <_strtod_l+0xb1c>)
 80078ee:	ea0a 0202 	and.w	r2, sl, r2
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f040 80b0 	bne.w	8007a58 <_strtod_l+0xb28>
 80078f8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80078fc:	4640      	mov	r0, r8
 80078fe:	4649      	mov	r1, r9
 8007900:	f7ff f9c2 	bl	8006c88 <__ulp>
 8007904:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007908:	f7f8 fe52 	bl	80005b0 <__aeabi_dmul>
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	f7f8 fc98 	bl	8000244 <__adddf3>
 8007914:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007a3c <_strtod_l+0xb0c>
 8007918:	4a4d      	ldr	r2, [pc, #308]	; (8007a50 <_strtod_l+0xb20>)
 800791a:	ea01 0a0a 	and.w	sl, r1, sl
 800791e:	4592      	cmp	sl, r2
 8007920:	4680      	mov	r8, r0
 8007922:	d948      	bls.n	80079b6 <_strtod_l+0xa86>
 8007924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007926:	4b46      	ldr	r3, [pc, #280]	; (8007a40 <_strtod_l+0xb10>)
 8007928:	429a      	cmp	r2, r3
 800792a:	d103      	bne.n	8007934 <_strtod_l+0xa04>
 800792c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800792e:	3301      	adds	r3, #1
 8007930:	f43f ad3c 	beq.w	80073ac <_strtod_l+0x47c>
 8007934:	f04f 38ff 	mov.w	r8, #4294967295
 8007938:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007a40 <_strtod_l+0xb10>
 800793c:	4620      	mov	r0, r4
 800793e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007940:	f7fe fe76 	bl	8006630 <_Bfree>
 8007944:	4620      	mov	r0, r4
 8007946:	9908      	ldr	r1, [sp, #32]
 8007948:	f7fe fe72 	bl	8006630 <_Bfree>
 800794c:	4659      	mov	r1, fp
 800794e:	4620      	mov	r0, r4
 8007950:	f7fe fe6e 	bl	8006630 <_Bfree>
 8007954:	4631      	mov	r1, r6
 8007956:	4620      	mov	r0, r4
 8007958:	f7fe fe6a 	bl	8006630 <_Bfree>
 800795c:	e605      	b.n	800756a <_strtod_l+0x63a>
 800795e:	f1b8 0f01 	cmp.w	r8, #1
 8007962:	d103      	bne.n	800796c <_strtod_l+0xa3c>
 8007964:	f1b9 0f00 	cmp.w	r9, #0
 8007968:	f43f ad91 	beq.w	800748e <_strtod_l+0x55e>
 800796c:	2200      	movs	r2, #0
 800796e:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <_strtod_l+0xb24>)
 8007970:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007972:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007976:	e016      	b.n	80079a6 <_strtod_l+0xa76>
 8007978:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800797a:	4f33      	ldr	r7, [pc, #204]	; (8007a48 <_strtod_l+0xb18>)
 800797c:	e7a9      	b.n	80078d2 <_strtod_l+0x9a2>
 800797e:	4b32      	ldr	r3, [pc, #200]	; (8007a48 <_strtod_l+0xb18>)
 8007980:	2200      	movs	r2, #0
 8007982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007986:	f7f8 fe13 	bl	80005b0 <__aeabi_dmul>
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	4605      	mov	r5, r0
 800798e:	460f      	mov	r7, r1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d09e      	beq.n	80078d2 <_strtod_l+0x9a2>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800799c:	e79d      	b.n	80078da <_strtod_l+0x9aa>
 800799e:	2200      	movs	r2, #0
 80079a0:	4b28      	ldr	r3, [pc, #160]	; (8007a44 <_strtod_l+0xb14>)
 80079a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079a6:	4f27      	ldr	r7, [pc, #156]	; (8007a44 <_strtod_l+0xb14>)
 80079a8:	e797      	b.n	80078da <_strtod_l+0x9aa>
 80079aa:	2200      	movs	r2, #0
 80079ac:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <_strtod_l+0xb24>)
 80079ae:	4645      	mov	r5, r8
 80079b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079b4:	e7f7      	b.n	80079a6 <_strtod_l+0xa76>
 80079b6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	46ca      	mov	sl, r9
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1bc      	bne.n	800793c <_strtod_l+0xa0c>
 80079c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079c8:	0d1b      	lsrs	r3, r3, #20
 80079ca:	051b      	lsls	r3, r3, #20
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1b5      	bne.n	800793c <_strtod_l+0xa0c>
 80079d0:	4628      	mov	r0, r5
 80079d2:	4639      	mov	r1, r7
 80079d4:	f7f9 f934 	bl	8000c40 <__aeabi_d2lz>
 80079d8:	f7f8 fdbc 	bl	8000554 <__aeabi_l2d>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4628      	mov	r0, r5
 80079e2:	4639      	mov	r1, r7
 80079e4:	f7f8 fc2c 	bl	8000240 <__aeabi_dsub>
 80079e8:	460b      	mov	r3, r1
 80079ea:	4602      	mov	r2, r0
 80079ec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80079f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80079f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f6:	ea4a 0a08 	orr.w	sl, sl, r8
 80079fa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80079fe:	d06c      	beq.n	8007ada <_strtod_l+0xbaa>
 8007a00:	a309      	add	r3, pc, #36	; (adr r3, 8007a28 <_strtod_l+0xaf8>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f9 f845 	bl	8000a94 <__aeabi_dcmplt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f47f acd8 	bne.w	80073c0 <_strtod_l+0x490>
 8007a10:	a307      	add	r3, pc, #28	; (adr r3, 8007a30 <_strtod_l+0xb00>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a1a:	f7f9 f859 	bl	8000ad0 <__aeabi_dcmpgt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d08c      	beq.n	800793c <_strtod_l+0xa0c>
 8007a22:	e4cd      	b.n	80073c0 <_strtod_l+0x490>
 8007a24:	f3af 8000 	nop.w
 8007a28:	94a03595 	.word	0x94a03595
 8007a2c:	3fdfffff 	.word	0x3fdfffff
 8007a30:	35afe535 	.word	0x35afe535
 8007a34:	3fe00000 	.word	0x3fe00000
 8007a38:	000fffff 	.word	0x000fffff
 8007a3c:	7ff00000 	.word	0x7ff00000
 8007a40:	7fefffff 	.word	0x7fefffff
 8007a44:	3ff00000 	.word	0x3ff00000
 8007a48:	3fe00000 	.word	0x3fe00000
 8007a4c:	7fe00000 	.word	0x7fe00000
 8007a50:	7c9fffff 	.word	0x7c9fffff
 8007a54:	bff00000 	.word	0xbff00000
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	b333      	cbz	r3, 8007aaa <_strtod_l+0xb7a>
 8007a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a62:	d822      	bhi.n	8007aaa <_strtod_l+0xb7a>
 8007a64:	a328      	add	r3, pc, #160	; (adr r3, 8007b08 <_strtod_l+0xbd8>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f9 f81b 	bl	8000aa8 <__aeabi_dcmple>
 8007a72:	b1a0      	cbz	r0, 8007a9e <_strtod_l+0xb6e>
 8007a74:	4639      	mov	r1, r7
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7f9 f872 	bl	8000b60 <__aeabi_d2uiz>
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	bf38      	it	cc
 8007a80:	2001      	movcc	r0, #1
 8007a82:	f7f8 fd1b 	bl	80004bc <__aeabi_ui2d>
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	4605      	mov	r5, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	bb03      	cbnz	r3, 8007ad0 <_strtod_l+0xba0>
 8007a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a92:	9014      	str	r0, [sp, #80]	; 0x50
 8007a94:	9315      	str	r3, [sp, #84]	; 0x54
 8007a96:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a9a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007aa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007aa2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	9311      	str	r3, [sp, #68]	; 0x44
 8007aaa:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007aac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007aae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007ab2:	f7ff f8e9 	bl	8006c88 <__ulp>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f8 fd77 	bl	80005b0 <__aeabi_dmul>
 8007ac2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ac6:	f7f8 fbbd 	bl	8000244 <__adddf3>
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	e774      	b.n	80079ba <_strtod_l+0xa8a>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007ad8:	e7dd      	b.n	8007a96 <_strtod_l+0xb66>
 8007ada:	a30d      	add	r3, pc, #52	; (adr r3, 8007b10 <_strtod_l+0xbe0>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 ffd8 	bl	8000a94 <__aeabi_dcmplt>
 8007ae4:	e79b      	b.n	8007a1e <_strtod_l+0xaee>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	930e      	str	r3, [sp, #56]	; 0x38
 8007aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007aec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	f7ff ba5b 	b.w	8006faa <_strtod_l+0x7a>
 8007af4:	2a65      	cmp	r2, #101	; 0x65
 8007af6:	f43f ab52 	beq.w	800719e <_strtod_l+0x26e>
 8007afa:	2a45      	cmp	r2, #69	; 0x45
 8007afc:	f43f ab4f 	beq.w	800719e <_strtod_l+0x26e>
 8007b00:	2301      	movs	r3, #1
 8007b02:	f7ff bb87 	b.w	8007214 <_strtod_l+0x2e4>
 8007b06:	bf00      	nop
 8007b08:	ffc00000 	.word	0xffc00000
 8007b0c:	41dfffff 	.word	0x41dfffff
 8007b10:	94a03595 	.word	0x94a03595
 8007b14:	3fcfffff 	.word	0x3fcfffff

08007b18 <_strtod_r>:
 8007b18:	4b01      	ldr	r3, [pc, #4]	; (8007b20 <_strtod_r+0x8>)
 8007b1a:	f7ff ba09 	b.w	8006f30 <_strtod_l>
 8007b1e:	bf00      	nop
 8007b20:	20000068 	.word	0x20000068

08007b24 <_strtol_l.constprop.0>:
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b2a:	4686      	mov	lr, r0
 8007b2c:	4690      	mov	r8, r2
 8007b2e:	d001      	beq.n	8007b34 <_strtol_l.constprop.0+0x10>
 8007b30:	2b24      	cmp	r3, #36	; 0x24
 8007b32:	d906      	bls.n	8007b42 <_strtol_l.constprop.0+0x1e>
 8007b34:	f7fd fd86 	bl	8005644 <__errno>
 8007b38:	2316      	movs	r3, #22
 8007b3a:	6003      	str	r3, [r0, #0]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b42:	460d      	mov	r5, r1
 8007b44:	4835      	ldr	r0, [pc, #212]	; (8007c1c <_strtol_l.constprop.0+0xf8>)
 8007b46:	462a      	mov	r2, r5
 8007b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b4c:	5d06      	ldrb	r6, [r0, r4]
 8007b4e:	f016 0608 	ands.w	r6, r6, #8
 8007b52:	d1f8      	bne.n	8007b46 <_strtol_l.constprop.0+0x22>
 8007b54:	2c2d      	cmp	r4, #45	; 0x2d
 8007b56:	d12e      	bne.n	8007bb6 <_strtol_l.constprop.0+0x92>
 8007b58:	2601      	movs	r6, #1
 8007b5a:	782c      	ldrb	r4, [r5, #0]
 8007b5c:	1c95      	adds	r5, r2, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d057      	beq.n	8007c12 <_strtol_l.constprop.0+0xee>
 8007b62:	2b10      	cmp	r3, #16
 8007b64:	d109      	bne.n	8007b7a <_strtol_l.constprop.0+0x56>
 8007b66:	2c30      	cmp	r4, #48	; 0x30
 8007b68:	d107      	bne.n	8007b7a <_strtol_l.constprop.0+0x56>
 8007b6a:	782a      	ldrb	r2, [r5, #0]
 8007b6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007b70:	2a58      	cmp	r2, #88	; 0x58
 8007b72:	d149      	bne.n	8007c08 <_strtol_l.constprop.0+0xe4>
 8007b74:	2310      	movs	r3, #16
 8007b76:	786c      	ldrb	r4, [r5, #1]
 8007b78:	3502      	adds	r5, #2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007b80:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b84:	fbbc f9f3 	udiv	r9, ip, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b92:	2f09      	cmp	r7, #9
 8007b94:	d814      	bhi.n	8007bc0 <_strtol_l.constprop.0+0x9c>
 8007b96:	463c      	mov	r4, r7
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	dd20      	ble.n	8007bde <_strtol_l.constprop.0+0xba>
 8007b9c:	1c57      	adds	r7, r2, #1
 8007b9e:	d007      	beq.n	8007bb0 <_strtol_l.constprop.0+0x8c>
 8007ba0:	4581      	cmp	r9, r0
 8007ba2:	d319      	bcc.n	8007bd8 <_strtol_l.constprop.0+0xb4>
 8007ba4:	d101      	bne.n	8007baa <_strtol_l.constprop.0+0x86>
 8007ba6:	45a2      	cmp	sl, r4
 8007ba8:	db16      	blt.n	8007bd8 <_strtol_l.constprop.0+0xb4>
 8007baa:	2201      	movs	r2, #1
 8007bac:	fb00 4003 	mla	r0, r0, r3, r4
 8007bb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bb4:	e7eb      	b.n	8007b8e <_strtol_l.constprop.0+0x6a>
 8007bb6:	2c2b      	cmp	r4, #43	; 0x2b
 8007bb8:	bf04      	itt	eq
 8007bba:	782c      	ldrbeq	r4, [r5, #0]
 8007bbc:	1c95      	addeq	r5, r2, #2
 8007bbe:	e7ce      	b.n	8007b5e <_strtol_l.constprop.0+0x3a>
 8007bc0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007bc4:	2f19      	cmp	r7, #25
 8007bc6:	d801      	bhi.n	8007bcc <_strtol_l.constprop.0+0xa8>
 8007bc8:	3c37      	subs	r4, #55	; 0x37
 8007bca:	e7e5      	b.n	8007b98 <_strtol_l.constprop.0+0x74>
 8007bcc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007bd0:	2f19      	cmp	r7, #25
 8007bd2:	d804      	bhi.n	8007bde <_strtol_l.constprop.0+0xba>
 8007bd4:	3c57      	subs	r4, #87	; 0x57
 8007bd6:	e7df      	b.n	8007b98 <_strtol_l.constprop.0+0x74>
 8007bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bdc:	e7e8      	b.n	8007bb0 <_strtol_l.constprop.0+0x8c>
 8007bde:	1c53      	adds	r3, r2, #1
 8007be0:	d108      	bne.n	8007bf4 <_strtol_l.constprop.0+0xd0>
 8007be2:	2322      	movs	r3, #34	; 0x22
 8007be4:	4660      	mov	r0, ip
 8007be6:	f8ce 3000 	str.w	r3, [lr]
 8007bea:	f1b8 0f00 	cmp.w	r8, #0
 8007bee:	d0a6      	beq.n	8007b3e <_strtol_l.constprop.0+0x1a>
 8007bf0:	1e69      	subs	r1, r5, #1
 8007bf2:	e006      	b.n	8007c02 <_strtol_l.constprop.0+0xde>
 8007bf4:	b106      	cbz	r6, 8007bf8 <_strtol_l.constprop.0+0xd4>
 8007bf6:	4240      	negs	r0, r0
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	d09f      	beq.n	8007b3e <_strtol_l.constprop.0+0x1a>
 8007bfe:	2a00      	cmp	r2, #0
 8007c00:	d1f6      	bne.n	8007bf0 <_strtol_l.constprop.0+0xcc>
 8007c02:	f8c8 1000 	str.w	r1, [r8]
 8007c06:	e79a      	b.n	8007b3e <_strtol_l.constprop.0+0x1a>
 8007c08:	2430      	movs	r4, #48	; 0x30
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1b5      	bne.n	8007b7a <_strtol_l.constprop.0+0x56>
 8007c0e:	2308      	movs	r3, #8
 8007c10:	e7b3      	b.n	8007b7a <_strtol_l.constprop.0+0x56>
 8007c12:	2c30      	cmp	r4, #48	; 0x30
 8007c14:	d0a9      	beq.n	8007b6a <_strtol_l.constprop.0+0x46>
 8007c16:	230a      	movs	r3, #10
 8007c18:	e7af      	b.n	8007b7a <_strtol_l.constprop.0+0x56>
 8007c1a:	bf00      	nop
 8007c1c:	080090a9 	.word	0x080090a9

08007c20 <_strtol_r>:
 8007c20:	f7ff bf80 	b.w	8007b24 <_strtol_l.constprop.0>

08007c24 <__ssputs_r>:
 8007c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	461f      	mov	r7, r3
 8007c2a:	688e      	ldr	r6, [r1, #8]
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	42be      	cmp	r6, r7
 8007c30:	460c      	mov	r4, r1
 8007c32:	4690      	mov	r8, r2
 8007c34:	680b      	ldr	r3, [r1, #0]
 8007c36:	d82c      	bhi.n	8007c92 <__ssputs_r+0x6e>
 8007c38:	898a      	ldrh	r2, [r1, #12]
 8007c3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c3e:	d026      	beq.n	8007c8e <__ssputs_r+0x6a>
 8007c40:	6965      	ldr	r5, [r4, #20]
 8007c42:	6909      	ldr	r1, [r1, #16]
 8007c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c48:	eba3 0901 	sub.w	r9, r3, r1
 8007c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c50:	1c7b      	adds	r3, r7, #1
 8007c52:	444b      	add	r3, r9
 8007c54:	106d      	asrs	r5, r5, #1
 8007c56:	429d      	cmp	r5, r3
 8007c58:	bf38      	it	cc
 8007c5a:	461d      	movcc	r5, r3
 8007c5c:	0553      	lsls	r3, r2, #21
 8007c5e:	d527      	bpl.n	8007cb0 <__ssputs_r+0x8c>
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7fe fc19 	bl	8006498 <_malloc_r>
 8007c66:	4606      	mov	r6, r0
 8007c68:	b360      	cbz	r0, 8007cc4 <__ssputs_r+0xa0>
 8007c6a:	464a      	mov	r2, r9
 8007c6c:	6921      	ldr	r1, [r4, #16]
 8007c6e:	f7fd fd23 	bl	80056b8 <memcpy>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	6126      	str	r6, [r4, #16]
 8007c80:	444e      	add	r6, r9
 8007c82:	6026      	str	r6, [r4, #0]
 8007c84:	463e      	mov	r6, r7
 8007c86:	6165      	str	r5, [r4, #20]
 8007c88:	eba5 0509 	sub.w	r5, r5, r9
 8007c8c:	60a5      	str	r5, [r4, #8]
 8007c8e:	42be      	cmp	r6, r7
 8007c90:	d900      	bls.n	8007c94 <__ssputs_r+0x70>
 8007c92:	463e      	mov	r6, r7
 8007c94:	4632      	mov	r2, r6
 8007c96:	4641      	mov	r1, r8
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	f000 f9c5 	bl	8008028 <memmove>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	68a3      	ldr	r3, [r4, #8]
 8007ca2:	1b9b      	subs	r3, r3, r6
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	4433      	add	r3, r6
 8007caa:	6023      	str	r3, [r4, #0]
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	462a      	mov	r2, r5
 8007cb2:	f000 fd98 	bl	80087e6 <_realloc_r>
 8007cb6:	4606      	mov	r6, r0
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1e0      	bne.n	8007c7e <__ssputs_r+0x5a>
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	6921      	ldr	r1, [r4, #16]
 8007cc0:	f7fe fb7a 	bl	80063b8 <_free_r>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	f8ca 3000 	str.w	r3, [sl]
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	e7e9      	b.n	8007cac <__ssputs_r+0x88>

08007cd8 <_svfiprintf_r>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	4698      	mov	r8, r3
 8007cde:	898b      	ldrh	r3, [r1, #12]
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	061b      	lsls	r3, r3, #24
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	4614      	mov	r4, r2
 8007ce8:	b09d      	sub	sp, #116	; 0x74
 8007cea:	d50e      	bpl.n	8007d0a <_svfiprintf_r+0x32>
 8007cec:	690b      	ldr	r3, [r1, #16]
 8007cee:	b963      	cbnz	r3, 8007d0a <_svfiprintf_r+0x32>
 8007cf0:	2140      	movs	r1, #64	; 0x40
 8007cf2:	f7fe fbd1 	bl	8006498 <_malloc_r>
 8007cf6:	6028      	str	r0, [r5, #0]
 8007cf8:	6128      	str	r0, [r5, #16]
 8007cfa:	b920      	cbnz	r0, 8007d06 <_svfiprintf_r+0x2e>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	e0d0      	b.n	8007ea8 <_svfiprintf_r+0x1d0>
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	616b      	str	r3, [r5, #20]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0e:	2320      	movs	r3, #32
 8007d10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d14:	2330      	movs	r3, #48	; 0x30
 8007d16:	f04f 0901 	mov.w	r9, #1
 8007d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007ec0 <_svfiprintf_r+0x1e8>
 8007d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d26:	4623      	mov	r3, r4
 8007d28:	469a      	mov	sl, r3
 8007d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d2e:	b10a      	cbz	r2, 8007d34 <_svfiprintf_r+0x5c>
 8007d30:	2a25      	cmp	r2, #37	; 0x25
 8007d32:	d1f9      	bne.n	8007d28 <_svfiprintf_r+0x50>
 8007d34:	ebba 0b04 	subs.w	fp, sl, r4
 8007d38:	d00b      	beq.n	8007d52 <_svfiprintf_r+0x7a>
 8007d3a:	465b      	mov	r3, fp
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ff6f 	bl	8007c24 <__ssputs_r>
 8007d46:	3001      	adds	r0, #1
 8007d48:	f000 80a9 	beq.w	8007e9e <_svfiprintf_r+0x1c6>
 8007d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d4e:	445a      	add	r2, fp
 8007d50:	9209      	str	r2, [sp, #36]	; 0x24
 8007d52:	f89a 3000 	ldrb.w	r3, [sl]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 80a1 	beq.w	8007e9e <_svfiprintf_r+0x1c6>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d66:	f10a 0a01 	add.w	sl, sl, #1
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	9307      	str	r3, [sp, #28]
 8007d6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d72:	931a      	str	r3, [sp, #104]	; 0x68
 8007d74:	4654      	mov	r4, sl
 8007d76:	2205      	movs	r2, #5
 8007d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7c:	4850      	ldr	r0, [pc, #320]	; (8007ec0 <_svfiprintf_r+0x1e8>)
 8007d7e:	f7fd fc8d 	bl	800569c <memchr>
 8007d82:	9a04      	ldr	r2, [sp, #16]
 8007d84:	b9d8      	cbnz	r0, 8007dbe <_svfiprintf_r+0xe6>
 8007d86:	06d0      	lsls	r0, r2, #27
 8007d88:	bf44      	itt	mi
 8007d8a:	2320      	movmi	r3, #32
 8007d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d90:	0711      	lsls	r1, r2, #28
 8007d92:	bf44      	itt	mi
 8007d94:	232b      	movmi	r3, #43	; 0x2b
 8007d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007da0:	d015      	beq.n	8007dce <_svfiprintf_r+0xf6>
 8007da2:	4654      	mov	r4, sl
 8007da4:	2000      	movs	r0, #0
 8007da6:	f04f 0c0a 	mov.w	ip, #10
 8007daa:	9a07      	ldr	r2, [sp, #28]
 8007dac:	4621      	mov	r1, r4
 8007dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db2:	3b30      	subs	r3, #48	; 0x30
 8007db4:	2b09      	cmp	r3, #9
 8007db6:	d94d      	bls.n	8007e54 <_svfiprintf_r+0x17c>
 8007db8:	b1b0      	cbz	r0, 8007de8 <_svfiprintf_r+0x110>
 8007dba:	9207      	str	r2, [sp, #28]
 8007dbc:	e014      	b.n	8007de8 <_svfiprintf_r+0x110>
 8007dbe:	eba0 0308 	sub.w	r3, r0, r8
 8007dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	46a2      	mov	sl, r4
 8007dca:	9304      	str	r3, [sp, #16]
 8007dcc:	e7d2      	b.n	8007d74 <_svfiprintf_r+0x9c>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	1d19      	adds	r1, r3, #4
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	9103      	str	r1, [sp, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	bfbb      	ittet	lt
 8007dda:	425b      	neglt	r3, r3
 8007ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8007de0:	9307      	strge	r3, [sp, #28]
 8007de2:	9307      	strlt	r3, [sp, #28]
 8007de4:	bfb8      	it	lt
 8007de6:	9204      	strlt	r2, [sp, #16]
 8007de8:	7823      	ldrb	r3, [r4, #0]
 8007dea:	2b2e      	cmp	r3, #46	; 0x2e
 8007dec:	d10c      	bne.n	8007e08 <_svfiprintf_r+0x130>
 8007dee:	7863      	ldrb	r3, [r4, #1]
 8007df0:	2b2a      	cmp	r3, #42	; 0x2a
 8007df2:	d134      	bne.n	8007e5e <_svfiprintf_r+0x186>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	3402      	adds	r4, #2
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	9203      	str	r2, [sp, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007ec4 <_svfiprintf_r+0x1ec>
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	4650      	mov	r0, sl
 8007e10:	7821      	ldrb	r1, [r4, #0]
 8007e12:	f7fd fc43 	bl	800569c <memchr>
 8007e16:	b138      	cbz	r0, 8007e28 <_svfiprintf_r+0x150>
 8007e18:	2240      	movs	r2, #64	; 0x40
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	eba0 000a 	sub.w	r0, r0, sl
 8007e20:	4082      	lsls	r2, r0
 8007e22:	4313      	orrs	r3, r2
 8007e24:	3401      	adds	r4, #1
 8007e26:	9304      	str	r3, [sp, #16]
 8007e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e2c:	2206      	movs	r2, #6
 8007e2e:	4826      	ldr	r0, [pc, #152]	; (8007ec8 <_svfiprintf_r+0x1f0>)
 8007e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e34:	f7fd fc32 	bl	800569c <memchr>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d038      	beq.n	8007eae <_svfiprintf_r+0x1d6>
 8007e3c:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <_svfiprintf_r+0x1f4>)
 8007e3e:	bb1b      	cbnz	r3, 8007e88 <_svfiprintf_r+0x1b0>
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	3307      	adds	r3, #7
 8007e44:	f023 0307 	bic.w	r3, r3, #7
 8007e48:	3308      	adds	r3, #8
 8007e4a:	9303      	str	r3, [sp, #12]
 8007e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4e:	4433      	add	r3, r6
 8007e50:	9309      	str	r3, [sp, #36]	; 0x24
 8007e52:	e768      	b.n	8007d26 <_svfiprintf_r+0x4e>
 8007e54:	460c      	mov	r4, r1
 8007e56:	2001      	movs	r0, #1
 8007e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e5c:	e7a6      	b.n	8007dac <_svfiprintf_r+0xd4>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f04f 0c0a 	mov.w	ip, #10
 8007e64:	4619      	mov	r1, r3
 8007e66:	3401      	adds	r4, #1
 8007e68:	9305      	str	r3, [sp, #20]
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e70:	3a30      	subs	r2, #48	; 0x30
 8007e72:	2a09      	cmp	r2, #9
 8007e74:	d903      	bls.n	8007e7e <_svfiprintf_r+0x1a6>
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0c6      	beq.n	8007e08 <_svfiprintf_r+0x130>
 8007e7a:	9105      	str	r1, [sp, #20]
 8007e7c:	e7c4      	b.n	8007e08 <_svfiprintf_r+0x130>
 8007e7e:	4604      	mov	r4, r0
 8007e80:	2301      	movs	r3, #1
 8007e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e86:	e7f0      	b.n	8007e6a <_svfiprintf_r+0x192>
 8007e88:	ab03      	add	r3, sp, #12
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	462a      	mov	r2, r5
 8007e8e:	4638      	mov	r0, r7
 8007e90:	4b0f      	ldr	r3, [pc, #60]	; (8007ed0 <_svfiprintf_r+0x1f8>)
 8007e92:	a904      	add	r1, sp, #16
 8007e94:	f7fc fca0 	bl	80047d8 <_printf_float>
 8007e98:	1c42      	adds	r2, r0, #1
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	d1d6      	bne.n	8007e4c <_svfiprintf_r+0x174>
 8007e9e:	89ab      	ldrh	r3, [r5, #12]
 8007ea0:	065b      	lsls	r3, r3, #25
 8007ea2:	f53f af2d 	bmi.w	8007d00 <_svfiprintf_r+0x28>
 8007ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea8:	b01d      	add	sp, #116	; 0x74
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	ab03      	add	r3, sp, #12
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	4b06      	ldr	r3, [pc, #24]	; (8007ed0 <_svfiprintf_r+0x1f8>)
 8007eb8:	a904      	add	r1, sp, #16
 8007eba:	f7fc ff2d 	bl	8004d18 <_printf_i>
 8007ebe:	e7eb      	b.n	8007e98 <_svfiprintf_r+0x1c0>
 8007ec0:	080091a9 	.word	0x080091a9
 8007ec4:	080091af 	.word	0x080091af
 8007ec8:	080091b3 	.word	0x080091b3
 8007ecc:	080047d9 	.word	0x080047d9
 8007ed0:	08007c25 	.word	0x08007c25

08007ed4 <__sflush_r>:
 8007ed4:	898a      	ldrh	r2, [r1, #12]
 8007ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed8:	4605      	mov	r5, r0
 8007eda:	0710      	lsls	r0, r2, #28
 8007edc:	460c      	mov	r4, r1
 8007ede:	d457      	bmi.n	8007f90 <__sflush_r+0xbc>
 8007ee0:	684b      	ldr	r3, [r1, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dc04      	bgt.n	8007ef0 <__sflush_r+0x1c>
 8007ee6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc01      	bgt.n	8007ef0 <__sflush_r+0x1c>
 8007eec:	2000      	movs	r0, #0
 8007eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d0fa      	beq.n	8007eec <__sflush_r+0x18>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007efc:	682f      	ldr	r7, [r5, #0]
 8007efe:	6a21      	ldr	r1, [r4, #32]
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	d032      	beq.n	8007f6a <__sflush_r+0x96>
 8007f04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	075a      	lsls	r2, r3, #29
 8007f0a:	d505      	bpl.n	8007f18 <__sflush_r+0x44>
 8007f0c:	6863      	ldr	r3, [r4, #4]
 8007f0e:	1ac0      	subs	r0, r0, r3
 8007f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f12:	b10b      	cbz	r3, 8007f18 <__sflush_r+0x44>
 8007f14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f16:	1ac0      	subs	r0, r0, r3
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f1e:	4628      	mov	r0, r5
 8007f20:	6a21      	ldr	r1, [r4, #32]
 8007f22:	47b0      	blx	r6
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	d106      	bne.n	8007f38 <__sflush_r+0x64>
 8007f2a:	6829      	ldr	r1, [r5, #0]
 8007f2c:	291d      	cmp	r1, #29
 8007f2e:	d82b      	bhi.n	8007f88 <__sflush_r+0xb4>
 8007f30:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <__sflush_r+0x100>)
 8007f32:	410a      	asrs	r2, r1
 8007f34:	07d6      	lsls	r6, r2, #31
 8007f36:	d427      	bmi.n	8007f88 <__sflush_r+0xb4>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	6062      	str	r2, [r4, #4]
 8007f3c:	6922      	ldr	r2, [r4, #16]
 8007f3e:	04d9      	lsls	r1, r3, #19
 8007f40:	6022      	str	r2, [r4, #0]
 8007f42:	d504      	bpl.n	8007f4e <__sflush_r+0x7a>
 8007f44:	1c42      	adds	r2, r0, #1
 8007f46:	d101      	bne.n	8007f4c <__sflush_r+0x78>
 8007f48:	682b      	ldr	r3, [r5, #0]
 8007f4a:	b903      	cbnz	r3, 8007f4e <__sflush_r+0x7a>
 8007f4c:	6560      	str	r0, [r4, #84]	; 0x54
 8007f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f50:	602f      	str	r7, [r5, #0]
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d0ca      	beq.n	8007eec <__sflush_r+0x18>
 8007f56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f5a:	4299      	cmp	r1, r3
 8007f5c:	d002      	beq.n	8007f64 <__sflush_r+0x90>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f7fe fa2a 	bl	80063b8 <_free_r>
 8007f64:	2000      	movs	r0, #0
 8007f66:	6360      	str	r0, [r4, #52]	; 0x34
 8007f68:	e7c1      	b.n	8007eee <__sflush_r+0x1a>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b0      	blx	r6
 8007f70:	1c41      	adds	r1, r0, #1
 8007f72:	d1c8      	bne.n	8007f06 <__sflush_r+0x32>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c5      	beq.n	8007f06 <__sflush_r+0x32>
 8007f7a:	2b1d      	cmp	r3, #29
 8007f7c:	d001      	beq.n	8007f82 <__sflush_r+0xae>
 8007f7e:	2b16      	cmp	r3, #22
 8007f80:	d101      	bne.n	8007f86 <__sflush_r+0xb2>
 8007f82:	602f      	str	r7, [r5, #0]
 8007f84:	e7b2      	b.n	8007eec <__sflush_r+0x18>
 8007f86:	89a3      	ldrh	r3, [r4, #12]
 8007f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f8c:	81a3      	strh	r3, [r4, #12]
 8007f8e:	e7ae      	b.n	8007eee <__sflush_r+0x1a>
 8007f90:	690f      	ldr	r7, [r1, #16]
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	d0aa      	beq.n	8007eec <__sflush_r+0x18>
 8007f96:	0793      	lsls	r3, r2, #30
 8007f98:	bf18      	it	ne
 8007f9a:	2300      	movne	r3, #0
 8007f9c:	680e      	ldr	r6, [r1, #0]
 8007f9e:	bf08      	it	eq
 8007fa0:	694b      	ldreq	r3, [r1, #20]
 8007fa2:	1bf6      	subs	r6, r6, r7
 8007fa4:	600f      	str	r7, [r1, #0]
 8007fa6:	608b      	str	r3, [r1, #8]
 8007fa8:	2e00      	cmp	r6, #0
 8007faa:	dd9f      	ble.n	8007eec <__sflush_r+0x18>
 8007fac:	4633      	mov	r3, r6
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	6a21      	ldr	r1, [r4, #32]
 8007fb4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007fb8:	47e0      	blx	ip
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	dc06      	bgt.n	8007fcc <__sflush_r+0xf8>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fc8:	81a3      	strh	r3, [r4, #12]
 8007fca:	e790      	b.n	8007eee <__sflush_r+0x1a>
 8007fcc:	4407      	add	r7, r0
 8007fce:	1a36      	subs	r6, r6, r0
 8007fd0:	e7ea      	b.n	8007fa8 <__sflush_r+0xd4>
 8007fd2:	bf00      	nop
 8007fd4:	dfbffffe 	.word	0xdfbffffe

08007fd8 <_fflush_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	690b      	ldr	r3, [r1, #16]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	b913      	cbnz	r3, 8007fe8 <_fflush_r+0x10>
 8007fe2:	2500      	movs	r5, #0
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	b118      	cbz	r0, 8007ff2 <_fflush_r+0x1a>
 8007fea:	6a03      	ldr	r3, [r0, #32]
 8007fec:	b90b      	cbnz	r3, 8007ff2 <_fflush_r+0x1a>
 8007fee:	f7fd fa3d 	bl	800546c <__sinit>
 8007ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0f3      	beq.n	8007fe2 <_fflush_r+0xa>
 8007ffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ffc:	07d0      	lsls	r0, r2, #31
 8007ffe:	d404      	bmi.n	800800a <_fflush_r+0x32>
 8008000:	0599      	lsls	r1, r3, #22
 8008002:	d402      	bmi.n	800800a <_fflush_r+0x32>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f7fd fb47 	bl	8005698 <__retarget_lock_acquire_recursive>
 800800a:	4628      	mov	r0, r5
 800800c:	4621      	mov	r1, r4
 800800e:	f7ff ff61 	bl	8007ed4 <__sflush_r>
 8008012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008014:	4605      	mov	r5, r0
 8008016:	07da      	lsls	r2, r3, #31
 8008018:	d4e4      	bmi.n	8007fe4 <_fflush_r+0xc>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	059b      	lsls	r3, r3, #22
 800801e:	d4e1      	bmi.n	8007fe4 <_fflush_r+0xc>
 8008020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008022:	f7fd fb3a 	bl	800569a <__retarget_lock_release_recursive>
 8008026:	e7dd      	b.n	8007fe4 <_fflush_r+0xc>

08008028 <memmove>:
 8008028:	4288      	cmp	r0, r1
 800802a:	b510      	push	{r4, lr}
 800802c:	eb01 0402 	add.w	r4, r1, r2
 8008030:	d902      	bls.n	8008038 <memmove+0x10>
 8008032:	4284      	cmp	r4, r0
 8008034:	4623      	mov	r3, r4
 8008036:	d807      	bhi.n	8008048 <memmove+0x20>
 8008038:	1e43      	subs	r3, r0, #1
 800803a:	42a1      	cmp	r1, r4
 800803c:	d008      	beq.n	8008050 <memmove+0x28>
 800803e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008046:	e7f8      	b.n	800803a <memmove+0x12>
 8008048:	4601      	mov	r1, r0
 800804a:	4402      	add	r2, r0
 800804c:	428a      	cmp	r2, r1
 800804e:	d100      	bne.n	8008052 <memmove+0x2a>
 8008050:	bd10      	pop	{r4, pc}
 8008052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800805a:	e7f7      	b.n	800804c <memmove+0x24>

0800805c <strncmp>:
 800805c:	b510      	push	{r4, lr}
 800805e:	b16a      	cbz	r2, 800807c <strncmp+0x20>
 8008060:	3901      	subs	r1, #1
 8008062:	1884      	adds	r4, r0, r2
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800806c:	429a      	cmp	r2, r3
 800806e:	d103      	bne.n	8008078 <strncmp+0x1c>
 8008070:	42a0      	cmp	r0, r4
 8008072:	d001      	beq.n	8008078 <strncmp+0x1c>
 8008074:	2a00      	cmp	r2, #0
 8008076:	d1f5      	bne.n	8008064 <strncmp+0x8>
 8008078:	1ad0      	subs	r0, r2, r3
 800807a:	bd10      	pop	{r4, pc}
 800807c:	4610      	mov	r0, r2
 800807e:	e7fc      	b.n	800807a <strncmp+0x1e>

08008080 <_sbrk_r>:
 8008080:	b538      	push	{r3, r4, r5, lr}
 8008082:	2300      	movs	r3, #0
 8008084:	4d05      	ldr	r5, [pc, #20]	; (800809c <_sbrk_r+0x1c>)
 8008086:	4604      	mov	r4, r0
 8008088:	4608      	mov	r0, r1
 800808a:	602b      	str	r3, [r5, #0]
 800808c:	f7f9 fca0 	bl	80019d0 <_sbrk>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <_sbrk_r+0x1a>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	b103      	cbz	r3, 800809a <_sbrk_r+0x1a>
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	200008d0 	.word	0x200008d0

080080a0 <nan>:
 80080a0:	2000      	movs	r0, #0
 80080a2:	4901      	ldr	r1, [pc, #4]	; (80080a8 <nan+0x8>)
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	7ff80000 	.word	0x7ff80000

080080ac <__assert_func>:
 80080ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ae:	4614      	mov	r4, r2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__assert_func+0x2c>)
 80080b4:	4605      	mov	r5, r0
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68d8      	ldr	r0, [r3, #12]
 80080ba:	b14c      	cbz	r4, 80080d0 <__assert_func+0x24>
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <__assert_func+0x30>)
 80080be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c2:	9100      	str	r1, [sp, #0]
 80080c4:	462b      	mov	r3, r5
 80080c6:	4906      	ldr	r1, [pc, #24]	; (80080e0 <__assert_func+0x34>)
 80080c8:	f000 fbca 	bl	8008860 <fiprintf>
 80080cc:	f000 fbda 	bl	8008884 <abort>
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__assert_func+0x38>)
 80080d2:	461c      	mov	r4, r3
 80080d4:	e7f3      	b.n	80080be <__assert_func+0x12>
 80080d6:	bf00      	nop
 80080d8:	20000064 	.word	0x20000064
 80080dc:	080091c2 	.word	0x080091c2
 80080e0:	080091cf 	.word	0x080091cf
 80080e4:	080091fd 	.word	0x080091fd

080080e8 <_calloc_r>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	fba1 5402 	umull	r5, r4, r1, r2
 80080ee:	b934      	cbnz	r4, 80080fe <_calloc_r+0x16>
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7fe f9d1 	bl	8006498 <_malloc_r>
 80080f6:	4606      	mov	r6, r0
 80080f8:	b928      	cbnz	r0, 8008106 <_calloc_r+0x1e>
 80080fa:	4630      	mov	r0, r6
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	220c      	movs	r2, #12
 8008100:	2600      	movs	r6, #0
 8008102:	6002      	str	r2, [r0, #0]
 8008104:	e7f9      	b.n	80080fa <_calloc_r+0x12>
 8008106:	462a      	mov	r2, r5
 8008108:	4621      	mov	r1, r4
 800810a:	f7fd fa48 	bl	800559e <memset>
 800810e:	e7f4      	b.n	80080fa <_calloc_r+0x12>

08008110 <rshift>:
 8008110:	6903      	ldr	r3, [r0, #16]
 8008112:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008116:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800811a:	f100 0414 	add.w	r4, r0, #20
 800811e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008122:	dd46      	ble.n	80081b2 <rshift+0xa2>
 8008124:	f011 011f 	ands.w	r1, r1, #31
 8008128:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800812c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008130:	d10c      	bne.n	800814c <rshift+0x3c>
 8008132:	4629      	mov	r1, r5
 8008134:	f100 0710 	add.w	r7, r0, #16
 8008138:	42b1      	cmp	r1, r6
 800813a:	d335      	bcc.n	80081a8 <rshift+0x98>
 800813c:	1a9b      	subs	r3, r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	1eea      	subs	r2, r5, #3
 8008142:	4296      	cmp	r6, r2
 8008144:	bf38      	it	cc
 8008146:	2300      	movcc	r3, #0
 8008148:	4423      	add	r3, r4
 800814a:	e015      	b.n	8008178 <rshift+0x68>
 800814c:	46a1      	mov	r9, r4
 800814e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008152:	f1c1 0820 	rsb	r8, r1, #32
 8008156:	40cf      	lsrs	r7, r1
 8008158:	f105 0e04 	add.w	lr, r5, #4
 800815c:	4576      	cmp	r6, lr
 800815e:	46f4      	mov	ip, lr
 8008160:	d816      	bhi.n	8008190 <rshift+0x80>
 8008162:	1a9a      	subs	r2, r3, r2
 8008164:	0092      	lsls	r2, r2, #2
 8008166:	3a04      	subs	r2, #4
 8008168:	3501      	adds	r5, #1
 800816a:	42ae      	cmp	r6, r5
 800816c:	bf38      	it	cc
 800816e:	2200      	movcc	r2, #0
 8008170:	18a3      	adds	r3, r4, r2
 8008172:	50a7      	str	r7, [r4, r2]
 8008174:	b107      	cbz	r7, 8008178 <rshift+0x68>
 8008176:	3304      	adds	r3, #4
 8008178:	42a3      	cmp	r3, r4
 800817a:	eba3 0204 	sub.w	r2, r3, r4
 800817e:	bf08      	it	eq
 8008180:	2300      	moveq	r3, #0
 8008182:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008186:	6102      	str	r2, [r0, #16]
 8008188:	bf08      	it	eq
 800818a:	6143      	streq	r3, [r0, #20]
 800818c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008190:	f8dc c000 	ldr.w	ip, [ip]
 8008194:	fa0c fc08 	lsl.w	ip, ip, r8
 8008198:	ea4c 0707 	orr.w	r7, ip, r7
 800819c:	f849 7b04 	str.w	r7, [r9], #4
 80081a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081a4:	40cf      	lsrs	r7, r1
 80081a6:	e7d9      	b.n	800815c <rshift+0x4c>
 80081a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80081ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80081b0:	e7c2      	b.n	8008138 <rshift+0x28>
 80081b2:	4623      	mov	r3, r4
 80081b4:	e7e0      	b.n	8008178 <rshift+0x68>

080081b6 <__hexdig_fun>:
 80081b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081ba:	2b09      	cmp	r3, #9
 80081bc:	d802      	bhi.n	80081c4 <__hexdig_fun+0xe>
 80081be:	3820      	subs	r0, #32
 80081c0:	b2c0      	uxtb	r0, r0
 80081c2:	4770      	bx	lr
 80081c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081c8:	2b05      	cmp	r3, #5
 80081ca:	d801      	bhi.n	80081d0 <__hexdig_fun+0x1a>
 80081cc:	3847      	subs	r0, #71	; 0x47
 80081ce:	e7f7      	b.n	80081c0 <__hexdig_fun+0xa>
 80081d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d801      	bhi.n	80081dc <__hexdig_fun+0x26>
 80081d8:	3827      	subs	r0, #39	; 0x27
 80081da:	e7f1      	b.n	80081c0 <__hexdig_fun+0xa>
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr

080081e0 <__gethex>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	4681      	mov	r9, r0
 80081e6:	468a      	mov	sl, r1
 80081e8:	4617      	mov	r7, r2
 80081ea:	680a      	ldr	r2, [r1, #0]
 80081ec:	b085      	sub	sp, #20
 80081ee:	f102 0b02 	add.w	fp, r2, #2
 80081f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80081f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	32fe      	adds	r2, #254	; 0xfe
 80081fe:	eb02 030b 	add.w	r3, r2, fp
 8008202:	46d8      	mov	r8, fp
 8008204:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	2830      	cmp	r0, #48	; 0x30
 800820c:	d0f7      	beq.n	80081fe <__gethex+0x1e>
 800820e:	f7ff ffd2 	bl	80081b6 <__hexdig_fun>
 8008212:	4604      	mov	r4, r0
 8008214:	2800      	cmp	r0, #0
 8008216:	d138      	bne.n	800828a <__gethex+0xaa>
 8008218:	2201      	movs	r2, #1
 800821a:	4640      	mov	r0, r8
 800821c:	49a7      	ldr	r1, [pc, #668]	; (80084bc <__gethex+0x2dc>)
 800821e:	f7ff ff1d 	bl	800805c <strncmp>
 8008222:	4606      	mov	r6, r0
 8008224:	2800      	cmp	r0, #0
 8008226:	d169      	bne.n	80082fc <__gethex+0x11c>
 8008228:	f898 0001 	ldrb.w	r0, [r8, #1]
 800822c:	465d      	mov	r5, fp
 800822e:	f7ff ffc2 	bl	80081b6 <__hexdig_fun>
 8008232:	2800      	cmp	r0, #0
 8008234:	d064      	beq.n	8008300 <__gethex+0x120>
 8008236:	465a      	mov	r2, fp
 8008238:	7810      	ldrb	r0, [r2, #0]
 800823a:	4690      	mov	r8, r2
 800823c:	2830      	cmp	r0, #48	; 0x30
 800823e:	f102 0201 	add.w	r2, r2, #1
 8008242:	d0f9      	beq.n	8008238 <__gethex+0x58>
 8008244:	f7ff ffb7 	bl	80081b6 <__hexdig_fun>
 8008248:	2301      	movs	r3, #1
 800824a:	fab0 f480 	clz	r4, r0
 800824e:	465e      	mov	r6, fp
 8008250:	0964      	lsrs	r4, r4, #5
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	4642      	mov	r2, r8
 8008256:	4615      	mov	r5, r2
 8008258:	7828      	ldrb	r0, [r5, #0]
 800825a:	3201      	adds	r2, #1
 800825c:	f7ff ffab 	bl	80081b6 <__hexdig_fun>
 8008260:	2800      	cmp	r0, #0
 8008262:	d1f8      	bne.n	8008256 <__gethex+0x76>
 8008264:	2201      	movs	r2, #1
 8008266:	4628      	mov	r0, r5
 8008268:	4994      	ldr	r1, [pc, #592]	; (80084bc <__gethex+0x2dc>)
 800826a:	f7ff fef7 	bl	800805c <strncmp>
 800826e:	b978      	cbnz	r0, 8008290 <__gethex+0xb0>
 8008270:	b946      	cbnz	r6, 8008284 <__gethex+0xa4>
 8008272:	1c6e      	adds	r6, r5, #1
 8008274:	4632      	mov	r2, r6
 8008276:	4615      	mov	r5, r2
 8008278:	7828      	ldrb	r0, [r5, #0]
 800827a:	3201      	adds	r2, #1
 800827c:	f7ff ff9b 	bl	80081b6 <__hexdig_fun>
 8008280:	2800      	cmp	r0, #0
 8008282:	d1f8      	bne.n	8008276 <__gethex+0x96>
 8008284:	1b73      	subs	r3, r6, r5
 8008286:	009e      	lsls	r6, r3, #2
 8008288:	e004      	b.n	8008294 <__gethex+0xb4>
 800828a:	2400      	movs	r4, #0
 800828c:	4626      	mov	r6, r4
 800828e:	e7e1      	b.n	8008254 <__gethex+0x74>
 8008290:	2e00      	cmp	r6, #0
 8008292:	d1f7      	bne.n	8008284 <__gethex+0xa4>
 8008294:	782b      	ldrb	r3, [r5, #0]
 8008296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800829a:	2b50      	cmp	r3, #80	; 0x50
 800829c:	d13d      	bne.n	800831a <__gethex+0x13a>
 800829e:	786b      	ldrb	r3, [r5, #1]
 80082a0:	2b2b      	cmp	r3, #43	; 0x2b
 80082a2:	d02f      	beq.n	8008304 <__gethex+0x124>
 80082a4:	2b2d      	cmp	r3, #45	; 0x2d
 80082a6:	d031      	beq.n	800830c <__gethex+0x12c>
 80082a8:	f04f 0b00 	mov.w	fp, #0
 80082ac:	1c69      	adds	r1, r5, #1
 80082ae:	7808      	ldrb	r0, [r1, #0]
 80082b0:	f7ff ff81 	bl	80081b6 <__hexdig_fun>
 80082b4:	1e42      	subs	r2, r0, #1
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	2a18      	cmp	r2, #24
 80082ba:	d82e      	bhi.n	800831a <__gethex+0x13a>
 80082bc:	f1a0 0210 	sub.w	r2, r0, #16
 80082c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80082c4:	f7ff ff77 	bl	80081b6 <__hexdig_fun>
 80082c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80082cc:	fa5f fc8c 	uxtb.w	ip, ip
 80082d0:	f1bc 0f18 	cmp.w	ip, #24
 80082d4:	d91d      	bls.n	8008312 <__gethex+0x132>
 80082d6:	f1bb 0f00 	cmp.w	fp, #0
 80082da:	d000      	beq.n	80082de <__gethex+0xfe>
 80082dc:	4252      	negs	r2, r2
 80082de:	4416      	add	r6, r2
 80082e0:	f8ca 1000 	str.w	r1, [sl]
 80082e4:	b1dc      	cbz	r4, 800831e <__gethex+0x13e>
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bf14      	ite	ne
 80082ec:	f04f 0800 	movne.w	r8, #0
 80082f0:	f04f 0806 	moveq.w	r8, #6
 80082f4:	4640      	mov	r0, r8
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4645      	mov	r5, r8
 80082fe:	4626      	mov	r6, r4
 8008300:	2401      	movs	r4, #1
 8008302:	e7c7      	b.n	8008294 <__gethex+0xb4>
 8008304:	f04f 0b00 	mov.w	fp, #0
 8008308:	1ca9      	adds	r1, r5, #2
 800830a:	e7d0      	b.n	80082ae <__gethex+0xce>
 800830c:	f04f 0b01 	mov.w	fp, #1
 8008310:	e7fa      	b.n	8008308 <__gethex+0x128>
 8008312:	230a      	movs	r3, #10
 8008314:	fb03 0002 	mla	r0, r3, r2, r0
 8008318:	e7d0      	b.n	80082bc <__gethex+0xdc>
 800831a:	4629      	mov	r1, r5
 800831c:	e7e0      	b.n	80082e0 <__gethex+0x100>
 800831e:	4621      	mov	r1, r4
 8008320:	eba5 0308 	sub.w	r3, r5, r8
 8008324:	3b01      	subs	r3, #1
 8008326:	2b07      	cmp	r3, #7
 8008328:	dc0a      	bgt.n	8008340 <__gethex+0x160>
 800832a:	4648      	mov	r0, r9
 800832c:	f7fe f940 	bl	80065b0 <_Balloc>
 8008330:	4604      	mov	r4, r0
 8008332:	b940      	cbnz	r0, 8008346 <__gethex+0x166>
 8008334:	4602      	mov	r2, r0
 8008336:	21e4      	movs	r1, #228	; 0xe4
 8008338:	4b61      	ldr	r3, [pc, #388]	; (80084c0 <__gethex+0x2e0>)
 800833a:	4862      	ldr	r0, [pc, #392]	; (80084c4 <__gethex+0x2e4>)
 800833c:	f7ff feb6 	bl	80080ac <__assert_func>
 8008340:	3101      	adds	r1, #1
 8008342:	105b      	asrs	r3, r3, #1
 8008344:	e7ef      	b.n	8008326 <__gethex+0x146>
 8008346:	2300      	movs	r3, #0
 8008348:	469b      	mov	fp, r3
 800834a:	f100 0a14 	add.w	sl, r0, #20
 800834e:	f8cd a004 	str.w	sl, [sp, #4]
 8008352:	45a8      	cmp	r8, r5
 8008354:	d344      	bcc.n	80083e0 <__gethex+0x200>
 8008356:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800835a:	4658      	mov	r0, fp
 800835c:	f848 bb04 	str.w	fp, [r8], #4
 8008360:	eba8 080a 	sub.w	r8, r8, sl
 8008364:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008368:	6122      	str	r2, [r4, #16]
 800836a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800836e:	f7fe fa11 	bl	8006794 <__hi0bits>
 8008372:	683d      	ldr	r5, [r7, #0]
 8008374:	eba8 0800 	sub.w	r8, r8, r0
 8008378:	45a8      	cmp	r8, r5
 800837a:	dd59      	ble.n	8008430 <__gethex+0x250>
 800837c:	eba8 0805 	sub.w	r8, r8, r5
 8008380:	4641      	mov	r1, r8
 8008382:	4620      	mov	r0, r4
 8008384:	f7fe fd8f 	bl	8006ea6 <__any_on>
 8008388:	4683      	mov	fp, r0
 800838a:	b1b8      	cbz	r0, 80083bc <__gethex+0x1dc>
 800838c:	f04f 0b01 	mov.w	fp, #1
 8008390:	f108 33ff 	add.w	r3, r8, #4294967295
 8008394:	1159      	asrs	r1, r3, #5
 8008396:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800839a:	f003 021f 	and.w	r2, r3, #31
 800839e:	fa0b f202 	lsl.w	r2, fp, r2
 80083a2:	420a      	tst	r2, r1
 80083a4:	d00a      	beq.n	80083bc <__gethex+0x1dc>
 80083a6:	455b      	cmp	r3, fp
 80083a8:	dd06      	ble.n	80083b8 <__gethex+0x1d8>
 80083aa:	4620      	mov	r0, r4
 80083ac:	f1a8 0102 	sub.w	r1, r8, #2
 80083b0:	f7fe fd79 	bl	8006ea6 <__any_on>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d138      	bne.n	800842a <__gethex+0x24a>
 80083b8:	f04f 0b02 	mov.w	fp, #2
 80083bc:	4641      	mov	r1, r8
 80083be:	4620      	mov	r0, r4
 80083c0:	f7ff fea6 	bl	8008110 <rshift>
 80083c4:	4446      	add	r6, r8
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	42b3      	cmp	r3, r6
 80083ca:	da41      	bge.n	8008450 <__gethex+0x270>
 80083cc:	4621      	mov	r1, r4
 80083ce:	4648      	mov	r0, r9
 80083d0:	f7fe f92e 	bl	8006630 <_Bfree>
 80083d4:	2300      	movs	r3, #0
 80083d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083d8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e789      	b.n	80082f4 <__gethex+0x114>
 80083e0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80083e4:	2a2e      	cmp	r2, #46	; 0x2e
 80083e6:	d014      	beq.n	8008412 <__gethex+0x232>
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d106      	bne.n	80083fa <__gethex+0x21a>
 80083ec:	9b01      	ldr	r3, [sp, #4]
 80083ee:	f843 bb04 	str.w	fp, [r3], #4
 80083f2:	f04f 0b00 	mov.w	fp, #0
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	465b      	mov	r3, fp
 80083fa:	7828      	ldrb	r0, [r5, #0]
 80083fc:	9303      	str	r3, [sp, #12]
 80083fe:	f7ff feda 	bl	80081b6 <__hexdig_fun>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	f000 000f 	and.w	r0, r0, #15
 8008408:	4098      	lsls	r0, r3
 800840a:	ea4b 0b00 	orr.w	fp, fp, r0
 800840e:	3304      	adds	r3, #4
 8008410:	e79f      	b.n	8008352 <__gethex+0x172>
 8008412:	45a8      	cmp	r8, r5
 8008414:	d8e8      	bhi.n	80083e8 <__gethex+0x208>
 8008416:	2201      	movs	r2, #1
 8008418:	4628      	mov	r0, r5
 800841a:	4928      	ldr	r1, [pc, #160]	; (80084bc <__gethex+0x2dc>)
 800841c:	9303      	str	r3, [sp, #12]
 800841e:	f7ff fe1d 	bl	800805c <strncmp>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	2800      	cmp	r0, #0
 8008426:	d1df      	bne.n	80083e8 <__gethex+0x208>
 8008428:	e793      	b.n	8008352 <__gethex+0x172>
 800842a:	f04f 0b03 	mov.w	fp, #3
 800842e:	e7c5      	b.n	80083bc <__gethex+0x1dc>
 8008430:	da0b      	bge.n	800844a <__gethex+0x26a>
 8008432:	eba5 0808 	sub.w	r8, r5, r8
 8008436:	4621      	mov	r1, r4
 8008438:	4642      	mov	r2, r8
 800843a:	4648      	mov	r0, r9
 800843c:	f7fe fb10 	bl	8006a60 <__lshift>
 8008440:	4604      	mov	r4, r0
 8008442:	eba6 0608 	sub.w	r6, r6, r8
 8008446:	f100 0a14 	add.w	sl, r0, #20
 800844a:	f04f 0b00 	mov.w	fp, #0
 800844e:	e7ba      	b.n	80083c6 <__gethex+0x1e6>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	42b3      	cmp	r3, r6
 8008454:	dd74      	ble.n	8008540 <__gethex+0x360>
 8008456:	1b9e      	subs	r6, r3, r6
 8008458:	42b5      	cmp	r5, r6
 800845a:	dc35      	bgt.n	80084c8 <__gethex+0x2e8>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d023      	beq.n	80084aa <__gethex+0x2ca>
 8008462:	2b03      	cmp	r3, #3
 8008464:	d025      	beq.n	80084b2 <__gethex+0x2d2>
 8008466:	2b01      	cmp	r3, #1
 8008468:	d115      	bne.n	8008496 <__gethex+0x2b6>
 800846a:	42b5      	cmp	r5, r6
 800846c:	d113      	bne.n	8008496 <__gethex+0x2b6>
 800846e:	2d01      	cmp	r5, #1
 8008470:	d10b      	bne.n	800848a <__gethex+0x2aa>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	9a02      	ldr	r2, [sp, #8]
 8008476:	f04f 0862 	mov.w	r8, #98	; 0x62
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	2301      	movs	r3, #1
 800847e:	6123      	str	r3, [r4, #16]
 8008480:	f8ca 3000 	str.w	r3, [sl]
 8008484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008486:	601c      	str	r4, [r3, #0]
 8008488:	e734      	b.n	80082f4 <__gethex+0x114>
 800848a:	4620      	mov	r0, r4
 800848c:	1e69      	subs	r1, r5, #1
 800848e:	f7fe fd0a 	bl	8006ea6 <__any_on>
 8008492:	2800      	cmp	r0, #0
 8008494:	d1ed      	bne.n	8008472 <__gethex+0x292>
 8008496:	4621      	mov	r1, r4
 8008498:	4648      	mov	r0, r9
 800849a:	f7fe f8c9 	bl	8006630 <_Bfree>
 800849e:	2300      	movs	r3, #0
 80084a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	e724      	b.n	80082f4 <__gethex+0x114>
 80084aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1f2      	bne.n	8008496 <__gethex+0x2b6>
 80084b0:	e7df      	b.n	8008472 <__gethex+0x292>
 80084b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1dc      	bne.n	8008472 <__gethex+0x292>
 80084b8:	e7ed      	b.n	8008496 <__gethex+0x2b6>
 80084ba:	bf00      	nop
 80084bc:	08009054 	.word	0x08009054
 80084c0:	08008eeb 	.word	0x08008eeb
 80084c4:	080091fe 	.word	0x080091fe
 80084c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80084cc:	f1bb 0f00 	cmp.w	fp, #0
 80084d0:	d133      	bne.n	800853a <__gethex+0x35a>
 80084d2:	f1b8 0f00 	cmp.w	r8, #0
 80084d6:	d004      	beq.n	80084e2 <__gethex+0x302>
 80084d8:	4641      	mov	r1, r8
 80084da:	4620      	mov	r0, r4
 80084dc:	f7fe fce3 	bl	8006ea6 <__any_on>
 80084e0:	4683      	mov	fp, r0
 80084e2:	2301      	movs	r3, #1
 80084e4:	ea4f 1268 	mov.w	r2, r8, asr #5
 80084e8:	f008 081f 	and.w	r8, r8, #31
 80084ec:	fa03 f308 	lsl.w	r3, r3, r8
 80084f0:	f04f 0802 	mov.w	r8, #2
 80084f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80084f8:	4631      	mov	r1, r6
 80084fa:	4213      	tst	r3, r2
 80084fc:	4620      	mov	r0, r4
 80084fe:	bf18      	it	ne
 8008500:	f04b 0b02 	orrne.w	fp, fp, #2
 8008504:	1bad      	subs	r5, r5, r6
 8008506:	f7ff fe03 	bl	8008110 <rshift>
 800850a:	687e      	ldr	r6, [r7, #4]
 800850c:	f1bb 0f00 	cmp.w	fp, #0
 8008510:	d04a      	beq.n	80085a8 <__gethex+0x3c8>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d016      	beq.n	8008546 <__gethex+0x366>
 8008518:	2b03      	cmp	r3, #3
 800851a:	d018      	beq.n	800854e <__gethex+0x36e>
 800851c:	2b01      	cmp	r3, #1
 800851e:	d109      	bne.n	8008534 <__gethex+0x354>
 8008520:	f01b 0f02 	tst.w	fp, #2
 8008524:	d006      	beq.n	8008534 <__gethex+0x354>
 8008526:	f8da 3000 	ldr.w	r3, [sl]
 800852a:	ea4b 0b03 	orr.w	fp, fp, r3
 800852e:	f01b 0f01 	tst.w	fp, #1
 8008532:	d10f      	bne.n	8008554 <__gethex+0x374>
 8008534:	f048 0810 	orr.w	r8, r8, #16
 8008538:	e036      	b.n	80085a8 <__gethex+0x3c8>
 800853a:	f04f 0b01 	mov.w	fp, #1
 800853e:	e7d0      	b.n	80084e2 <__gethex+0x302>
 8008540:	f04f 0801 	mov.w	r8, #1
 8008544:	e7e2      	b.n	800850c <__gethex+0x32c>
 8008546:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008548:	f1c3 0301 	rsb	r3, r3, #1
 800854c:	930f      	str	r3, [sp, #60]	; 0x3c
 800854e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0ef      	beq.n	8008534 <__gethex+0x354>
 8008554:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008558:	f104 0214 	add.w	r2, r4, #20
 800855c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2300      	movs	r3, #0
 8008564:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008568:	4694      	mov	ip, r2
 800856a:	f852 1b04 	ldr.w	r1, [r2], #4
 800856e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008572:	d01e      	beq.n	80085b2 <__gethex+0x3d2>
 8008574:	3101      	adds	r1, #1
 8008576:	f8cc 1000 	str.w	r1, [ip]
 800857a:	f1b8 0f02 	cmp.w	r8, #2
 800857e:	f104 0214 	add.w	r2, r4, #20
 8008582:	d13d      	bne.n	8008600 <__gethex+0x420>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	3b01      	subs	r3, #1
 8008588:	42ab      	cmp	r3, r5
 800858a:	d10b      	bne.n	80085a4 <__gethex+0x3c4>
 800858c:	2301      	movs	r3, #1
 800858e:	1169      	asrs	r1, r5, #5
 8008590:	f005 051f 	and.w	r5, r5, #31
 8008594:	fa03 f505 	lsl.w	r5, r3, r5
 8008598:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800859c:	421d      	tst	r5, r3
 800859e:	bf18      	it	ne
 80085a0:	f04f 0801 	movne.w	r8, #1
 80085a4:	f048 0820 	orr.w	r8, r8, #32
 80085a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085aa:	601c      	str	r4, [r3, #0]
 80085ac:	9b02      	ldr	r3, [sp, #8]
 80085ae:	601e      	str	r6, [r3, #0]
 80085b0:	e6a0      	b.n	80082f4 <__gethex+0x114>
 80085b2:	4290      	cmp	r0, r2
 80085b4:	f842 3c04 	str.w	r3, [r2, #-4]
 80085b8:	d8d6      	bhi.n	8008568 <__gethex+0x388>
 80085ba:	68a2      	ldr	r2, [r4, #8]
 80085bc:	4593      	cmp	fp, r2
 80085be:	db17      	blt.n	80085f0 <__gethex+0x410>
 80085c0:	6861      	ldr	r1, [r4, #4]
 80085c2:	4648      	mov	r0, r9
 80085c4:	3101      	adds	r1, #1
 80085c6:	f7fd fff3 	bl	80065b0 <_Balloc>
 80085ca:	4682      	mov	sl, r0
 80085cc:	b918      	cbnz	r0, 80085d6 <__gethex+0x3f6>
 80085ce:	4602      	mov	r2, r0
 80085d0:	2184      	movs	r1, #132	; 0x84
 80085d2:	4b1a      	ldr	r3, [pc, #104]	; (800863c <__gethex+0x45c>)
 80085d4:	e6b1      	b.n	800833a <__gethex+0x15a>
 80085d6:	6922      	ldr	r2, [r4, #16]
 80085d8:	f104 010c 	add.w	r1, r4, #12
 80085dc:	3202      	adds	r2, #2
 80085de:	0092      	lsls	r2, r2, #2
 80085e0:	300c      	adds	r0, #12
 80085e2:	f7fd f869 	bl	80056b8 <memcpy>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4648      	mov	r0, r9
 80085ea:	f7fe f821 	bl	8006630 <_Bfree>
 80085ee:	4654      	mov	r4, sl
 80085f0:	6922      	ldr	r2, [r4, #16]
 80085f2:	1c51      	adds	r1, r2, #1
 80085f4:	6121      	str	r1, [r4, #16]
 80085f6:	2101      	movs	r1, #1
 80085f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80085fc:	6151      	str	r1, [r2, #20]
 80085fe:	e7bc      	b.n	800857a <__gethex+0x39a>
 8008600:	6921      	ldr	r1, [r4, #16]
 8008602:	4559      	cmp	r1, fp
 8008604:	dd0b      	ble.n	800861e <__gethex+0x43e>
 8008606:	2101      	movs	r1, #1
 8008608:	4620      	mov	r0, r4
 800860a:	f7ff fd81 	bl	8008110 <rshift>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	3601      	adds	r6, #1
 8008612:	42b3      	cmp	r3, r6
 8008614:	f6ff aeda 	blt.w	80083cc <__gethex+0x1ec>
 8008618:	f04f 0801 	mov.w	r8, #1
 800861c:	e7c2      	b.n	80085a4 <__gethex+0x3c4>
 800861e:	f015 051f 	ands.w	r5, r5, #31
 8008622:	d0f9      	beq.n	8008618 <__gethex+0x438>
 8008624:	9b01      	ldr	r3, [sp, #4]
 8008626:	f1c5 0520 	rsb	r5, r5, #32
 800862a:	441a      	add	r2, r3
 800862c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008630:	f7fe f8b0 	bl	8006794 <__hi0bits>
 8008634:	42a8      	cmp	r0, r5
 8008636:	dbe6      	blt.n	8008606 <__gethex+0x426>
 8008638:	e7ee      	b.n	8008618 <__gethex+0x438>
 800863a:	bf00      	nop
 800863c:	08008eeb 	.word	0x08008eeb

08008640 <L_shift>:
 8008640:	f1c2 0208 	rsb	r2, r2, #8
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	b570      	push	{r4, r5, r6, lr}
 8008648:	f1c2 0620 	rsb	r6, r2, #32
 800864c:	6843      	ldr	r3, [r0, #4]
 800864e:	6804      	ldr	r4, [r0, #0]
 8008650:	fa03 f506 	lsl.w	r5, r3, r6
 8008654:	432c      	orrs	r4, r5
 8008656:	40d3      	lsrs	r3, r2
 8008658:	6004      	str	r4, [r0, #0]
 800865a:	f840 3f04 	str.w	r3, [r0, #4]!
 800865e:	4288      	cmp	r0, r1
 8008660:	d3f4      	bcc.n	800864c <L_shift+0xc>
 8008662:	bd70      	pop	{r4, r5, r6, pc}

08008664 <__match>:
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	6803      	ldr	r3, [r0, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800866e:	b914      	cbnz	r4, 8008676 <__match+0x12>
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	2001      	movs	r0, #1
 8008674:	bd30      	pop	{r4, r5, pc}
 8008676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800867a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800867e:	2d19      	cmp	r5, #25
 8008680:	bf98      	it	ls
 8008682:	3220      	addls	r2, #32
 8008684:	42a2      	cmp	r2, r4
 8008686:	d0f0      	beq.n	800866a <__match+0x6>
 8008688:	2000      	movs	r0, #0
 800868a:	e7f3      	b.n	8008674 <__match+0x10>

0800868c <__hexnan>:
 800868c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	2500      	movs	r5, #0
 8008692:	680b      	ldr	r3, [r1, #0]
 8008694:	4682      	mov	sl, r0
 8008696:	115e      	asrs	r6, r3, #5
 8008698:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800869c:	f013 031f 	ands.w	r3, r3, #31
 80086a0:	bf18      	it	ne
 80086a2:	3604      	addne	r6, #4
 80086a4:	1f37      	subs	r7, r6, #4
 80086a6:	4690      	mov	r8, r2
 80086a8:	46b9      	mov	r9, r7
 80086aa:	463c      	mov	r4, r7
 80086ac:	46ab      	mov	fp, r5
 80086ae:	b087      	sub	sp, #28
 80086b0:	6801      	ldr	r1, [r0, #0]
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	f846 5c04 	str.w	r5, [r6, #-4]
 80086b8:	9502      	str	r5, [sp, #8]
 80086ba:	784a      	ldrb	r2, [r1, #1]
 80086bc:	1c4b      	adds	r3, r1, #1
 80086be:	9303      	str	r3, [sp, #12]
 80086c0:	b342      	cbz	r2, 8008714 <__hexnan+0x88>
 80086c2:	4610      	mov	r0, r2
 80086c4:	9105      	str	r1, [sp, #20]
 80086c6:	9204      	str	r2, [sp, #16]
 80086c8:	f7ff fd75 	bl	80081b6 <__hexdig_fun>
 80086cc:	2800      	cmp	r0, #0
 80086ce:	d14f      	bne.n	8008770 <__hexnan+0xe4>
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	9905      	ldr	r1, [sp, #20]
 80086d4:	2a20      	cmp	r2, #32
 80086d6:	d818      	bhi.n	800870a <__hexnan+0x7e>
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	459b      	cmp	fp, r3
 80086dc:	dd13      	ble.n	8008706 <__hexnan+0x7a>
 80086de:	454c      	cmp	r4, r9
 80086e0:	d206      	bcs.n	80086f0 <__hexnan+0x64>
 80086e2:	2d07      	cmp	r5, #7
 80086e4:	dc04      	bgt.n	80086f0 <__hexnan+0x64>
 80086e6:	462a      	mov	r2, r5
 80086e8:	4649      	mov	r1, r9
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff ffa8 	bl	8008640 <L_shift>
 80086f0:	4544      	cmp	r4, r8
 80086f2:	d950      	bls.n	8008796 <__hexnan+0x10a>
 80086f4:	2300      	movs	r3, #0
 80086f6:	f1a4 0904 	sub.w	r9, r4, #4
 80086fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80086fe:	461d      	mov	r5, r3
 8008700:	464c      	mov	r4, r9
 8008702:	f8cd b008 	str.w	fp, [sp, #8]
 8008706:	9903      	ldr	r1, [sp, #12]
 8008708:	e7d7      	b.n	80086ba <__hexnan+0x2e>
 800870a:	2a29      	cmp	r2, #41	; 0x29
 800870c:	d155      	bne.n	80087ba <__hexnan+0x12e>
 800870e:	3102      	adds	r1, #2
 8008710:	f8ca 1000 	str.w	r1, [sl]
 8008714:	f1bb 0f00 	cmp.w	fp, #0
 8008718:	d04f      	beq.n	80087ba <__hexnan+0x12e>
 800871a:	454c      	cmp	r4, r9
 800871c:	d206      	bcs.n	800872c <__hexnan+0xa0>
 800871e:	2d07      	cmp	r5, #7
 8008720:	dc04      	bgt.n	800872c <__hexnan+0xa0>
 8008722:	462a      	mov	r2, r5
 8008724:	4649      	mov	r1, r9
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff ff8a 	bl	8008640 <L_shift>
 800872c:	4544      	cmp	r4, r8
 800872e:	d934      	bls.n	800879a <__hexnan+0x10e>
 8008730:	4623      	mov	r3, r4
 8008732:	f1a8 0204 	sub.w	r2, r8, #4
 8008736:	f853 1b04 	ldr.w	r1, [r3], #4
 800873a:	429f      	cmp	r7, r3
 800873c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008740:	d2f9      	bcs.n	8008736 <__hexnan+0xaa>
 8008742:	1b3b      	subs	r3, r7, r4
 8008744:	f023 0303 	bic.w	r3, r3, #3
 8008748:	3304      	adds	r3, #4
 800874a:	3e03      	subs	r6, #3
 800874c:	3401      	adds	r4, #1
 800874e:	42a6      	cmp	r6, r4
 8008750:	bf38      	it	cc
 8008752:	2304      	movcc	r3, #4
 8008754:	2200      	movs	r2, #0
 8008756:	4443      	add	r3, r8
 8008758:	f843 2b04 	str.w	r2, [r3], #4
 800875c:	429f      	cmp	r7, r3
 800875e:	d2fb      	bcs.n	8008758 <__hexnan+0xcc>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	b91b      	cbnz	r3, 800876c <__hexnan+0xe0>
 8008764:	4547      	cmp	r7, r8
 8008766:	d126      	bne.n	80087b6 <__hexnan+0x12a>
 8008768:	2301      	movs	r3, #1
 800876a:	603b      	str	r3, [r7, #0]
 800876c:	2005      	movs	r0, #5
 800876e:	e025      	b.n	80087bc <__hexnan+0x130>
 8008770:	3501      	adds	r5, #1
 8008772:	2d08      	cmp	r5, #8
 8008774:	f10b 0b01 	add.w	fp, fp, #1
 8008778:	dd06      	ble.n	8008788 <__hexnan+0xfc>
 800877a:	4544      	cmp	r4, r8
 800877c:	d9c3      	bls.n	8008706 <__hexnan+0x7a>
 800877e:	2300      	movs	r3, #0
 8008780:	2501      	movs	r5, #1
 8008782:	f844 3c04 	str.w	r3, [r4, #-4]
 8008786:	3c04      	subs	r4, #4
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	f000 000f 	and.w	r0, r0, #15
 800878e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008792:	6020      	str	r0, [r4, #0]
 8008794:	e7b7      	b.n	8008706 <__hexnan+0x7a>
 8008796:	2508      	movs	r5, #8
 8008798:	e7b5      	b.n	8008706 <__hexnan+0x7a>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0df      	beq.n	8008760 <__hexnan+0xd4>
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	f1c3 0320 	rsb	r3, r3, #32
 80087a8:	40da      	lsrs	r2, r3
 80087aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80087ae:	4013      	ands	r3, r2
 80087b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80087b4:	e7d4      	b.n	8008760 <__hexnan+0xd4>
 80087b6:	3f04      	subs	r7, #4
 80087b8:	e7d2      	b.n	8008760 <__hexnan+0xd4>
 80087ba:	2004      	movs	r0, #4
 80087bc:	b007      	add	sp, #28
 80087be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087c2 <__ascii_mbtowc>:
 80087c2:	b082      	sub	sp, #8
 80087c4:	b901      	cbnz	r1, 80087c8 <__ascii_mbtowc+0x6>
 80087c6:	a901      	add	r1, sp, #4
 80087c8:	b142      	cbz	r2, 80087dc <__ascii_mbtowc+0x1a>
 80087ca:	b14b      	cbz	r3, 80087e0 <__ascii_mbtowc+0x1e>
 80087cc:	7813      	ldrb	r3, [r2, #0]
 80087ce:	600b      	str	r3, [r1, #0]
 80087d0:	7812      	ldrb	r2, [r2, #0]
 80087d2:	1e10      	subs	r0, r2, #0
 80087d4:	bf18      	it	ne
 80087d6:	2001      	movne	r0, #1
 80087d8:	b002      	add	sp, #8
 80087da:	4770      	bx	lr
 80087dc:	4610      	mov	r0, r2
 80087de:	e7fb      	b.n	80087d8 <__ascii_mbtowc+0x16>
 80087e0:	f06f 0001 	mvn.w	r0, #1
 80087e4:	e7f8      	b.n	80087d8 <__ascii_mbtowc+0x16>

080087e6 <_realloc_r>:
 80087e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ea:	4680      	mov	r8, r0
 80087ec:	4614      	mov	r4, r2
 80087ee:	460e      	mov	r6, r1
 80087f0:	b921      	cbnz	r1, 80087fc <_realloc_r+0x16>
 80087f2:	4611      	mov	r1, r2
 80087f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	f7fd be4e 	b.w	8006498 <_malloc_r>
 80087fc:	b92a      	cbnz	r2, 800880a <_realloc_r+0x24>
 80087fe:	f7fd fddb 	bl	80063b8 <_free_r>
 8008802:	4625      	mov	r5, r4
 8008804:	4628      	mov	r0, r5
 8008806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880a:	f000 f842 	bl	8008892 <_malloc_usable_size_r>
 800880e:	4284      	cmp	r4, r0
 8008810:	4607      	mov	r7, r0
 8008812:	d802      	bhi.n	800881a <_realloc_r+0x34>
 8008814:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008818:	d812      	bhi.n	8008840 <_realloc_r+0x5a>
 800881a:	4621      	mov	r1, r4
 800881c:	4640      	mov	r0, r8
 800881e:	f7fd fe3b 	bl	8006498 <_malloc_r>
 8008822:	4605      	mov	r5, r0
 8008824:	2800      	cmp	r0, #0
 8008826:	d0ed      	beq.n	8008804 <_realloc_r+0x1e>
 8008828:	42bc      	cmp	r4, r7
 800882a:	4622      	mov	r2, r4
 800882c:	4631      	mov	r1, r6
 800882e:	bf28      	it	cs
 8008830:	463a      	movcs	r2, r7
 8008832:	f7fc ff41 	bl	80056b8 <memcpy>
 8008836:	4631      	mov	r1, r6
 8008838:	4640      	mov	r0, r8
 800883a:	f7fd fdbd 	bl	80063b8 <_free_r>
 800883e:	e7e1      	b.n	8008804 <_realloc_r+0x1e>
 8008840:	4635      	mov	r5, r6
 8008842:	e7df      	b.n	8008804 <_realloc_r+0x1e>

08008844 <__ascii_wctomb>:
 8008844:	4603      	mov	r3, r0
 8008846:	4608      	mov	r0, r1
 8008848:	b141      	cbz	r1, 800885c <__ascii_wctomb+0x18>
 800884a:	2aff      	cmp	r2, #255	; 0xff
 800884c:	d904      	bls.n	8008858 <__ascii_wctomb+0x14>
 800884e:	228a      	movs	r2, #138	; 0x8a
 8008850:	f04f 30ff 	mov.w	r0, #4294967295
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	4770      	bx	lr
 8008858:	2001      	movs	r0, #1
 800885a:	700a      	strb	r2, [r1, #0]
 800885c:	4770      	bx	lr
	...

08008860 <fiprintf>:
 8008860:	b40e      	push	{r1, r2, r3}
 8008862:	b503      	push	{r0, r1, lr}
 8008864:	4601      	mov	r1, r0
 8008866:	ab03      	add	r3, sp, #12
 8008868:	4805      	ldr	r0, [pc, #20]	; (8008880 <fiprintf+0x20>)
 800886a:	f853 2b04 	ldr.w	r2, [r3], #4
 800886e:	6800      	ldr	r0, [r0, #0]
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f000 f83d 	bl	80088f0 <_vfiprintf_r>
 8008876:	b002      	add	sp, #8
 8008878:	f85d eb04 	ldr.w	lr, [sp], #4
 800887c:	b003      	add	sp, #12
 800887e:	4770      	bx	lr
 8008880:	20000064 	.word	0x20000064

08008884 <abort>:
 8008884:	2006      	movs	r0, #6
 8008886:	b508      	push	{r3, lr}
 8008888:	f000 fa0a 	bl	8008ca0 <raise>
 800888c:	2001      	movs	r0, #1
 800888e:	f7f9 f82c 	bl	80018ea <_exit>

08008892 <_malloc_usable_size_r>:
 8008892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008896:	1f18      	subs	r0, r3, #4
 8008898:	2b00      	cmp	r3, #0
 800889a:	bfbc      	itt	lt
 800889c:	580b      	ldrlt	r3, [r1, r0]
 800889e:	18c0      	addlt	r0, r0, r3
 80088a0:	4770      	bx	lr

080088a2 <__sfputc_r>:
 80088a2:	6893      	ldr	r3, [r2, #8]
 80088a4:	b410      	push	{r4}
 80088a6:	3b01      	subs	r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	6093      	str	r3, [r2, #8]
 80088ac:	da07      	bge.n	80088be <__sfputc_r+0x1c>
 80088ae:	6994      	ldr	r4, [r2, #24]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	db01      	blt.n	80088b8 <__sfputc_r+0x16>
 80088b4:	290a      	cmp	r1, #10
 80088b6:	d102      	bne.n	80088be <__sfputc_r+0x1c>
 80088b8:	bc10      	pop	{r4}
 80088ba:	f000 b933 	b.w	8008b24 <__swbuf_r>
 80088be:	6813      	ldr	r3, [r2, #0]
 80088c0:	1c58      	adds	r0, r3, #1
 80088c2:	6010      	str	r0, [r2, #0]
 80088c4:	7019      	strb	r1, [r3, #0]
 80088c6:	4608      	mov	r0, r1
 80088c8:	bc10      	pop	{r4}
 80088ca:	4770      	bx	lr

080088cc <__sfputs_r>:
 80088cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ce:	4606      	mov	r6, r0
 80088d0:	460f      	mov	r7, r1
 80088d2:	4614      	mov	r4, r2
 80088d4:	18d5      	adds	r5, r2, r3
 80088d6:	42ac      	cmp	r4, r5
 80088d8:	d101      	bne.n	80088de <__sfputs_r+0x12>
 80088da:	2000      	movs	r0, #0
 80088dc:	e007      	b.n	80088ee <__sfputs_r+0x22>
 80088de:	463a      	mov	r2, r7
 80088e0:	4630      	mov	r0, r6
 80088e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e6:	f7ff ffdc 	bl	80088a2 <__sfputc_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	d1f3      	bne.n	80088d6 <__sfputs_r+0xa>
 80088ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088f0 <_vfiprintf_r>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	460d      	mov	r5, r1
 80088f6:	4614      	mov	r4, r2
 80088f8:	4698      	mov	r8, r3
 80088fa:	4606      	mov	r6, r0
 80088fc:	b09d      	sub	sp, #116	; 0x74
 80088fe:	b118      	cbz	r0, 8008908 <_vfiprintf_r+0x18>
 8008900:	6a03      	ldr	r3, [r0, #32]
 8008902:	b90b      	cbnz	r3, 8008908 <_vfiprintf_r+0x18>
 8008904:	f7fc fdb2 	bl	800546c <__sinit>
 8008908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800890a:	07d9      	lsls	r1, r3, #31
 800890c:	d405      	bmi.n	800891a <_vfiprintf_r+0x2a>
 800890e:	89ab      	ldrh	r3, [r5, #12]
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d402      	bmi.n	800891a <_vfiprintf_r+0x2a>
 8008914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008916:	f7fc febf 	bl	8005698 <__retarget_lock_acquire_recursive>
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	071b      	lsls	r3, r3, #28
 800891e:	d501      	bpl.n	8008924 <_vfiprintf_r+0x34>
 8008920:	692b      	ldr	r3, [r5, #16]
 8008922:	b99b      	cbnz	r3, 800894c <_vfiprintf_r+0x5c>
 8008924:	4629      	mov	r1, r5
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f93a 	bl	8008ba0 <__swsetup_r>
 800892c:	b170      	cbz	r0, 800894c <_vfiprintf_r+0x5c>
 800892e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008930:	07dc      	lsls	r4, r3, #31
 8008932:	d504      	bpl.n	800893e <_vfiprintf_r+0x4e>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b01d      	add	sp, #116	; 0x74
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	0598      	lsls	r0, r3, #22
 8008942:	d4f7      	bmi.n	8008934 <_vfiprintf_r+0x44>
 8008944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008946:	f7fc fea8 	bl	800569a <__retarget_lock_release_recursive>
 800894a:	e7f3      	b.n	8008934 <_vfiprintf_r+0x44>
 800894c:	2300      	movs	r3, #0
 800894e:	9309      	str	r3, [sp, #36]	; 0x24
 8008950:	2320      	movs	r3, #32
 8008952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008956:	2330      	movs	r3, #48	; 0x30
 8008958:	f04f 0901 	mov.w	r9, #1
 800895c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008960:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008b10 <_vfiprintf_r+0x220>
 8008964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008968:	4623      	mov	r3, r4
 800896a:	469a      	mov	sl, r3
 800896c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008970:	b10a      	cbz	r2, 8008976 <_vfiprintf_r+0x86>
 8008972:	2a25      	cmp	r2, #37	; 0x25
 8008974:	d1f9      	bne.n	800896a <_vfiprintf_r+0x7a>
 8008976:	ebba 0b04 	subs.w	fp, sl, r4
 800897a:	d00b      	beq.n	8008994 <_vfiprintf_r+0xa4>
 800897c:	465b      	mov	r3, fp
 800897e:	4622      	mov	r2, r4
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa2 	bl	80088cc <__sfputs_r>
 8008988:	3001      	adds	r0, #1
 800898a:	f000 80a9 	beq.w	8008ae0 <_vfiprintf_r+0x1f0>
 800898e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008990:	445a      	add	r2, fp
 8008992:	9209      	str	r2, [sp, #36]	; 0x24
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80a1 	beq.w	8008ae0 <_vfiprintf_r+0x1f0>
 800899e:	2300      	movs	r3, #0
 80089a0:	f04f 32ff 	mov.w	r2, #4294967295
 80089a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a8:	f10a 0a01 	add.w	sl, sl, #1
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	9307      	str	r3, [sp, #28]
 80089b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b4:	931a      	str	r3, [sp, #104]	; 0x68
 80089b6:	4654      	mov	r4, sl
 80089b8:	2205      	movs	r2, #5
 80089ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089be:	4854      	ldr	r0, [pc, #336]	; (8008b10 <_vfiprintf_r+0x220>)
 80089c0:	f7fc fe6c 	bl	800569c <memchr>
 80089c4:	9a04      	ldr	r2, [sp, #16]
 80089c6:	b9d8      	cbnz	r0, 8008a00 <_vfiprintf_r+0x110>
 80089c8:	06d1      	lsls	r1, r2, #27
 80089ca:	bf44      	itt	mi
 80089cc:	2320      	movmi	r3, #32
 80089ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d2:	0713      	lsls	r3, r2, #28
 80089d4:	bf44      	itt	mi
 80089d6:	232b      	movmi	r3, #43	; 0x2b
 80089d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089dc:	f89a 3000 	ldrb.w	r3, [sl]
 80089e0:	2b2a      	cmp	r3, #42	; 0x2a
 80089e2:	d015      	beq.n	8008a10 <_vfiprintf_r+0x120>
 80089e4:	4654      	mov	r4, sl
 80089e6:	2000      	movs	r0, #0
 80089e8:	f04f 0c0a 	mov.w	ip, #10
 80089ec:	9a07      	ldr	r2, [sp, #28]
 80089ee:	4621      	mov	r1, r4
 80089f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f4:	3b30      	subs	r3, #48	; 0x30
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d94d      	bls.n	8008a96 <_vfiprintf_r+0x1a6>
 80089fa:	b1b0      	cbz	r0, 8008a2a <_vfiprintf_r+0x13a>
 80089fc:	9207      	str	r2, [sp, #28]
 80089fe:	e014      	b.n	8008a2a <_vfiprintf_r+0x13a>
 8008a00:	eba0 0308 	sub.w	r3, r0, r8
 8008a04:	fa09 f303 	lsl.w	r3, r9, r3
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	46a2      	mov	sl, r4
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	e7d2      	b.n	80089b6 <_vfiprintf_r+0xc6>
 8008a10:	9b03      	ldr	r3, [sp, #12]
 8008a12:	1d19      	adds	r1, r3, #4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	9103      	str	r1, [sp, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbb      	ittet	lt
 8008a1c:	425b      	neglt	r3, r3
 8008a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a22:	9307      	strge	r3, [sp, #28]
 8008a24:	9307      	strlt	r3, [sp, #28]
 8008a26:	bfb8      	it	lt
 8008a28:	9204      	strlt	r2, [sp, #16]
 8008a2a:	7823      	ldrb	r3, [r4, #0]
 8008a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2e:	d10c      	bne.n	8008a4a <_vfiprintf_r+0x15a>
 8008a30:	7863      	ldrb	r3, [r4, #1]
 8008a32:	2b2a      	cmp	r3, #42	; 0x2a
 8008a34:	d134      	bne.n	8008aa0 <_vfiprintf_r+0x1b0>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	3402      	adds	r4, #2
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfb8      	it	lt
 8008a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b14 <_vfiprintf_r+0x224>
 8008a4e:	2203      	movs	r2, #3
 8008a50:	4650      	mov	r0, sl
 8008a52:	7821      	ldrb	r1, [r4, #0]
 8008a54:	f7fc fe22 	bl	800569c <memchr>
 8008a58:	b138      	cbz	r0, 8008a6a <_vfiprintf_r+0x17a>
 8008a5a:	2240      	movs	r2, #64	; 0x40
 8008a5c:	9b04      	ldr	r3, [sp, #16]
 8008a5e:	eba0 000a 	sub.w	r0, r0, sl
 8008a62:	4082      	lsls	r2, r0
 8008a64:	4313      	orrs	r3, r2
 8008a66:	3401      	adds	r4, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6e:	2206      	movs	r2, #6
 8008a70:	4829      	ldr	r0, [pc, #164]	; (8008b18 <_vfiprintf_r+0x228>)
 8008a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a76:	f7fc fe11 	bl	800569c <memchr>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d03f      	beq.n	8008afe <_vfiprintf_r+0x20e>
 8008a7e:	4b27      	ldr	r3, [pc, #156]	; (8008b1c <_vfiprintf_r+0x22c>)
 8008a80:	bb1b      	cbnz	r3, 8008aca <_vfiprintf_r+0x1da>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	3307      	adds	r3, #7
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a90:	443b      	add	r3, r7
 8008a92:	9309      	str	r3, [sp, #36]	; 0x24
 8008a94:	e768      	b.n	8008968 <_vfiprintf_r+0x78>
 8008a96:	460c      	mov	r4, r1
 8008a98:	2001      	movs	r0, #1
 8008a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9e:	e7a6      	b.n	80089ee <_vfiprintf_r+0xfe>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f04f 0c0a 	mov.w	ip, #10
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	9305      	str	r3, [sp, #20]
 8008aac:	4620      	mov	r0, r4
 8008aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab2:	3a30      	subs	r2, #48	; 0x30
 8008ab4:	2a09      	cmp	r2, #9
 8008ab6:	d903      	bls.n	8008ac0 <_vfiprintf_r+0x1d0>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0c6      	beq.n	8008a4a <_vfiprintf_r+0x15a>
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	e7c4      	b.n	8008a4a <_vfiprintf_r+0x15a>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac8:	e7f0      	b.n	8008aac <_vfiprintf_r+0x1bc>
 8008aca:	ab03      	add	r3, sp, #12
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <_vfiprintf_r+0x230>)
 8008ad4:	a904      	add	r1, sp, #16
 8008ad6:	f7fb fe7f 	bl	80047d8 <_printf_float>
 8008ada:	4607      	mov	r7, r0
 8008adc:	1c78      	adds	r0, r7, #1
 8008ade:	d1d6      	bne.n	8008a8e <_vfiprintf_r+0x19e>
 8008ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_vfiprintf_r+0x202>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_vfiprintf_r+0x202>
 8008aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aee:	f7fc fdd4 	bl	800569a <__retarget_lock_release_recursive>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	065b      	lsls	r3, r3, #25
 8008af6:	f53f af1d 	bmi.w	8008934 <_vfiprintf_r+0x44>
 8008afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008afc:	e71c      	b.n	8008938 <_vfiprintf_r+0x48>
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	462a      	mov	r2, r5
 8008b04:	4630      	mov	r0, r6
 8008b06:	4b06      	ldr	r3, [pc, #24]	; (8008b20 <_vfiprintf_r+0x230>)
 8008b08:	a904      	add	r1, sp, #16
 8008b0a:	f7fc f905 	bl	8004d18 <_printf_i>
 8008b0e:	e7e4      	b.n	8008ada <_vfiprintf_r+0x1ea>
 8008b10:	080091a9 	.word	0x080091a9
 8008b14:	080091af 	.word	0x080091af
 8008b18:	080091b3 	.word	0x080091b3
 8008b1c:	080047d9 	.word	0x080047d9
 8008b20:	080088cd 	.word	0x080088cd

08008b24 <__swbuf_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	460e      	mov	r6, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	b118      	cbz	r0, 8008b36 <__swbuf_r+0x12>
 8008b2e:	6a03      	ldr	r3, [r0, #32]
 8008b30:	b90b      	cbnz	r3, 8008b36 <__swbuf_r+0x12>
 8008b32:	f7fc fc9b 	bl	800546c <__sinit>
 8008b36:	69a3      	ldr	r3, [r4, #24]
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	071a      	lsls	r2, r3, #28
 8008b3e:	d525      	bpl.n	8008b8c <__swbuf_r+0x68>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	b31b      	cbz	r3, 8008b8c <__swbuf_r+0x68>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	6922      	ldr	r2, [r4, #16]
 8008b48:	b2f6      	uxtb	r6, r6
 8008b4a:	1a98      	subs	r0, r3, r2
 8008b4c:	6963      	ldr	r3, [r4, #20]
 8008b4e:	4637      	mov	r7, r6
 8008b50:	4283      	cmp	r3, r0
 8008b52:	dc04      	bgt.n	8008b5e <__swbuf_r+0x3a>
 8008b54:	4621      	mov	r1, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	f7ff fa3e 	bl	8007fd8 <_fflush_r>
 8008b5c:	b9e0      	cbnz	r0, 8008b98 <__swbuf_r+0x74>
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	60a3      	str	r3, [r4, #8]
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	701e      	strb	r6, [r3, #0]
 8008b6c:	6962      	ldr	r2, [r4, #20]
 8008b6e:	1c43      	adds	r3, r0, #1
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d004      	beq.n	8008b7e <__swbuf_r+0x5a>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	07db      	lsls	r3, r3, #31
 8008b78:	d506      	bpl.n	8008b88 <__swbuf_r+0x64>
 8008b7a:	2e0a      	cmp	r6, #10
 8008b7c:	d104      	bne.n	8008b88 <__swbuf_r+0x64>
 8008b7e:	4621      	mov	r1, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f7ff fa29 	bl	8007fd8 <_fflush_r>
 8008b86:	b938      	cbnz	r0, 8008b98 <__swbuf_r+0x74>
 8008b88:	4638      	mov	r0, r7
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b8c:	4621      	mov	r1, r4
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 f806 	bl	8008ba0 <__swsetup_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d0d5      	beq.n	8008b44 <__swbuf_r+0x20>
 8008b98:	f04f 37ff 	mov.w	r7, #4294967295
 8008b9c:	e7f4      	b.n	8008b88 <__swbuf_r+0x64>
	...

08008ba0 <__swsetup_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4b2a      	ldr	r3, [pc, #168]	; (8008c4c <__swsetup_r+0xac>)
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	460c      	mov	r4, r1
 8008baa:	b118      	cbz	r0, 8008bb4 <__swsetup_r+0x14>
 8008bac:	6a03      	ldr	r3, [r0, #32]
 8008bae:	b90b      	cbnz	r3, 8008bb4 <__swsetup_r+0x14>
 8008bb0:	f7fc fc5c 	bl	800546c <__sinit>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bba:	0718      	lsls	r0, r3, #28
 8008bbc:	d422      	bmi.n	8008c04 <__swsetup_r+0x64>
 8008bbe:	06d9      	lsls	r1, r3, #27
 8008bc0:	d407      	bmi.n	8008bd2 <__swsetup_r+0x32>
 8008bc2:	2309      	movs	r3, #9
 8008bc4:	602b      	str	r3, [r5, #0]
 8008bc6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	e034      	b.n	8008c3c <__swsetup_r+0x9c>
 8008bd2:	0758      	lsls	r0, r3, #29
 8008bd4:	d512      	bpl.n	8008bfc <__swsetup_r+0x5c>
 8008bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd8:	b141      	cbz	r1, 8008bec <__swsetup_r+0x4c>
 8008bda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bde:	4299      	cmp	r1, r3
 8008be0:	d002      	beq.n	8008be8 <__swsetup_r+0x48>
 8008be2:	4628      	mov	r0, r5
 8008be4:	f7fd fbe8 	bl	80063b8 <_free_r>
 8008be8:	2300      	movs	r3, #0
 8008bea:	6363      	str	r3, [r4, #52]	; 0x34
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	6063      	str	r3, [r4, #4]
 8008bf8:	6923      	ldr	r3, [r4, #16]
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	f043 0308 	orr.w	r3, r3, #8
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	b94b      	cbnz	r3, 8008c1c <__swsetup_r+0x7c>
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c12:	d003      	beq.n	8008c1c <__swsetup_r+0x7c>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4628      	mov	r0, r5
 8008c18:	f000 f883 	bl	8008d22 <__smakebuf_r>
 8008c1c:	89a0      	ldrh	r0, [r4, #12]
 8008c1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c22:	f010 0301 	ands.w	r3, r0, #1
 8008c26:	d00a      	beq.n	8008c3e <__swsetup_r+0x9e>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60a3      	str	r3, [r4, #8]
 8008c2c:	6963      	ldr	r3, [r4, #20]
 8008c2e:	425b      	negs	r3, r3
 8008c30:	61a3      	str	r3, [r4, #24]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	b943      	cbnz	r3, 8008c48 <__swsetup_r+0xa8>
 8008c36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c3a:	d1c4      	bne.n	8008bc6 <__swsetup_r+0x26>
 8008c3c:	bd38      	pop	{r3, r4, r5, pc}
 8008c3e:	0781      	lsls	r1, r0, #30
 8008c40:	bf58      	it	pl
 8008c42:	6963      	ldrpl	r3, [r4, #20]
 8008c44:	60a3      	str	r3, [r4, #8]
 8008c46:	e7f4      	b.n	8008c32 <__swsetup_r+0x92>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e7f7      	b.n	8008c3c <__swsetup_r+0x9c>
 8008c4c:	20000064 	.word	0x20000064

08008c50 <_raise_r>:
 8008c50:	291f      	cmp	r1, #31
 8008c52:	b538      	push	{r3, r4, r5, lr}
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	d904      	bls.n	8008c64 <_raise_r+0x14>
 8008c5a:	2316      	movs	r3, #22
 8008c5c:	6003      	str	r3, [r0, #0]
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008c66:	b112      	cbz	r2, 8008c6e <_raise_r+0x1e>
 8008c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c6c:	b94b      	cbnz	r3, 8008c82 <_raise_r+0x32>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 f830 	bl	8008cd4 <_getpid_r>
 8008c74:	462a      	mov	r2, r5
 8008c76:	4601      	mov	r1, r0
 8008c78:	4620      	mov	r0, r4
 8008c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7e:	f000 b817 	b.w	8008cb0 <_kill_r>
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00a      	beq.n	8008c9c <_raise_r+0x4c>
 8008c86:	1c59      	adds	r1, r3, #1
 8008c88:	d103      	bne.n	8008c92 <_raise_r+0x42>
 8008c8a:	2316      	movs	r3, #22
 8008c8c:	6003      	str	r3, [r0, #0]
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7e7      	b.n	8008c62 <_raise_r+0x12>
 8008c92:	2400      	movs	r4, #0
 8008c94:	4628      	mov	r0, r5
 8008c96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c9a:	4798      	blx	r3
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7e0      	b.n	8008c62 <_raise_r+0x12>

08008ca0 <raise>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <raise+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f7ff bfd3 	b.w	8008c50 <_raise_r>
 8008caa:	bf00      	nop
 8008cac:	20000064 	.word	0x20000064

08008cb0 <_kill_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4d06      	ldr	r5, [pc, #24]	; (8008cd0 <_kill_r+0x20>)
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	4611      	mov	r1, r2
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	f7f8 fe04 	bl	80018ca <_kill>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	d102      	bne.n	8008ccc <_kill_r+0x1c>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b103      	cbz	r3, 8008ccc <_kill_r+0x1c>
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	bf00      	nop
 8008cd0:	200008d0 	.word	0x200008d0

08008cd4 <_getpid_r>:
 8008cd4:	f7f8 bdf2 	b.w	80018bc <_getpid>

08008cd8 <__swhatbuf_r>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	460c      	mov	r4, r1
 8008cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	461e      	mov	r6, r3
 8008ce6:	b096      	sub	sp, #88	; 0x58
 8008ce8:	da0c      	bge.n	8008d04 <__swhatbuf_r+0x2c>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	2100      	movs	r1, #0
 8008cee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008cf2:	bf0c      	ite	eq
 8008cf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008cf8:	2340      	movne	r3, #64	; 0x40
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	6031      	str	r1, [r6, #0]
 8008cfe:	602b      	str	r3, [r5, #0]
 8008d00:	b016      	add	sp, #88	; 0x58
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	466a      	mov	r2, sp
 8008d06:	f000 f849 	bl	8008d9c <_fstat_r>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	dbed      	blt.n	8008cea <__swhatbuf_r+0x12>
 8008d0e:	9901      	ldr	r1, [sp, #4]
 8008d10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008d14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008d18:	4259      	negs	r1, r3
 8008d1a:	4159      	adcs	r1, r3
 8008d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d20:	e7eb      	b.n	8008cfa <__swhatbuf_r+0x22>

08008d22 <__smakebuf_r>:
 8008d22:	898b      	ldrh	r3, [r1, #12]
 8008d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d26:	079d      	lsls	r5, r3, #30
 8008d28:	4606      	mov	r6, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	d507      	bpl.n	8008d3e <__smakebuf_r+0x1c>
 8008d2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	2301      	movs	r3, #1
 8008d38:	6163      	str	r3, [r4, #20]
 8008d3a:	b002      	add	sp, #8
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	466a      	mov	r2, sp
 8008d40:	ab01      	add	r3, sp, #4
 8008d42:	f7ff ffc9 	bl	8008cd8 <__swhatbuf_r>
 8008d46:	9900      	ldr	r1, [sp, #0]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7fd fba4 	bl	8006498 <_malloc_r>
 8008d50:	b948      	cbnz	r0, 8008d66 <__smakebuf_r+0x44>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	059a      	lsls	r2, r3, #22
 8008d58:	d4ef      	bmi.n	8008d3a <__smakebuf_r+0x18>
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0302 	orr.w	r3, r3, #2
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	e7e3      	b.n	8008d2e <__smakebuf_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	6020      	str	r0, [r4, #0]
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	6120      	str	r0, [r4, #16]
 8008d74:	6163      	str	r3, [r4, #20]
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	b15b      	cbz	r3, 8008d92 <__smakebuf_r+0x70>
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d80:	f000 f81e 	bl	8008dc0 <_isatty_r>
 8008d84:	b128      	cbz	r0, 8008d92 <__smakebuf_r+0x70>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	f023 0303 	bic.w	r3, r3, #3
 8008d8c:	f043 0301 	orr.w	r3, r3, #1
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	431d      	orrs	r5, r3
 8008d96:	81a5      	strh	r5, [r4, #12]
 8008d98:	e7cf      	b.n	8008d3a <__smakebuf_r+0x18>
	...

08008d9c <_fstat_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4d06      	ldr	r5, [pc, #24]	; (8008dbc <_fstat_r+0x20>)
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	4611      	mov	r1, r2
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	f7f8 fdec 	bl	8001986 <_fstat>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	d102      	bne.n	8008db8 <_fstat_r+0x1c>
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	b103      	cbz	r3, 8008db8 <_fstat_r+0x1c>
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	bf00      	nop
 8008dbc:	200008d0 	.word	0x200008d0

08008dc0 <_isatty_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	4d05      	ldr	r5, [pc, #20]	; (8008ddc <_isatty_r+0x1c>)
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	f7f8 fdea 	bl	80019a4 <_isatty>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_isatty_r+0x1a>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_isatty_r+0x1a>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	200008d0 	.word	0x200008d0

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
